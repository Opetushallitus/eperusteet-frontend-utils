Migrate given file from vue2 to vue3 as senior professional coder would.

Use all these guidelines below!

Vue component might use vue-property-decorator or vue-facing-decorator, convert component away from these correctly.

Use composition API and <script setup>

Always file content order is <template>, <script>, <style>

Always follow all these rules, separated by '-------------------------------------------------' below to the end of the file:

-------------------------------------------------

Define props like 'const props = defineProps()'

-------------------------------------------------

IF component has in any form
this.$emit('input'

AND

private value

THEN

change 'value' property to 'modelValue' and 'input' event to 'update:modelValue'

DO NOT change v-model to :modelValue

-------------------------------------------------

IF component has this.$emit THEN add defineEmits
for example:

this.$emit('doStuff', data);

to

const emit = defineEmits(['doStuff']);
emit('doStuff', data);

-------------------------------------------------

IF component has this.$refs OR $ref THEN add useTemplateRef
for example:

this.$refs.childComponent.doStuff();

to

import { useTemplateRef } from 'vue';
const childComponent = useTemplateRef('childComponent');
childComponent.doStuff();

-------------------------------------------------

IF component has this.$slots THEN add useSlots
for example:

this.$slots.left;

to

const slots = useSlots();
slots.left;

-------------------------------------------------

IF component has EpValidation OR validationMixin

THEN convert to use new @vuelidate/core

-------------------------------------------------

IF component uses any variable which starts with this.$
AND is configured in subdirectory eperusteet-frontend-utils/vue/src/utils/globals.ts

THEN get instance from eperusteet-frontend-utils/vue/src/utils/globals.ts like

import { $kaanna, $kaannaPlaceholder } from '@shared/utils/globals';

-------------------------------------------------

IF component uses any of these
this.$bvModal

THEN get instance from proxy like

const instance = getCurrentInstance();
const $bvModal = (instance?.proxy?.$root as any)?.$bvModal;

-------------------------------------------------

IF component uses this.$el

THEN get instance from proxy like

const instance = getCurrentInstance();
const $el = getCurrentInstance()?.proxy?.el;

-------------------------------------------------

add trailing commas (lint), for example

isEditing: {
  type: Boolean,
  default: false
}

to

isEditing: {
  type: Boolean,
  default: false,
},

-------------------------------------------------

IF component uses @Meta

THEN change it to
import { useHead  } from '@unhead/vue';

-------------------------------------------------

IF computed function is expected to return a value in computed function.eslintvue/return-in-computed-property
but function does not, then add

return undefined;

for example

const oppimaarat = computed(() => {
  if (props.oppiaine) {
    return props.oppiaine.oppimaarat;
  }
});

to

const oppimaarat = computed(() => {
  if (props.oppiaine) {
    return props.oppiaine.oppimaarat;
  }

  return undefined;
});

-------------------------------------------------

IF styles has ::v-deep then surround deep value with :deep(),

for example

::v-deep .collapse-button

to

:deep(.collapse-button)
