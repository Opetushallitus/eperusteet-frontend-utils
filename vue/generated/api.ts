// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * ePerusteet api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as url from 'url'
import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'

const BASE_PATH = 'http://http:/api'.replace(/\/+$/, '')

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
  csv: ',',
  ssv: ' ',
  tsv: '\t',
  pipes: '|'
}

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor (configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
      if (configuration) {
        this.configuration = configuration
        this.basePath = configuration.basePath || this.basePath
      }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: 'RequiredError' = 'RequiredError';
    constructor (public field: string, msg?: string) {
      super(msg)
    }
}

/**
 *
 * @export
 * @interface AIPEKurssiDto
 */
export interface AIPEKurssiDto {
    /**
     *
     * @type {number}
     * @memberof AIPEKurssiDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof AIPEKurssiDto
     */
    tunniste?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEKurssiDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {Reference}
     * @memberof AIPEKurssiDto
     */
    oppiaine?: Reference;
    /**
     *
     * @type {KoodiDto}
     * @memberof AIPEKurssiDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEKurssiDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<Reference>}
     * @memberof AIPEKurssiDto
     */
    tavoitteet?: Array<Reference>;
}

/**
 *
 * @export
 * @interface AIPEOpetuksenSisaltoDto
 */
export interface AIPEOpetuksenSisaltoDto {
    /**
     *
     * @type {Laaja}
     * @memberof AIPEOpetuksenSisaltoDto
     */
    sisalto?: Laaja;
    /**
     *
     * @type {Array<LaajaalainenOsaaminenDto>}
     * @memberof AIPEOpetuksenSisaltoDto
     */
    laajaalaisetosaamiset?: Array<LaajaalainenOsaaminenDto>;
    /**
     *
     * @type {Array<AIPEVaiheDto>}
     * @memberof AIPEOpetuksenSisaltoDto
     */
    vaiheet?: Array<AIPEVaiheDto>;
}

/**
 *
 * @export
 * @interface AIPEOppiaineLaajaDto
 */
export interface AIPEOppiaineLaajaDto {
    /**
     *
     * @type {number}
     * @memberof AIPEOppiaineLaajaDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof AIPEOppiaineLaajaDto
     */
    tunniste?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {Reference}
     * @memberof AIPEOppiaineLaajaDto
     */
    oppiaine?: Reference;
    /**
     *
     * @type {boolean}
     * @memberof AIPEOppiaineLaajaDto
     */
    koosteinen?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof AIPEOppiaineLaajaDto
     */
    abstrakti?: boolean;
    /**
     *
     * @type {Date}
     * @memberof AIPEOppiaineLaajaDto
     */
    muokattu?: Date;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    tehtava?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    arviointi?: TekstiOsaDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    tyotavat?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    ohjaus?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    sisaltoalueinfo?: TekstiOsaDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    pakollinenKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    syventavaKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    soveltavaKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEOppiaineLaajaDto
     */
    kielikasvatus?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<OpetuksenTavoiteDto>}
     * @memberof AIPEOppiaineLaajaDto
     */
    tavoitteet?: Array<OpetuksenTavoiteDto>;
    /**
     *
     * @type {Array<KeskeinenSisaltoalueDto>}
     * @memberof AIPEOppiaineLaajaDto
     */
    sisaltoalueet?: Array<KeskeinenSisaltoalueDto>;
    /**
     *
     * @type {Array<AIPEKurssiDto>}
     * @memberof AIPEOppiaineLaajaDto
     */
    kurssit?: Array<AIPEKurssiDto>;
}

/**
 *
 * @export
 * @interface AIPEVaiheDto
 */
export interface AIPEVaiheDto {
    /**
     *
     * @type {number}
     * @memberof AIPEVaiheDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof AIPEVaiheDto
     */
    tunniste?: string;
    /**
     *
     * @type {Date}
     * @memberof AIPEVaiheDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof AIPEVaiheDto
     */
    muokattu?: Date;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AIPEVaiheDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEVaiheDto
     */
    siirtymaEdellisesta?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEVaiheDto
     */
    tehtava?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEVaiheDto
     */
    siirtymaSeuraavaan?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEVaiheDto
     */
    laajaalainenOsaaminen?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof AIPEVaiheDto
     */
    paikallisestiPaatettavatAsiat?: TekstiOsaDto;
    /**
     *
     * @type {Array<OpetuksenKohdealueDto>}
     * @memberof AIPEVaiheDto
     */
    opetuksenKohdealueet?: Array<OpetuksenKohdealueDto>;
    /**
     *
     * @type {Array<AIPEOppiaineLaajaDto>}
     * @memberof AIPEVaiheDto
     */
    oppiaineet?: Array<AIPEOppiaineLaajaDto>;
}

/**
 *
 * @export
 * @interface AbstractRakenneOsaDto
 */
export interface AbstractRakenneOsaDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AbstractRakenneOsaDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof AbstractRakenneOsaDto
     */
    vieras?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof AbstractRakenneOsaDto
     */
    tunniste?: string;
    /**
     *
     * @type {boolean}
     * @memberof AbstractRakenneOsaDto
     */
    pakollinen?: boolean;
}

/**
 *
 * @export
 * @interface AihekokonaisuudetLaajaDto
 */
export interface AihekokonaisuudetLaajaDto extends Laaja {
    /**
     *
     * @type {string}
     * @memberof AihekokonaisuudetLaajaDto
     */
    uuidTunniste?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AihekokonaisuudetLaajaDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AihekokonaisuudetLaajaDto
     */
    yleiskuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<AihekokonaisuusDto>}
     * @memberof AihekokonaisuudetLaajaDto
     */
    aihekokonaisuudet?: Array<AihekokonaisuusDto>;
}

/**
 * @export
 * @namespace AihekokonaisuudetLaajaDto
 */
export namespace AihekokonaisuudetLaajaDto {
}

/**
 *
 * @export
 * @interface AihekokonaisuusDto
 */
export interface AihekokonaisuusDto {
    /**
     *
     * @type {string}
     * @memberof AihekokonaisuusDto
     */
    tunniste?: string;
    /**
     *
     * @type {number}
     * @memberof AihekokonaisuusDto
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof AihekokonaisuusDto
     */
    jnro?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AihekokonaisuusDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AihekokonaisuusDto
     */
    yleiskuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface Ammattitaitovaatimukset2019Dto
 */
export interface Ammattitaitovaatimukset2019Dto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Ammattitaitovaatimukset2019Dto
     */
    kohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<Ammattitaitovaatimus2019Dto>}
     * @memberof Ammattitaitovaatimukset2019Dto
     */
    vaatimukset?: Array<Ammattitaitovaatimus2019Dto>;
    /**
     *
     * @type {Array<AmmattitaitovaatimustenKohdealue2019Dto>}
     * @memberof Ammattitaitovaatimukset2019Dto
     */
    kohdealueet?: Array<AmmattitaitovaatimustenKohdealue2019Dto>;
}

/**
 *
 * @export
 * @interface Ammattitaitovaatimus2019Dto
 */
export interface Ammattitaitovaatimus2019Dto {
    /**
     *
     * @type {KoodiDto}
     * @memberof Ammattitaitovaatimus2019Dto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Ammattitaitovaatimus2019Dto
     */
    vaatimus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface AmmattitaitovaatimusDto
 */
export interface AmmattitaitovaatimusDto {
    /**
     *
     * @type {number}
     * @memberof AmmattitaitovaatimusDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AmmattitaitovaatimusDto
     */
    selite?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof AmmattitaitovaatimusDto
     */
    ammattitaitovaatimusKoodi?: string;
    /**
     *
     * @type {number}
     * @memberof AmmattitaitovaatimusDto
     */
    jarjestys?: number;
}

/**
 *
 * @export
 * @interface AmmattitaitovaatimusKohdeDto
 */
export interface AmmattitaitovaatimusKohdeDto {
    /**
     *
     * @type {number}
     * @memberof AmmattitaitovaatimusKohdeDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AmmattitaitovaatimusKohdeDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AmmattitaitovaatimusKohdeDto
     */
    selite?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<AmmattitaitovaatimusDto>}
     * @memberof AmmattitaitovaatimusKohdeDto
     */
    vaatimukset?: Array<AmmattitaitovaatimusDto>;
}

/**
 *
 * @export
 * @interface AmmattitaitovaatimusKohdealueetDto
 */
export interface AmmattitaitovaatimusKohdealueetDto {
    /**
     *
     * @type {number}
     * @memberof AmmattitaitovaatimusKohdealueetDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AmmattitaitovaatimusKohdealueetDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<AmmattitaitovaatimusKohdeDto>}
     * @memberof AmmattitaitovaatimusKohdealueetDto
     */
    vaatimuksenKohteet?: Array<AmmattitaitovaatimusKohdeDto>;
}

/**
 *
 * @export
 * @interface AmmattitaitovaatimustenKohdealue2019Dto
 */
export interface AmmattitaitovaatimustenKohdealue2019Dto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof AmmattitaitovaatimustenKohdealue2019Dto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<Ammattitaitovaatimus2019Dto>}
     * @memberof AmmattitaitovaatimustenKohdealue2019Dto
     */
    vaatimukset?: Array<Ammattitaitovaatimus2019Dto>;
}

/**
 *
 * @export
 * @interface ArvioinninKohdeDto
 */
export interface ArvioinninKohdeDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof ArvioinninKohdeDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof ArvioinninKohdeDto
     */
    selite?: LokalisoituTekstiDto;
    /**
     *
     * @type {Reference}
     * @memberof ArvioinninKohdeDto
     */
    arviointiAsteikko?: Reference;
    /**
     *
     * @type {Array<OsaamistasonKriteeriDto>}
     * @memberof ArvioinninKohdeDto
     */
    osaamistasonKriteerit?: Array<OsaamistasonKriteeriDto>;
}

/**
 *
 * @export
 * @interface ArvioinninKohdealueDto
 */
export interface ArvioinninKohdealueDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof ArvioinninKohdealueDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<ArvioinninKohdeDto>}
     * @memberof ArvioinninKohdealueDto
     */
    arvioinninKohteet?: Array<ArvioinninKohdeDto>;
    /**
     *
     * @type {KoodiDto}
     * @memberof ArvioinninKohdealueDto
     */
    koodi?: KoodiDto;
}

/**
 *
 * @export
 * @interface ArviointiAsteikkoDto
 */
export interface ArviointiAsteikkoDto {
    /**
     *
     * @type {number}
     * @memberof ArviointiAsteikkoDto
     */
    id?: number;
    /**
     *
     * @type {Array<OsaamistasoDto>}
     * @memberof ArviointiAsteikkoDto
     */
    osaamistasot?: Array<OsaamistasoDto>;
}

/**
 *
 * @export
 * @interface ArviointiDto
 */
export interface ArviointiDto {
    /**
     *
     * @type {number}
     * @memberof ArviointiDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof ArviointiDto
     */
    lisatiedot?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<ArvioinninKohdealueDto>}
     * @memberof ArviointiDto
     */
    arvioinninKohdealueet?: Array<ArvioinninKohdealueDto>;
}

/**
 *
 * @export
 * @interface BooleanDto
 */
export interface BooleanDto {
    /**
     *
     * @type {boolean}
     * @memberof BooleanDto
     */
    vastaus?: boolean;
}

/**
 *
 * @export
 * @interface CombinedDto
 */
export interface CombinedDto {
}

/**
 *
 * @export
 * @interface CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
 */
export interface CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto {
    /**
     *
     * @type {string}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    kutsumanimi?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    etunimet?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    sukunimi?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    oidHenkilo?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    kieliKoodi?: string;
    /**
     *
     * @type {any}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    yhteystiedot?: any;
    /**
     *
     * @type {number}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    perusteprojekti?: number;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    organisaatioOid?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    tehtavanimike?: string;
    /**
     *
     * @type {boolean}
     * @memberof CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto
     */
    passivoitu?: boolean;
}

/**
 *
 * @export
 * @interface CombinedDtoRevisionHenkiloTietoDto
 */
export interface CombinedDtoRevisionHenkiloTietoDto {
    /**
     *
     * @type {number}
     * @memberof CombinedDtoRevisionHenkiloTietoDto
     */
    numero?: number;
    /**
     *
     * @type {Date}
     * @memberof CombinedDtoRevisionHenkiloTietoDto
     */
    pvm?: Date;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoRevisionHenkiloTietoDto
     */
    muokkaajaOid?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoRevisionHenkiloTietoDto
     */
    kommentti?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoRevisionHenkiloTietoDto
     */
    kutsumanimi?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoRevisionHenkiloTietoDto
     */
    sukunimi?: string;
}

/**
 *
 * @export
 * @interface CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
 */
export interface CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto {
    /**
     *
     * @type {number}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    id?: number;
    /**
     *
     * @type {Reference}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    peruste?: Reference;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    tutkinnonOsaUri?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    tutkinnonOsaArvo?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    osaamisalaUri?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    osaamisalaArvo?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    tutkintonimikeUri?: string;
    /**
     *
     * @type {string}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    tutkintonimikeArvo?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto
     */
    nimi?: { [key: string]: string; };
}

/**
 *
 * @export
 * @interface DiaarinumeroHakuDto
 */
export interface DiaarinumeroHakuDto {
    /**
     *
     * @type {boolean}
     * @memberof DiaarinumeroHakuDto
     */
    loytyi?: boolean;
    /**
     *
     * @type {string}
     * @memberof DiaarinumeroHakuDto
     */
    tila?: DiaarinumeroHakuDto.TilaEnum;
    /**
     *
     * @type {number}
     * @memberof DiaarinumeroHakuDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof DiaarinumeroHakuDto
     */
    diaarinumero?: string;
}

/**
 * @export
 * @namespace DiaarinumeroHakuDto
 */
export namespace DiaarinumeroHakuDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
}

/**
 *
 * @export
 * @interface DokumenttiDto
 */
export interface DokumenttiDto {
    /**
     *
     * @type {number}
     * @memberof DokumenttiDto
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof DokumenttiDto
     */
    perusteId?: number;
    /**
     *
     * @type {string}
     * @memberof DokumenttiDto
     */
    luoja?: string;
    /**
     *
     * @type {string}
     * @memberof DokumenttiDto
     */
    kieli?: DokumenttiDto.KieliEnum;
    /**
     *
     * @type {Date}
     * @memberof DokumenttiDto
     */
    aloitusaika?: Date;
    /**
     *
     * @type {Date}
     * @memberof DokumenttiDto
     */
    valmistumisaika?: Date;
    /**
     *
     * @type {string}
     * @memberof DokumenttiDto
     */
    tila?: DokumenttiDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof DokumenttiDto
     */
    virhekoodi?: DokumenttiDto.VirhekoodiEnum;
    /**
     *
     * @type {string}
     * @memberof DokumenttiDto
     */
    suoritustapakoodi?: DokumenttiDto.SuoritustapakoodiEnum;
    /**
     *
     * @type {string}
     * @memberof DokumenttiDto
     */
    generatorVersion?: DokumenttiDto.GeneratorVersionEnum;
}

/**
 * @export
 * @namespace DokumenttiDto
 */
export namespace DokumenttiDto {
    /**
     * @export
     * @enum {string}
     */
    export enum KieliEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        EIOLE = 'EI_OLE',
        JONOSSA = 'JONOSSA',
        LUODAAN = 'LUODAAN',
        EPAONNISTUI = 'EPAONNISTUI',
        VALMIS = 'VALMIS'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum VirhekoodiEnum {
        EIVIRHETTA = 'EI_VIRHETTA',
        PERUSTETTAEILOYTYNYT = 'PERUSTETTA_EI_LOYTYNYT',
        TUNTEMATON = 'TUNTEMATON',
        TUNTEMATONLOKALISOINTI = 'TUNTEMATON_LOKALISOINTI'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SuoritustapakoodiEnum {
        OPS = 'OPS',
        NAYTTO = 'NAYTTO',
        REFORMI = 'REFORMI',
        PERUSOPETUS = 'PERUSOPETUS',
        LISAOPETUS = 'LISAOPETUS',
        VARHAISKASVATUS = 'VARHAISKASVATUS',
        OPAS = 'OPAS',
        ESIOPETUS = 'ESIOPETUS',
        AIPE = 'AIPE',
        TPO = 'TPO',
        LUKIOKOULUTUS = 'LUKIOKOULUTUS',
        LUKIOKOULUTUS2019 = 'LUKIOKOULUTUS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum GeneratorVersionEnum {
        VANHA = 'VANHA',
        UUSI = 'UUSI',
        KVLIITE = 'KVLIITE'
    }
}

/**
 *
 * @export
 * @interface EsiopetuksenPerusteenSisaltoDto
 */
export interface EsiopetuksenPerusteenSisaltoDto {
    /**
     *
     * @type {Laaja}
     * @memberof EsiopetuksenPerusteenSisaltoDto
     */
    sisalto?: Laaja;
}

/**
 *
 * @export
 * @interface GeneerinenArviointiasteikkoDto
 */
export interface GeneerinenArviointiasteikkoDto {
    /**
     *
     * @type {number}
     * @memberof GeneerinenArviointiasteikkoDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof GeneerinenArviointiasteikkoDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof GeneerinenArviointiasteikkoDto
     */
    kohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {Reference}
     * @memberof GeneerinenArviointiasteikkoDto
     */
    arviointiAsteikko?: Reference;
    /**
     *
     * @type {boolean}
     * @memberof GeneerinenArviointiasteikkoDto
     */
    julkaistu?: boolean;
    /**
     *
     * @type {Array<GeneerisenArvioinninOsaamistasonKriteeriDto>}
     * @memberof GeneerinenArviointiasteikkoDto
     */
    osaamistasonKriteerit?: Array<GeneerisenArvioinninOsaamistasonKriteeriDto>;
}

/**
 *
 * @export
 * @interface GeneerisenArvioinninOsaamistasonKriteeriDto
 */
export interface GeneerisenArvioinninOsaamistasonKriteeriDto {
    /**
     *
     * @type {Reference}
     * @memberof GeneerisenArvioinninOsaamistasonKriteeriDto
     */
    osaamistaso?: Reference;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof GeneerisenArvioinninOsaamistasonKriteeriDto
     */
    kriteerit?: Array<LokalisoituTekstiDto>;
}

/**
 *
 * @export
 * @interface HenkiloTietoDto
 */
export interface HenkiloTietoDto {
    /**
     *
     * @type {string}
     * @memberof HenkiloTietoDto
     */
    kutsumanimi?: string;
    /**
     *
     * @type {string}
     * @memberof HenkiloTietoDto
     */
    sukunimi?: string;
}

/**
 *
 * @export
 * @interface JulkaisuBaseDto
 */
export interface JulkaisuBaseDto {
    /**
     *
     * @type {number}
     * @memberof JulkaisuBaseDto
     */
    revision?: number;
    /**
     *
     * @type {PerusteBaseDto}
     * @memberof JulkaisuBaseDto
     */
    peruste?: PerusteBaseDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof JulkaisuBaseDto
     */
    tiedote?: LokalisoituTekstiDto;
    /**
     *
     * @type {Date}
     * @memberof JulkaisuBaseDto
     */
    luotu?: Date;
    /**
     *
     * @type {string}
     * @memberof JulkaisuBaseDto
     */
    luoja?: string;
}

/**
 *
 * @export
 * @interface KVLiiteDto
 */
export interface KVLiiteDto {
    /**
     *
     * @type {number}
     * @memberof KVLiiteDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    suorittaneenOsaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    tyotehtavatJoissaVoiToimia?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    tutkintotodistuksenAntaja?: LokalisoituTekstiDto;
    /**
     *
     * @type {Reference}
     * @memberof KVLiiteDto
     */
    arvosanaAsteikko?: Reference;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    jatkoopintoKelpoisuus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    kansainvalisetSopimukset?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    saadosPerusta?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    pohjakoulutusvaatimukset?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    lisatietoja?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    tutkintotodistuksenSaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteDto
     */
    tutkinnostaPaattavaViranomainen?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface KVLiiteJulkinenDto
 */
export interface KVLiiteJulkinenDto {
    /**
     *
     * @type {number}
     * @memberof KVLiiteJulkinenDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    suorittaneenOsaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    tyotehtavatJoissaVoiToimia?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    tutkintotodistuksenAntaja?: LokalisoituTekstiDto;
    /**
     *
     * @type {Reference}
     * @memberof KVLiiteJulkinenDto
     */
    arvosanaAsteikko?: Reference;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    jatkoopintoKelpoisuus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    kansainvalisetSopimukset?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    saadosPerusta?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    pohjakoulutusvaatimukset?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    lisatietoja?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    tutkintotodistuksenSaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    tutkinnostaPaattavaViranomainen?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof KVLiiteJulkinenDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteJulkinenDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {MaarayskirjeDto}
     * @memberof KVLiiteJulkinenDto
     */
    maarayskirje?: MaarayskirjeDto;
    /**
     *
     * @type {string}
     * @memberof KVLiiteJulkinenDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof KVLiiteJulkinenDto
     */
    voimassaoloAlkaa?: Date;
    /**
     *
     * @type {Array<KVLiiteTasoDto>}
     * @memberof KVLiiteJulkinenDto
     */
    tasot?: Array<KVLiiteTasoDto>;
    /**
     *
     * @type {{ [key: string]: LokalisoituTekstiDto; }}
     * @memberof KVLiiteJulkinenDto
     */
    muodostumisenKuvaus?: { [key: string]: LokalisoituTekstiDto; };
    /**
     *
     * @type {boolean}
     * @memberof KVLiiteJulkinenDto
     */
    periytynyt?: boolean;
}

/**
 *
 * @export
 * @interface KVLiiteTasoDto
 */
export interface KVLiiteTasoDto {
    /**
     *
     * @type {string}
     * @memberof KVLiiteTasoDto
     */
    codeUri?: string;
    /**
     *
     * @type {string}
     * @memberof KVLiiteTasoDto
     */
    codeValue?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KVLiiteTasoDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof KVLiiteTasoDto
     */
    jarjestys?: number;
}

/**
 *
 * @export
 * @interface KayttajanProjektitiedotDto
 */
export interface KayttajanProjektitiedotDto {
    /**
     *
     * @type {number}
     * @memberof KayttajanProjektitiedotDto
     */
    perusteprojekti?: number;
    /**
     *
     * @type {string}
     * @memberof KayttajanProjektitiedotDto
     */
    organisaatioOid?: string;
    /**
     *
     * @type {string}
     * @memberof KayttajanProjektitiedotDto
     */
    tehtavanimike?: string;
    /**
     *
     * @type {boolean}
     * @memberof KayttajanProjektitiedotDto
     */
    passivoitu?: boolean;
}

/**
 *
 * @export
 * @interface KayttajanTietoDto
 */
export interface KayttajanTietoDto {
    /**
     *
     * @type {string}
     * @memberof KayttajanTietoDto
     */
    kutsumanimi?: string;
    /**
     *
     * @type {string}
     * @memberof KayttajanTietoDto
     */
    etunimet?: string;
    /**
     *
     * @type {string}
     * @memberof KayttajanTietoDto
     */
    sukunimi?: string;
    /**
     *
     * @type {string}
     * @memberof KayttajanTietoDto
     */
    oidHenkilo?: string;
    /**
     *
     * @type {string}
     * @memberof KayttajanTietoDto
     */
    kieliKoodi?: string;
    /**
     *
     * @type {any}
     * @memberof KayttajanTietoDto
     */
    yhteystiedot?: any;
}

/**
 *
 * @export
 * @interface KeskeinenSisaltoalueDto
 */
export interface KeskeinenSisaltoalueDto {
    /**
     *
     * @type {number}
     * @memberof KeskeinenSisaltoalueDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof KeskeinenSisaltoalueDto
     */
    tunniste?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KeskeinenSisaltoalueDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KeskeinenSisaltoalueDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface KevytTekstiKappaleDto
 */
export interface KevytTekstiKappaleDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KevytTekstiKappaleDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KevytTekstiKappaleDto
     */
    teksti?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof KevytTekstiKappaleDto
     */
    jnro?: number;
}

/**
 *
 * @export
 * @interface Koko
 */
export interface Koko {
    /**
     *
     * @type {number}
     * @memberof Koko
     */
    minimi?: number;
    /**
     *
     * @type {number}
     * @memberof Koko
     */
    maksimi?: number;
}

/**
 *
 * @export
 * @interface KoodiDto
 */
export interface KoodiDto {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof KoodiDto
     */
    nimi?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof KoodiDto
     */
    arvo?: string;
    /**
     *
     * @type {string}
     * @memberof KoodiDto
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof KoodiDto
     */
    koodisto?: string;
    /**
     *
     * @type {number}
     * @memberof KoodiDto
     */
    versio?: number;
}

/**
 *
 * @export
 * @interface KoodistoDto
 */
export interface KoodistoDto {
    /**
     *
     * @type {string}
     * @memberof KoodistoDto
     */
    koodistoUri?: string;
    /**
     *
     * @type {KoodistoVersioDto}
     * @memberof KoodistoDto
     */
    latestKoodistoVersio?: KoodistoVersioDto;
}

/**
 *
 * @export
 * @interface KoodistoKoodiDto
 */
export interface KoodistoKoodiDto {
    /**
     *
     * @type {string}
     * @memberof KoodistoKoodiDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof KoodistoKoodiDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {string}
     * @memberof KoodistoKoodiDto
     */
    versio?: string;
    /**
     *
     * @type {Array<KoodistoMetadataDto>}
     * @memberof KoodistoKoodiDto
     */
    metadata?: Array<KoodistoMetadataDto>;
    /**
     *
     * @type {KoodistoDto}
     * @memberof KoodistoKoodiDto
     */
    koodisto?: KoodistoDto;
    /**
     *
     * @type {Date}
     * @memberof KoodistoKoodiDto
     */
    voimassaAlkuPvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof KoodistoKoodiDto
     */
    voimassaLoppuPvm?: Date;
}

/**
 *
 * @export
 * @interface KoodistoMetadataDto
 */
export interface KoodistoMetadataDto {
    /**
     *
     * @type {string}
     * @memberof KoodistoMetadataDto
     */
    nimi?: string;
    /**
     *
     * @type {string}
     * @memberof KoodistoMetadataDto
     */
    kieli?: string;
    /**
     *
     * @type {string}
     * @memberof KoodistoMetadataDto
     */
    kuvaus?: string;
}

/**
 *
 * @export
 * @interface KoodistoVersioDto
 */
export interface KoodistoVersioDto {
    /**
     *
     * @type {string}
     * @memberof KoodistoVersioDto
     */
    versio?: string;
}

/**
 *
 * @export
 * @interface KoosteenOsaamisalaDto
 */
export interface KoosteenOsaamisalaDto {
    /**
     *
     * @type {KoodiDto}
     * @memberof KoosteenOsaamisalaDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof KoosteenOsaamisalaDto
     */
    tutkinnonOsat?: Array<KoodiDto>;
}

/**
 *
 * @export
 * @interface KoulutusDto
 */
export interface KoulutusDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KoulutusDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof KoulutusDto
     */
    koulutuskoodiArvo?: string;
    /**
     *
     * @type {string}
     * @memberof KoulutusDto
     */
    koulutuskoodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof KoulutusDto
     */
    koulutusalakoodi?: string;
    /**
     *
     * @type {string}
     * @memberof KoulutusDto
     */
    opintoalakoodi?: string;
}

/**
 *
 * @export
 * @interface KoulutusalaDto
 */
export interface KoulutusalaDto {
    /**
     *
     * @type {string}
     * @memberof KoulutusalaDto
     */
    koodi?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof KoulutusalaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<OpintoalaDto>}
     * @memberof KoulutusalaDto
     */
    opintoalat?: Array<OpintoalaDto>;
}

/**
 *
 * @export
 * @interface KoulutuskoodiStatusDto
 */
export interface KoulutuskoodiStatusDto {
    /**
     *
     * @type {number}
     * @memberof KoulutuskoodiStatusDto
     */
    id?: number;
    /**
     *
     * @type {PerusteprojektiListausDto}
     * @memberof KoulutuskoodiStatusDto
     */
    perusteprojekti?: PerusteprojektiListausDto;
    /**
     *
     * @type {Date}
     * @memberof KoulutuskoodiStatusDto
     */
    lastCheck?: Date;
    /**
     *
     * @type {Array<KoulutuskoodiStatusInfoDto>}
     * @memberof KoulutuskoodiStatusDto
     */
    infot?: Array<KoulutuskoodiStatusInfoDto>;
    /**
     *
     * @type {boolean}
     * @memberof KoulutuskoodiStatusDto
     */
    kooditOk?: boolean;
}

/**
 *
 * @export
 * @interface KoulutuskoodiStatusInfoDto
 */
export interface KoulutuskoodiStatusInfoDto {
    /**
     *
     * @type {number}
     * @memberof KoulutuskoodiStatusInfoDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof KoulutuskoodiStatusInfoDto
     */
    suoritustapa?: KoulutuskoodiStatusInfoDto.SuoritustapaEnum;
    /**
     *
     * @type {TutkinnonOsaViiteDto}
     * @memberof KoulutuskoodiStatusInfoDto
     */
    viite?: TutkinnonOsaViiteDto;
}

/**
 * @export
 * @namespace KoulutuskoodiStatusInfoDto
 */
export namespace KoulutuskoodiStatusInfoDto {
    /**
     * @export
     * @enum {string}
     */
    export enum SuoritustapaEnum {
        OPS = 'OPS',
        NAYTTO = 'NAYTTO',
        REFORMI = 'REFORMI',
        PERUSOPETUS = 'PERUSOPETUS',
        LISAOPETUS = 'LISAOPETUS',
        VARHAISKASVATUS = 'VARHAISKASVATUS',
        OPAS = 'OPAS',
        ESIOPETUS = 'ESIOPETUS',
        AIPE = 'AIPE',
        TPO = 'TPO',
        LUKIOKOULUTUS = 'LUKIOKOULUTUS',
        LUKIOKOULUTUS2019 = 'LUKIOKOULUTUS2019'
    }
}

/**
 *
 * @export
 * @interface Laaja
 */
export interface Laaja {
    /**
     *
     * @type {number}
     * @memberof Laaja
     */
    id?: number;
    /**
     *
     * @type {Date}
     * @memberof Laaja
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof Laaja
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof Laaja
     */
    muokkaaja?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Laaja
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof Laaja
     */
    tila?: Laaja.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof Laaja
     */
    tunniste?: Laaja.TunnisteEnum;
    /**
     *
     * @type {boolean}
     * @memberof Laaja
     */
    valmis?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Laaja
     */
    kaannettava?: boolean;
    /**
     *
     * @type {string}
     * @memberof Laaja
     */
    osanTyyppi?: string;
}

/**
 * @export
 * @namespace Laaja
 */
export namespace Laaja {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TunnisteEnum {
        NORMAALI = 'NORMAALI',
        LAAJAALAINENOSAAMINEN = 'LAAJAALAINENOSAAMINEN',
        RAKENNE = 'RAKENNE'
    }
}

/**
 *
 * @export
 * @interface LaajaalainenOsaaminenDto
 */
export interface LaajaalainenOsaaminenDto {
    /**
     *
     * @type {number}
     * @memberof LaajaalainenOsaaminenDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof LaajaalainenOsaaminenDto
     */
    tunniste?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LaajaalainenOsaaminenDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LaajaalainenOsaaminenDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface Laajuus
 */
export interface Laajuus {
    /**
     *
     * @type {number}
     * @memberof Laajuus
     */
    minimi?: number;
    /**
     *
     * @type {number}
     * @memberof Laajuus
     */
    maksimi?: number;
    /**
     *
     * @type {string}
     * @memberof Laajuus
     */
    yksikko?: Laajuus.YksikkoEnum;
}

/**
 * @export
 * @namespace Laajuus
 */
export namespace Laajuus {
    /**
     * @export
     * @enum {string}
     */
    export enum YksikkoEnum {
        OPINTOVIIKKO = 'OPINTOVIIKKO',
        OSAAMISPISTE = 'OSAAMISPISTE',
        KURSSI = 'KURSSI',
        OPINTOPISTE = 'OPINTOPISTE'
    }
}

/**
 *
 * @export
 * @interface LiiteBaseDto
 */
export interface LiiteBaseDto {
    /**
     *
     * @type {string}
     * @memberof LiiteBaseDto
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof LiiteBaseDto
     */
    nimi?: string;
}

/**
 *
 * @export
 * @interface LiiteDto
 */
export interface LiiteDto {
    /**
     *
     * @type {string}
     * @memberof LiiteDto
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof LiiteDto
     */
    nimi?: string;
    /**
     *
     * @type {string}
     * @memberof LiiteDto
     */
    tyyppi?: LiiteDto.TyyppiEnum;
    /**
     *
     * @type {Date}
     * @memberof LiiteDto
     */
    luotu?: Date;
    /**
     *
     * @type {string}
     * @memberof LiiteDto
     */
    mime?: string;
}

/**
 * @export
 * @namespace LiiteDto
 */
export namespace LiiteDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        TUNTEMATON = 'TUNTEMATON',
        KUVA = 'KUVA',
        DOKUMENTTI = 'DOKUMENTTI',
        MAARAYSKIRJE = 'MAARAYSKIRJE',
        MUUTOSMAARAYS = 'MUUTOSMAARAYS'
    }
}

/**
 *
 * @export
 * @interface LokalisointiDto
 */
export interface LokalisointiDto {
    /**
     *
     * @type {string}
     * @memberof LokalisointiDto
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof LokalisointiDto
     */
    key?: string;
    /**
     *
     * @type {number}
     * @memberof LokalisointiDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof LokalisointiDto
     */
    locale?: string;
    /**
     *
     * @type {string}
     * @memberof LokalisointiDto
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof LokalisointiDto
     */
    category?: string;
}

/**
 *
 * @export
 * @interface LokalisoitavaOsaDto
 */
export interface LokalisoitavaOsaDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LokalisoitavaOsaDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LokalisoitavaOsaDto
     */
    teksti?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface LokalisoituTekstiDto
 */
export interface LokalisoituTekstiDto {
    /**
     *
     * @type {number}
     * @memberof LokalisoituTekstiDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof LokalisoituTekstiDto
     */
    tunniste?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof LokalisoituTekstiDto
     */
    tekstit?: { [key: string]: string; };
}

/**
 *
 * @export
 * @interface Lops2019ArviointiDto
 */
export interface Lops2019ArviointiDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019ArviointiDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface Lops2019LaajaAlainenOsaaminenDto
 */
export interface Lops2019LaajaAlainenOsaaminenDto {
    /**
     *
     * @type {number}
     * @memberof Lops2019LaajaAlainenOsaaminenDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019LaajaAlainenOsaaminenDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof Lops2019LaajaAlainenOsaaminenDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019LaajaAlainenOsaaminenDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface Lops2019LaajaAlainenOsaaminenKokonaisuusDto
 */
export interface Lops2019LaajaAlainenOsaaminenKokonaisuusDto {
    /**
     *
     * @type {Array<Lops2019LaajaAlainenOsaaminenDto>}
     * @memberof Lops2019LaajaAlainenOsaaminenKokonaisuusDto
     */
    laajaAlaisetOsaamiset?: Array<Lops2019LaajaAlainenOsaaminenDto>;
}

/**
 *
 * @export
 * @interface Lops2019ModuuliBaseDto
 */
export interface Lops2019ModuuliBaseDto {
    /**
     *
     * @type {number}
     * @memberof Lops2019ModuuliBaseDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019ModuuliBaseDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {boolean}
     * @memberof Lops2019ModuuliBaseDto
     */
    pakollinen?: boolean;
    /**
     *
     * @type {KoodiDto}
     * @memberof Lops2019ModuuliBaseDto
     */
    koodi?: KoodiDto;
}

/**
 *
 * @export
 * @interface Lops2019ModuuliDto
 */
export interface Lops2019ModuuliDto {
    /**
     *
     * @type {number}
     * @memberof Lops2019ModuuliDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019ModuuliDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {boolean}
     * @memberof Lops2019ModuuliDto
     */
    pakollinen?: boolean;
    /**
     *
     * @type {KoodiDto}
     * @memberof Lops2019ModuuliDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019ModuuliDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof Lops2019ModuuliDto
     */
    laajuus?: number;
    /**
     *
     * @type {Lops2019ModuuliTavoiteDto}
     * @memberof Lops2019ModuuliDto
     */
    tavoitteet?: Lops2019ModuuliTavoiteDto;
    /**
     *
     * @type {Array<Lops2019ModuuliSisaltoDto>}
     * @memberof Lops2019ModuuliDto
     */
    sisallot?: Array<Lops2019ModuuliSisaltoDto>;
    /**
     *
     * @type {Reference}
     * @memberof Lops2019ModuuliDto
     */
    oppiaine?: Reference;
}

/**
 *
 * @export
 * @interface Lops2019ModuuliSisaltoDto
 */
export interface Lops2019ModuuliSisaltoDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019ModuuliSisaltoDto
     */
    kohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof Lops2019ModuuliSisaltoDto
     */
    sisallot?: Array<LokalisoituTekstiDto>;
}

/**
 *
 * @export
 * @interface Lops2019ModuuliTavoiteDto
 */
export interface Lops2019ModuuliTavoiteDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019ModuuliTavoiteDto
     */
    kohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof Lops2019ModuuliTavoiteDto
     */
    tavoitteet?: Array<LokalisoituTekstiDto>;
}

/**
 *
 * @export
 * @interface Lops2019OppiaineDto
 */
export interface Lops2019OppiaineDto {
    /**
     *
     * @type {number}
     * @memberof Lops2019OppiaineDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof Lops2019OppiaineDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {Reference}
     * @memberof Lops2019OppiaineDto
     */
    oppiaine?: Reference;
    /**
     *
     * @type {Lops2019ArviointiDto}
     * @memberof Lops2019OppiaineDto
     */
    arviointi?: Lops2019ArviointiDto;
    /**
     *
     * @type {Lops2019TehtavaDto}
     * @memberof Lops2019OppiaineDto
     */
    tehtava?: Lops2019TehtavaDto;
    /**
     *
     * @type {Lops2019OppiaineLaajaAlainenOsaaminenDto}
     * @memberof Lops2019OppiaineDto
     */
    laajaAlaisetOsaamiset?: Lops2019OppiaineLaajaAlainenOsaaminenDto;
    /**
     *
     * @type {Lops2019OppiaineTavoitteetDto}
     * @memberof Lops2019OppiaineDto
     */
    tavoitteet?: Lops2019OppiaineTavoitteetDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineDto
     */
    pakollisetModuulitKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineDto
     */
    valinnaisetModuulitKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<Lops2019ModuuliBaseDto>}
     * @memberof Lops2019OppiaineDto
     */
    moduulit?: Array<Lops2019ModuuliBaseDto>;
    /**
     *
     * @type {Array<Lops2019OppiaineDto>}
     * @memberof Lops2019OppiaineDto
     */
    oppimaarat?: Array<Lops2019OppiaineDto>;
}

/**
 *
 * @export
 * @interface Lops2019OppiaineKaikkiDto
 */
export interface Lops2019OppiaineKaikkiDto {
    /**
     *
     * @type {number}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {Reference}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    oppiaine?: Reference;
    /**
     *
     * @type {Lops2019ArviointiDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    arviointi?: Lops2019ArviointiDto;
    /**
     *
     * @type {Lops2019TehtavaDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    tehtava?: Lops2019TehtavaDto;
    /**
     *
     * @type {Lops2019OppiaineLaajaAlainenOsaaminenDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    laajaAlaisetOsaamiset?: Lops2019OppiaineLaajaAlainenOsaaminenDto;
    /**
     *
     * @type {Lops2019OppiaineTavoitteetDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    tavoitteet?: Lops2019OppiaineTavoitteetDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    pakollisetModuulitKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    valinnaisetModuulitKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<Lops2019ModuuliDto>}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    moduulit?: Array<Lops2019ModuuliDto>;
    /**
     *
     * @type {Array<Lops2019OppiaineKaikkiDto>}
     * @memberof Lops2019OppiaineKaikkiDto
     */
    oppimaarat?: Array<Lops2019OppiaineKaikkiDto>;
}

/**
 *
 * @export
 * @interface Lops2019OppiaineLaajaAlainenOsaaminenDto
 */
export interface Lops2019OppiaineLaajaAlainenOsaaminenDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineLaajaAlainenOsaaminenDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface Lops2019OppiaineTavoitealueDto
 */
export interface Lops2019OppiaineTavoitealueDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineTavoitealueDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineTavoitealueDto
     */
    kohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof Lops2019OppiaineTavoitealueDto
     */
    tavoitteet?: Array<LokalisoituTekstiDto>;
}

/**
 *
 * @export
 * @interface Lops2019OppiaineTavoitteetDto
 */
export interface Lops2019OppiaineTavoitteetDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019OppiaineTavoitteetDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<Lops2019OppiaineTavoitealueDto>}
     * @memberof Lops2019OppiaineTavoitteetDto
     */
    tavoitealueet?: Array<Lops2019OppiaineTavoitealueDto>;
}

/**
 *
 * @export
 * @interface Lops2019SisaltoDto
 */
export interface Lops2019SisaltoDto {
    /**
     *
     * @type {Lops2019LaajaAlainenOsaaminenKokonaisuusDto}
     * @memberof Lops2019SisaltoDto
     */
    laajaAlainenOsaaminen?: Lops2019LaajaAlainenOsaaminenKokonaisuusDto;
    /**
     *
     * @type {Array<Lops2019OppiaineKaikkiDto>}
     * @memberof Lops2019SisaltoDto
     */
    oppiaineet?: Array<Lops2019OppiaineKaikkiDto>;
    /**
     *
     * @type {Laaja}
     * @memberof Lops2019SisaltoDto
     */
    sisalto?: Laaja;
}

/**
 *
 * @export
 * @interface Lops2019TehtavaDto
 */
export interface Lops2019TehtavaDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Lops2019TehtavaDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface LukioOpetussuunnitelmaRakenneLaajaDto
 */
export interface LukioOpetussuunnitelmaRakenneLaajaDto extends Laaja {
}

/**
 * @export
 * @namespace LukioOpetussuunnitelmaRakenneLaajaDto
 */
export namespace LukioOpetussuunnitelmaRakenneLaajaDto {
}

/**
 *
 * @export
 * @interface LukioOppiaineOppimaaraNodeDto
 */
export interface LukioOppiaineOppimaaraNodeDto {
    /**
     *
     * @type {number}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    parentId?: number;
    /**
     *
     * @type {string}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    tunniste?: string;
    /**
     *
     * @type {number}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    jarjestys?: number;
    /**
     *
     * @type {string}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {string}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    koodiUri?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {boolean}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    koosteinen?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    abstrakti?: boolean;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    pakollinenKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    syventavaKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    soveltavaKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoitavaOsaDto}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    tavoitteet?: LokalisoitavaOsaDto;
    /**
     *
     * @type {LokalisoitavaOsaDto}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    arviointi?: LokalisoitavaOsaDto;
    /**
     *
     * @type {LokalisoitavaOsaDto}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    tehtava?: LokalisoitavaOsaDto;
    /**
     *
     * @type {Array<LukioOppiaineOppimaaraNodeDto>}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    oppimaarat?: Array<LukioOppiaineOppimaaraNodeDto>;
    /**
     *
     * @type {Array<LukiokurssiJulkisetTiedotDto>}
     * @memberof LukioOppiaineOppimaaraNodeDto
     */
    kurssit?: Array<LukiokurssiJulkisetTiedotDto>;
}

/**
 *
 * @export
 * @interface LukioOppiainePuuDto
 */
export interface LukioOppiainePuuDto {
    /**
     *
     * @type {number}
     * @memberof LukioOppiainePuuDto
     */
    perusteId?: number;
    /**
     *
     * @type {Array<LukioOppiaineOppimaaraNodeDto>}
     * @memberof LukioOppiainePuuDto
     */
    oppiaineet?: Array<LukioOppiaineOppimaaraNodeDto>;
}

/**
 *
 * @export
 * @interface LukiokoulutuksenPerusteenSisaltoDto
 */
export interface LukiokoulutuksenPerusteenSisaltoDto {
    /**
     *
     * @type {Laaja}
     * @memberof LukiokoulutuksenPerusteenSisaltoDto
     */
    sisalto?: Laaja;
    /**
     *
     * @type {AihekokonaisuudetLaajaDto}
     * @memberof LukiokoulutuksenPerusteenSisaltoDto
     */
    aihekokonaisuudet?: AihekokonaisuudetLaajaDto;
    /**
     *
     * @type {OpetuksenYleisetTavoitteetLaajaDto}
     * @memberof LukiokoulutuksenPerusteenSisaltoDto
     */
    opetuksenYleisetTavoitteet?: OpetuksenYleisetTavoitteetLaajaDto;
    /**
     *
     * @type {LukioOppiainePuuDto}
     * @memberof LukiokoulutuksenPerusteenSisaltoDto
     */
    rakenne?: LukioOppiainePuuDto;
}

/**
 *
 * @export
 * @interface LukiokurssiJulkisetTiedotDto
 */
export interface LukiokurssiJulkisetTiedotDto {
    /**
     *
     * @type {number}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    oppiaineId?: number;
    /**
     *
     * @type {number}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    jarjestys?: number;
    /**
     *
     * @type {string}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    tunniste?: string;
    /**
     *
     * @type {string}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    lokalisoituKoodi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    tyyppi?: LukiokurssiJulkisetTiedotDto.TyyppiEnum;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoitavaOsaDto}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    tavoitteet?: LokalisoitavaOsaDto;
    /**
     *
     * @type {LokalisoitavaOsaDto}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    keskeisetSisallot?: LokalisoitavaOsaDto;
    /**
     *
     * @type {LokalisoitavaOsaDto}
     * @memberof LukiokurssiJulkisetTiedotDto
     */
    tavoitteetJaKeskeisetSisallot?: LokalisoitavaOsaDto;
}

/**
 * @export
 * @namespace LukiokurssiJulkisetTiedotDto
 */
export namespace LukiokurssiJulkisetTiedotDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        PAKOLLINEN = 'PAKOLLINEN',
        VALTAKUNNALLINENSYVENTAVA = 'VALTAKUNNALLINEN_SYVENTAVA',
        VALTAKUNNALLINENSOVELTAVA = 'VALTAKUNNALLINEN_SOVELTAVA'
    }
}

/**
 *
 * @export
 * @interface LukkoDto
 */
export interface LukkoDto {
    /**
     *
     * @type {string}
     * @memberof LukkoDto
     */
    haltijaOid?: string;
    /**
     *
     * @type {string}
     * @memberof LukkoDto
     */
    haltijaNimi?: string;
    /**
     *
     * @type {Date}
     * @memberof LukkoDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof LukkoDto
     */
    vanhentuu?: Date;
    /**
     *
     * @type {boolean}
     * @memberof LukkoDto
     */
    oma?: boolean;
    /**
     *
     * @type {number}
     * @memberof LukkoDto
     */
    revisio?: number;
}

/**
 *
 * @export
 * @interface MaarayskirjeDto
 */
export interface MaarayskirjeDto {
    /**
     *
     * @type {number}
     * @memberof MaarayskirjeDto
     */
    id?: number;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof MaarayskirjeDto
     */
    url?: { [key: string]: string; };
    /**
     *
     * @type {{ [key: string]: LiiteBaseDto; }}
     * @memberof MaarayskirjeDto
     */
    liitteet?: { [key: string]: LiiteBaseDto; };
}

/**
 *
 * @export
 * @interface Matala
 */
export interface Matala {
    /**
     *
     * @type {number}
     * @memberof Matala
     */
    id?: number;
    /**
     *
     * @type {Laaja}
     * @memberof Matala
     */
    perusteenOsa?: Laaja;
    /**
     *
     * @type {Array<Reference>}
     * @memberof Matala
     */
    lapset?: Array<Reference>;
    /**
     *
     * @type {Reference}
     * @memberof Matala
     */
    _perusteenOsa?: Reference;
}

/**
 *
 * @export
 * @interface MetaData
 */
export interface MetaData {
    /**
     *
     * @type {string}
     * @memberof MetaData
     */
    kommentti?: string;
}

/**
 *
 * @export
 * @interface MuodostumisSaantoDto
 */
export interface MuodostumisSaantoDto {
    /**
     *
     * @type {Laajuus}
     * @memberof MuodostumisSaantoDto
     */
    laajuus?: Laajuus;
    /**
     *
     * @type {Koko}
     * @memberof MuodostumisSaantoDto
     */
    koko?: Koko;
}

/**
 *
 * @export
 * @interface MuutosmaaraysDto
 */
export interface MuutosmaaraysDto {
    /**
     *
     * @type {number}
     * @memberof MuutosmaaraysDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof MuutosmaaraysDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof MuutosmaaraysDto
     */
    url?: LokalisoituTekstiDto;
    /**
     *
     * @type {{ [key: string]: LiiteBaseDto; }}
     * @memberof MuutosmaaraysDto
     */
    liitteet?: { [key: string]: LiiteBaseDto; };
}

/**
 *
 * @export
 * @interface NavigationNodeDto
 */
export interface NavigationNodeDto {
    /**
     *
     * @type {number}
     * @memberof NavigationNodeDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof NavigationNodeDto
     */
    label?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof NavigationNodeDto
     */
    type?: NavigationNodeDto.TypeEnum;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof NavigationNodeDto
     */
    meta?: { [key: string]: any; };
    /**
     *
     * @type {Array<NavigationNodeDto>}
     * @memberof NavigationNodeDto
     */
    children?: Array<NavigationNodeDto>;
}

/**
 * @export
 * @namespace NavigationNodeDto
 */
export namespace NavigationNodeDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Root = 'root',
        Tiedot = 'tiedot',
        Viite = 'viite',
        Liitteet = 'liitteet',
        Liite = 'liite',
        Laajaalaiset = 'laajaalaiset',
        Laajaalainen = 'laajaalainen',
        Oppiaineet = 'oppiaineet',
        Oppimaarat = 'oppimaarat',
        Oppiaine = 'oppiaine',
        Moduulit = 'moduulit',
        Moduuli = 'moduuli'
    }
}

/**
 *
 * @export
 * @interface OmistajaDto
 */
export interface OmistajaDto {
    /**
     *
     * @type {number}
     * @memberof OmistajaDto
     */
    ownerPerusteProjektiId?: number;
    /**
     *
     * @type {boolean}
     * @memberof OmistajaDto
     */
    owner?: boolean;
}

/**
 *
 * @export
 * @interface Ongelma
 */
export interface Ongelma {
    /**
     *
     * @type {string}
     * @memberof Ongelma
     */
    ongelma?: string;
    /**
     *
     * @type {TekstiPalanen}
     * @memberof Ongelma
     */
    ryhma?: TekstiPalanen;
    /**
     *
     * @type {number}
     * @memberof Ongelma
     */
    syvyys?: number;
}

/**
 *
 * @export
 * @interface OpasDto
 */
export interface OpasDto {
    /**
     *
     * @type {number}
     * @memberof OpasDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OpasDto
     */
    nimi?: string;
    /**
     *
     * @type {Reference}
     * @memberof OpasDto
     */
    peruste?: Reference;
    /**
     *
     * @type {string}
     * @memberof OpasDto
     */
    tila?: OpasDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof OpasDto
     */
    ryhmaOid?: string;
}

/**
 * @export
 * @namespace OpasDto
 */
export namespace OpasDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
}

/**
 *
 * @export
 * @interface OpasLuontiDto
 */
export interface OpasLuontiDto {
    /**
     *
     * @type {number}
     * @memberof OpasLuontiDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OpasLuontiDto
     */
    nimi?: string;
    /**
     *
     * @type {Reference}
     * @memberof OpasLuontiDto
     */
    peruste?: Reference;
    /**
     *
     * @type {string}
     * @memberof OpasLuontiDto
     */
    tila?: OpasLuontiDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof OpasLuontiDto
     */
    ryhmaOid?: string;
}

/**
 * @export
 * @namespace OpasLuontiDto
 */
export namespace OpasLuontiDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
}

/**
 *
 * @export
 * @interface OpetuksenKohdealueDto
 */
export interface OpetuksenKohdealueDto {
    /**
     *
     * @type {number}
     * @memberof OpetuksenKohdealueDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenKohdealueDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenKohdealueDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface OpetuksenTavoiteDto
 */
export interface OpetuksenTavoiteDto {
    /**
     *
     * @type {number}
     * @memberof OpetuksenTavoiteDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OpetuksenTavoiteDto
     */
    tunniste?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenTavoiteDto
     */
    tavoite?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<Reference>}
     * @memberof OpetuksenTavoiteDto
     */
    sisaltoalueet?: Array<Reference>;
    /**
     *
     * @type {Array<Reference>}
     * @memberof OpetuksenTavoiteDto
     */
    laajattavoitteet?: Array<Reference>;
    /**
     *
     * @type {Array<Reference>}
     * @memberof OpetuksenTavoiteDto
     */
    kohdealueet?: Array<Reference>;
    /**
     *
     * @type {Array<TavoitteenArviointiDto>}
     * @memberof OpetuksenTavoiteDto
     */
    arvioinninkohteet?: Array<TavoitteenArviointiDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenTavoiteDto
     */
    arvioinninOtsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenTavoiteDto
     */
    arvioinninKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenTavoiteDto
     */
    arvioinninOsaamisenKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenTavoiteDto
     */
    tavoitteistaJohdetutOppimisenTavoitteet?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenTavoiteDto
     */
    vapaaTeksti?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface OpetuksenYleisetTavoitteetLaajaDto
 */
export interface OpetuksenYleisetTavoitteetLaajaDto extends Laaja {
    /**
     *
     * @type {string}
     * @memberof OpetuksenYleisetTavoitteetLaajaDto
     */
    uuidTunniste?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenYleisetTavoitteetLaajaDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpetuksenYleisetTavoitteetLaajaDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 * @export
 * @namespace OpetuksenYleisetTavoitteetLaajaDto
 */
export namespace OpetuksenYleisetTavoitteetLaajaDto {
}

/**
 *
 * @export
 * @interface OpintoalaDto
 */
export interface OpintoalaDto {
    /**
     *
     * @type {string}
     * @memberof OpintoalaDto
     */
    koodi?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OpintoalaDto
     */
    nimi?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface OppiaineDto
 */
export interface OppiaineDto {
    /**
     *
     * @type {number}
     * @memberof OppiaineDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OppiaineDto
     */
    tunniste?: string;
    /**
     *
     * @type {Reference}
     * @memberof OppiaineDto
     */
    oppiaine?: Reference;
    /**
     *
     * @type {boolean}
     * @memberof OppiaineDto
     */
    koosteinen?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OppiaineDto
     */
    abstrakti?: boolean;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof OppiaineDto
     */
    jnro?: number;
    /**
     *
     * @type {Date}
     * @memberof OppiaineDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof OppiaineDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof OppiaineDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineDto
     */
    tehtava?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineDto
     */
    tavoitteet?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineDto
     */
    arviointi?: TekstiOsaDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineDto
     */
    pakollinenKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineDto
     */
    syventavaKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineDto
     */
    soveltavaKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {boolean}
     * @memberof OppiaineDto
     */
    partial?: boolean;
    /**
     *
     * @type {Array<OppiaineSuppeaDto>}
     * @memberof OppiaineDto
     */
    oppimaarat?: Array<OppiaineSuppeaDto>;
    /**
     *
     * @type {Array<OpetuksenKohdealueDto>}
     * @memberof OppiaineDto
     */
    kohdealueet?: Array<OpetuksenKohdealueDto>;
    /**
     *
     * @type {Array<OppiaineenVuosiluokkaKokonaisuusDto>}
     * @memberof OppiaineDto
     */
    vuosiluokkakokonaisuudet?: Array<OppiaineenVuosiluokkaKokonaisuusDto>;
}

/**
 *
 * @export
 * @interface OppiaineLaajaDto
 */
export interface OppiaineLaajaDto {
    /**
     *
     * @type {number}
     * @memberof OppiaineLaajaDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OppiaineLaajaDto
     */
    tunniste?: string;
    /**
     *
     * @type {Reference}
     * @memberof OppiaineLaajaDto
     */
    oppiaine?: Reference;
    /**
     *
     * @type {boolean}
     * @memberof OppiaineLaajaDto
     */
    koosteinen?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OppiaineLaajaDto
     */
    abstrakti?: boolean;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineLaajaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof OppiaineLaajaDto
     */
    jnro?: number;
    /**
     *
     * @type {Date}
     * @memberof OppiaineLaajaDto
     */
    muokattu?: Date;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineLaajaDto
     */
    tehtava?: TekstiOsaDto;
    /**
     *
     * @type {Array<OppiaineDto>}
     * @memberof OppiaineLaajaDto
     */
    oppimaarat?: Array<OppiaineDto>;
    /**
     *
     * @type {Array<OpetuksenKohdealueDto>}
     * @memberof OppiaineLaajaDto
     */
    kohdealueet?: Array<OpetuksenKohdealueDto>;
    /**
     *
     * @type {Array<OppiaineenVuosiluokkaKokonaisuusDto>}
     * @memberof OppiaineLaajaDto
     */
    vuosiluokkakokonaisuudet?: Array<OppiaineenVuosiluokkaKokonaisuusDto>;
    /**
     *
     * @type {string}
     * @memberof OppiaineLaajaDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof OppiaineLaajaDto
     */
    koodiArvo?: string;
}

/**
 *
 * @export
 * @interface OppiaineSuppeaDto
 */
export interface OppiaineSuppeaDto {
    /**
     *
     * @type {number}
     * @memberof OppiaineSuppeaDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof OppiaineSuppeaDto
     */
    tunniste?: string;
    /**
     *
     * @type {Reference}
     * @memberof OppiaineSuppeaDto
     */
    oppiaine?: Reference;
    /**
     *
     * @type {boolean}
     * @memberof OppiaineSuppeaDto
     */
    koosteinen?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OppiaineSuppeaDto
     */
    abstrakti?: boolean;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineSuppeaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof OppiaineSuppeaDto
     */
    jnro?: number;
    /**
     *
     * @type {Date}
     * @memberof OppiaineSuppeaDto
     */
    muokattu?: Date;
    /**
     *
     * @type {Array<OppiaineSuppeaDto>}
     * @memberof OppiaineSuppeaDto
     */
    oppimaarat?: Array<OppiaineSuppeaDto>;
    /**
     *
     * @type {string}
     * @memberof OppiaineSuppeaDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {Array<OppiaineenVuosiluokkaKokonaisuusSuppeaDto>}
     * @memberof OppiaineSuppeaDto
     */
    vuosiluokkakokonaisuudet?: Array<OppiaineenVuosiluokkaKokonaisuusSuppeaDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineSuppeaDto
     */
    pakollinenKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineSuppeaDto
     */
    syventavaKurssiKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineSuppeaDto
     */
    soveltavaKurssiKuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface OppiaineenVuosiluokkaKokonaisuusDto
 */
export interface OppiaineenVuosiluokkaKokonaisuusDto {
    /**
     *
     * @type {number}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    id?: number;
    /**
     *
     * @type {Reference}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    vuosiluokkaKokonaisuus?: Reference;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    tehtava?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    tyotavat?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    ohjaus?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    arviointi?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    sisaltoalueinfo?: TekstiOsaDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    vapaaTeksti?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<OpetuksenTavoiteDto>}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    tavoitteet?: Array<OpetuksenTavoiteDto>;
    /**
     *
     * @type {Array<KeskeinenSisaltoalueDto>}
     * @memberof OppiaineenVuosiluokkaKokonaisuusDto
     */
    sisaltoalueet?: Array<KeskeinenSisaltoalueDto>;
}

/**
 *
 * @export
 * @interface OppiaineenVuosiluokkaKokonaisuusSuppeaDto
 */
export interface OppiaineenVuosiluokkaKokonaisuusSuppeaDto {
    /**
     *
     * @type {number}
     * @memberof OppiaineenVuosiluokkaKokonaisuusSuppeaDto
     */
    id?: number;
    /**
     *
     * @type {Reference}
     * @memberof OppiaineenVuosiluokkaKokonaisuusSuppeaDto
     */
    vuosiluokkaKokonaisuus?: Reference;
}

/**
 *
 * @export
 * @interface OsaAlueDto
 */
export interface OsaAlueDto {
    /**
     *
     * @type {number}
     * @memberof OsaAlueDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaAlueDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaAlueDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof OsaAlueDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof OsaAlueDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof OsaAlueDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {string}
     * @memberof OsaAlueDto
     */
    kieli?: OsaAlueDto.KieliEnum;
    /**
     *
     * @type {ValmaTelmaSisaltoDto}
     * @memberof OsaAlueDto
     */
    valmaTelmaSisalto?: ValmaTelmaSisaltoDto;
}

/**
 * @export
 * @namespace OsaAlueDto
 */
export namespace OsaAlueDto {
    /**
     * @export
     * @enum {string}
     */
    export enum KieliEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface OsaAlueKokonaanDto
 */
export interface OsaAlueKokonaanDto {
    /**
     *
     * @type {number}
     * @memberof OsaAlueKokonaanDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaAlueKokonaanDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaAlueKokonaanDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof OsaAlueKokonaanDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof OsaAlueKokonaanDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof OsaAlueKokonaanDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {string}
     * @memberof OsaAlueKokonaanDto
     */
    kieli?: OsaAlueKokonaanDto.KieliEnum;
    /**
     *
     * @type {ValmaTelmaSisaltoDto}
     * @memberof OsaAlueKokonaanDto
     */
    valmaTelmaSisalto?: ValmaTelmaSisaltoDto;
    /**
     *
     * @type {Array<OsaamistavoiteLaajaDto>}
     * @memberof OsaAlueKokonaanDto
     */
    osaamistavoitteet?: Array<OsaamistavoiteLaajaDto>;
}

/**
 * @export
 * @namespace OsaAlueKokonaanDto
 */
export namespace OsaAlueKokonaanDto {
    /**
     * @export
     * @enum {string}
     */
    export enum KieliEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface OsaAlueLaajaDto
 */
export interface OsaAlueLaajaDto {
    /**
     *
     * @type {number}
     * @memberof OsaAlueLaajaDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaAlueLaajaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaAlueLaajaDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof OsaAlueLaajaDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof OsaAlueLaajaDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof OsaAlueLaajaDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {string}
     * @memberof OsaAlueLaajaDto
     */
    kieli?: OsaAlueLaajaDto.KieliEnum;
    /**
     *
     * @type {ValmaTelmaSisaltoDto}
     * @memberof OsaAlueLaajaDto
     */
    valmaTelmaSisalto?: ValmaTelmaSisaltoDto;
    /**
     *
     * @type {Array<OsaamistavoiteDto>}
     * @memberof OsaAlueLaajaDto
     */
    osaamistavoitteet?: Array<OsaamistavoiteDto>;
}

/**
 * @export
 * @namespace OsaAlueLaajaDto
 */
export namespace OsaAlueLaajaDto {
    /**
     * @export
     * @enum {string}
     */
    export enum KieliEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface OsaamisalaDto
 */
export interface OsaamisalaDto {
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof OsaamisalaDto
     */
    nimi?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof OsaamisalaDto
     */
    osaamisalakoodiArvo?: string;
    /**
     *
     * @type {string}
     * @memberof OsaamisalaDto
     */
    osaamisalakoodiUri?: string;
}

/**
 *
 * @export
 * @interface OsaamisenArviointiDto
 */
export interface OsaamisenArviointiDto {
    /**
     *
     * @type {number}
     * @memberof OsaamisenArviointiDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamisenArviointiDto
     */
    kohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamisenArviointiDto
     */
    selite?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof OsaamisenArviointiDto
     */
    tavoitteet?: Array<LokalisoituTekstiDto>;
}

/**
 *
 * @export
 * @interface OsaamisenTavoiteDto
 */
export interface OsaamisenTavoiteDto {
    /**
     *
     * @type {number}
     * @memberof OsaamisenTavoiteDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamisenTavoiteDto
     */
    kohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamisenTavoiteDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamisenTavoiteDto
     */
    selite?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof OsaamisenTavoiteDto
     */
    tavoitteet?: Array<LokalisoituTekstiDto>;
}

/**
 *
 * @export
 * @interface OsaamistasoDto
 */
export interface OsaamistasoDto {
    /**
     *
     * @type {number}
     * @memberof OsaamistasoDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamistasoDto
     */
    otsikko?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface OsaamistasonKriteeriDto
 */
export interface OsaamistasonKriteeriDto {
    /**
     *
     * @type {Reference}
     * @memberof OsaamistasonKriteeriDto
     */
    osaamistaso?: Reference;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof OsaamistasonKriteeriDto
     */
    kriteerit?: Array<LokalisoituTekstiDto>;
}

/**
 *
 * @export
 * @interface OsaamistavoiteDto
 */
export interface OsaamistavoiteDto {
    /**
     *
     * @type {number}
     * @memberof OsaamistavoiteDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamistavoiteDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {boolean}
     * @memberof OsaamistavoiteDto
     */
    pakollinen?: boolean;
    /**
     *
     * @type {number}
     * @memberof OsaamistavoiteDto
     */
    laajuus?: number;
    /**
     *
     * @type {string}
     * @memberof OsaamistavoiteDto
     */
    kieli?: OsaamistavoiteDto.KieliEnum;
    /**
     *
     * @type {KoodiDto}
     * @memberof OsaamistavoiteDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof OsaamistavoiteDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof OsaamistavoiteDto
     */
    koodiArvo?: string;
}

/**
 * @export
 * @namespace OsaamistavoiteDto
 */
export namespace OsaamistavoiteDto {
    /**
     * @export
     * @enum {string}
     */
    export enum KieliEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface OsaamistavoiteLaajaDto
 */
export interface OsaamistavoiteLaajaDto {
    /**
     *
     * @type {number}
     * @memberof OsaamistavoiteLaajaDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamistavoiteLaajaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {boolean}
     * @memberof OsaamistavoiteLaajaDto
     */
    pakollinen?: boolean;
    /**
     *
     * @type {number}
     * @memberof OsaamistavoiteLaajaDto
     */
    laajuus?: number;
    /**
     *
     * @type {string}
     * @memberof OsaamistavoiteLaajaDto
     */
    kieli?: OsaamistavoiteLaajaDto.KieliEnum;
    /**
     *
     * @type {KoodiDto}
     * @memberof OsaamistavoiteLaajaDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof OsaamistavoiteLaajaDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof OsaamistavoiteLaajaDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamistavoiteLaajaDto
     */
    tavoitteet?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof OsaamistavoiteLaajaDto
     */
    tunnustaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {ArviointiDto}
     * @memberof OsaamistavoiteLaajaDto
     */
    arviointi?: ArviointiDto;
    /**
     *
     * @type {Array<AmmattitaitovaatimusKohdealueetDto>}
     * @memberof OsaamistavoiteLaajaDto
     */
    ammattitaitovaatimuksetLista?: Array<AmmattitaitovaatimusKohdealueetDto>;
    /**
     *
     * @type {Reference}
     * @memberof OsaamistavoiteLaajaDto
     */
    esitieto?: Reference;
}

/**
 * @export
 * @namespace OsaamistavoiteLaajaDto
 */
export namespace OsaamistavoiteLaajaDto {
    /**
     * @export
     * @enum {string}
     */
    export enum KieliEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface Page
 */
export interface Page {
    /**
     *
     * @type {number}
     * @memberof Page
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof Page
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof Page
     */
    size?: number;
    /**
     *
     * @type {Array<any>}
     * @memberof Page
     */
    content?: Array<any>;
    /**
     *
     * @type {number}
     * @memberof Page
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof Page
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof Page
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Page
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof Page
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PageKoodistoKoodiDto
 */
export interface PageKoodistoKoodiDto {
    /**
     *
     * @type {number}
     * @memberof PageKoodistoKoodiDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageKoodistoKoodiDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageKoodistoKoodiDto
     */
    size?: number;
    /**
     *
     * @type {Array<KoodistoKoodiDto>}
     * @memberof PageKoodistoKoodiDto
     */
    content?: Array<KoodistoKoodiDto>;
    /**
     *
     * @type {number}
     * @memberof PageKoodistoKoodiDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageKoodistoKoodiDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PageKoodistoKoodiDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageKoodistoKoodiDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PageKoodistoKoodiDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PageKoulutuskoodiStatusDto
 */
export interface PageKoulutuskoodiStatusDto {
    /**
     *
     * @type {number}
     * @memberof PageKoulutuskoodiStatusDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageKoulutuskoodiStatusDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageKoulutuskoodiStatusDto
     */
    size?: number;
    /**
     *
     * @type {Array<KoulutuskoodiStatusDto>}
     * @memberof PageKoulutuskoodiStatusDto
     */
    content?: Array<KoulutuskoodiStatusDto>;
    /**
     *
     * @type {number}
     * @memberof PageKoulutuskoodiStatusDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageKoulutuskoodiStatusDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PageKoulutuskoodiStatusDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageKoulutuskoodiStatusDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PageKoulutuskoodiStatusDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PagePerusteHakuDto
 */
export interface PagePerusteHakuDto {
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuDto
     */
    size?: number;
    /**
     *
     * @type {Array<PerusteHakuDto>}
     * @memberof PagePerusteHakuDto
     */
    content?: Array<PerusteHakuDto>;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PagePerusteHakuDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteHakuDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteHakuDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PagePerusteHakuInternalDto
 */
export interface PagePerusteHakuInternalDto {
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuInternalDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuInternalDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuInternalDto
     */
    size?: number;
    /**
     *
     * @type {Array<PerusteHakuInternalDto>}
     * @memberof PagePerusteHakuInternalDto
     */
    content?: Array<PerusteHakuInternalDto>;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuInternalDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PagePerusteHakuInternalDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteHakuInternalDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteHakuInternalDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PagePerusteHakuInternalDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PagePerusteInfoDto
 */
export interface PagePerusteInfoDto {
    /**
     *
     * @type {number}
     * @memberof PagePerusteInfoDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteInfoDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteInfoDto
     */
    size?: number;
    /**
     *
     * @type {Array<PerusteInfoDto>}
     * @memberof PagePerusteInfoDto
     */
    content?: Array<PerusteInfoDto>;
    /**
     *
     * @type {number}
     * @memberof PagePerusteInfoDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PagePerusteInfoDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteInfoDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteInfoDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PagePerusteInfoDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PagePerusteprojektiKevytDto
 */
export interface PagePerusteprojektiKevytDto {
    /**
     *
     * @type {number}
     * @memberof PagePerusteprojektiKevytDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteprojektiKevytDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PagePerusteprojektiKevytDto
     */
    size?: number;
    /**
     *
     * @type {Array<PerusteprojektiKevytDto>}
     * @memberof PagePerusteprojektiKevytDto
     */
    content?: Array<PerusteprojektiKevytDto>;
    /**
     *
     * @type {number}
     * @memberof PagePerusteprojektiKevytDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PagePerusteprojektiKevytDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteprojektiKevytDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PagePerusteprojektiKevytDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PagePerusteprojektiKevytDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PageTiedoteDto
 */
export interface PageTiedoteDto {
    /**
     *
     * @type {number}
     * @memberof PageTiedoteDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageTiedoteDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageTiedoteDto
     */
    size?: number;
    /**
     *
     * @type {Array<TiedoteDto>}
     * @memberof PageTiedoteDto
     */
    content?: Array<TiedoteDto>;
    /**
     *
     * @type {number}
     * @memberof PageTiedoteDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageTiedoteDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PageTiedoteDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageTiedoteDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PageTiedoteDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PageTutkinnonOsaDto
 */
export interface PageTutkinnonOsaDto {
    /**
     *
     * @type {number}
     * @memberof PageTutkinnonOsaDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageTutkinnonOsaDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageTutkinnonOsaDto
     */
    size?: number;
    /**
     *
     * @type {Array<TutkinnonOsaDto>}
     * @memberof PageTutkinnonOsaDto
     */
    content?: Array<TutkinnonOsaDto>;
    /**
     *
     * @type {number}
     * @memberof PageTutkinnonOsaDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageTutkinnonOsaDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PageTutkinnonOsaDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageTutkinnonOsaDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PageTutkinnonOsaDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PageValidationDto
 */
export interface PageValidationDto {
    /**
     *
     * @type {number}
     * @memberof PageValidationDto
     */
    totalPages?: number;
    /**
     *
     * @type {number}
     * @memberof PageValidationDto
     */
    totalElements?: number;
    /**
     *
     * @type {number}
     * @memberof PageValidationDto
     */
    size?: number;
    /**
     *
     * @type {Array<ValidationDto>}
     * @memberof PageValidationDto
     */
    content?: Array<ValidationDto>;
    /**
     *
     * @type {number}
     * @memberof PageValidationDto
     */
    number?: number;
    /**
     *
     * @type {Sort}
     * @memberof PageValidationDto
     */
    sort?: Sort;
    /**
     *
     * @type {boolean}
     * @memberof PageValidationDto
     */
    first?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PageValidationDto
     */
    last?: boolean;
    /**
     *
     * @type {number}
     * @memberof PageValidationDto
     */
    numberOfElements?: number;
}

/**
 *
 * @export
 * @interface PerusopetuksenPerusteenSisaltoDto
 */
export interface PerusopetuksenPerusteenSisaltoDto {
    /**
     *
     * @type {Laaja}
     * @memberof PerusopetuksenPerusteenSisaltoDto
     */
    sisalto?: Laaja;
    /**
     *
     * @type {Array<LaajaalainenOsaaminenDto>}
     * @memberof PerusopetuksenPerusteenSisaltoDto
     */
    laajaalaisetosaamiset?: Array<LaajaalainenOsaaminenDto>;
    /**
     *
     * @type {Array<OppiaineLaajaDto>}
     * @memberof PerusopetuksenPerusteenSisaltoDto
     */
    oppiaineet?: Array<OppiaineLaajaDto>;
    /**
     *
     * @type {Array<VuosiluokkaKokonaisuusDto>}
     * @memberof PerusopetuksenPerusteenSisaltoDto
     */
    vuosiluokkakokonaisuudet?: Array<VuosiluokkaKokonaisuusDto>;
}

/**
 *
 * @export
 * @interface PerusteBaseDto
 */
export interface PerusteBaseDto {
    /**
     *
     * @type {number}
     * @memberof PerusteBaseDto
     */
    id?: number;
    /**
     *
     * @type {PerusteVersionDto}
     * @memberof PerusteBaseDto
     */
    globalVersion?: PerusteVersionDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteBaseDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteBaseDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteBaseDto
     */
    toteutus?: PerusteBaseDto.ToteutusEnum;
    /**
     *
     * @type {Array<KoulutusDto>}
     * @memberof PerusteBaseDto
     */
    koulutukset?: Array<KoulutusDto>;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteBaseDto
     */
    kielet?: Array<PerusteBaseDto.KieletEnum>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteBaseDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {MaarayskirjeDto}
     * @memberof PerusteBaseDto
     */
    maarayskirje?: MaarayskirjeDto;
    /**
     *
     * @type {Array<MuutosmaaraysDto>}
     * @memberof PerusteBaseDto
     */
    muutosmaaraykset?: Array<MuutosmaaraysDto>;
    /**
     *
     * @type {string}
     * @memberof PerusteBaseDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteBaseDto
     */
    voimassaoloAlkaa?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteBaseDto
     */
    siirtymaPaattyy?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteBaseDto
     */
    voimassaoloLoppuu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteBaseDto
     */
    paatospvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteBaseDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteBaseDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteBaseDto
     */
    tila?: PerusteBaseDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteBaseDto
     */
    tyyppi?: PerusteBaseDto.TyyppiEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteBaseDto
     */
    koulutusvienti?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteBaseDto
     */
    korvattavatDiaarinumerot?: Array<string>;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteBaseDto
     */
    osaamisalat?: Array<KoodiDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteBaseDto
     */
    tyotehtavatJoissaVoiToimia?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteBaseDto
     */
    suorittaneenOsaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<TutkintonimikeKoodiDto>}
     * @memberof PerusteBaseDto
     */
    tutkintonimikkeet?: Array<TutkintonimikeKoodiDto>;
}

/**
 * @export
 * @namespace PerusteBaseDto
 */
export namespace PerusteBaseDto {
    /**
     * @export
     * @enum {string}
     */
    export enum ToteutusEnum {
        YKSINKERTAINEN = 'YKSINKERTAINEN',
        PERUSOPETUS = 'PERUSOPETUS',
        LOPS = 'LOPS',
        AMMATILLINEN = 'AMMATILLINEN',
        TPO = 'TPO',
        LOPS2019 = 'LOPS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KieletEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteDto
 */
export interface PerusteDto {
    /**
     *
     * @type {number}
     * @memberof PerusteDto
     */
    id?: number;
    /**
     *
     * @type {PerusteVersionDto}
     * @memberof PerusteDto
     */
    globalVersion?: PerusteVersionDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteDto
     */
    toteutus?: PerusteDto.ToteutusEnum;
    /**
     *
     * @type {Array<KoulutusDto>}
     * @memberof PerusteDto
     */
    koulutukset?: Array<KoulutusDto>;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteDto
     */
    kielet?: Array<PerusteDto.KieletEnum>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {MaarayskirjeDto}
     * @memberof PerusteDto
     */
    maarayskirje?: MaarayskirjeDto;
    /**
     *
     * @type {Array<MuutosmaaraysDto>}
     * @memberof PerusteDto
     */
    muutosmaaraykset?: Array<MuutosmaaraysDto>;
    /**
     *
     * @type {string}
     * @memberof PerusteDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteDto
     */
    voimassaoloAlkaa?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteDto
     */
    siirtymaPaattyy?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteDto
     */
    voimassaoloLoppuu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteDto
     */
    paatospvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteDto
     */
    tila?: PerusteDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteDto
     */
    tyyppi?: PerusteDto.TyyppiEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteDto
     */
    koulutusvienti?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteDto
     */
    korvattavatDiaarinumerot?: Array<string>;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteDto
     */
    osaamisalat?: Array<KoodiDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteDto
     */
    tyotehtavatJoissaVoiToimia?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteDto
     */
    suorittaneenOsaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<TutkintonimikeKoodiDto>}
     * @memberof PerusteDto
     */
    tutkintonimikkeet?: Array<TutkintonimikeKoodiDto>;
    /**
     *
     * @type {Array<SuoritustapaDto>}
     * @memberof PerusteDto
     */
    suoritustavat?: Array<SuoritustapaDto>;
    /**
     *
     * @type {KVLiiteDto}
     * @memberof PerusteDto
     */
    kvliite?: KVLiiteDto;
}

/**
 * @export
 * @namespace PerusteDto
 */
export namespace PerusteDto {
    /**
     * @export
     * @enum {string}
     */
    export enum ToteutusEnum {
        YKSINKERTAINEN = 'YKSINKERTAINEN',
        PERUSOPETUS = 'PERUSOPETUS',
        LOPS = 'LOPS',
        AMMATILLINEN = 'AMMATILLINEN',
        TPO = 'TPO',
        LOPS2019 = 'LOPS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KieletEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteHakuDto
 */
export interface PerusteHakuDto {
    /**
     *
     * @type {number}
     * @memberof PerusteHakuDto
     */
    id?: number;
    /**
     *
     * @type {PerusteVersionDto}
     * @memberof PerusteHakuDto
     */
    globalVersion?: PerusteVersionDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuDto
     */
    toteutus?: PerusteHakuDto.ToteutusEnum;
    /**
     *
     * @type {Array<KoulutusDto>}
     * @memberof PerusteHakuDto
     */
    koulutukset?: Array<KoulutusDto>;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteHakuDto
     */
    kielet?: Array<PerusteHakuDto.KieletEnum>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {MaarayskirjeDto}
     * @memberof PerusteHakuDto
     */
    maarayskirje?: MaarayskirjeDto;
    /**
     *
     * @type {Array<MuutosmaaraysDto>}
     * @memberof PerusteHakuDto
     */
    muutosmaaraykset?: Array<MuutosmaaraysDto>;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuDto
     */
    voimassaoloAlkaa?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuDto
     */
    siirtymaPaattyy?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuDto
     */
    voimassaoloLoppuu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuDto
     */
    paatospvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuDto
     */
    tila?: PerusteHakuDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuDto
     */
    tyyppi?: PerusteHakuDto.TyyppiEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteHakuDto
     */
    koulutusvienti?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteHakuDto
     */
    korvattavatDiaarinumerot?: Array<string>;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteHakuDto
     */
    osaamisalat?: Array<KoodiDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuDto
     */
    tyotehtavatJoissaVoiToimia?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuDto
     */
    suorittaneenOsaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<TutkintonimikeKoodiDto>}
     * @memberof PerusteHakuDto
     */
    tutkintonimikkeet?: Array<TutkintonimikeKoodiDto>;
    /**
     *
     * @type {Array<SuoritustapaDto>}
     * @memberof PerusteHakuDto
     */
    suoritustavat?: Array<SuoritustapaDto>;
    /**
     *
     * @type {KVLiiteDto}
     * @memberof PerusteHakuDto
     */
    kvliite?: KVLiiteDto;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteHakuDto
     */
    tutkintonimikeKoodit?: Array<KoodiDto>;
    /**
     *
     * @type {Array<CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto>}
     * @memberof PerusteHakuDto
     */
    tutkintonimikkeetKoodisto?: Array<CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto>;
    /**
     *
     * @type {Array<PerusteInfoDto>}
     * @memberof PerusteHakuDto
     */
    korvaavatPerusteet?: Array<PerusteInfoDto>;
    /**
     *
     * @type {Array<PerusteInfoDto>}
     * @memberof PerusteHakuDto
     */
    korvattavatPerusteet?: Array<PerusteInfoDto>;
}

/**
 * @export
 * @namespace PerusteHakuDto
 */
export namespace PerusteHakuDto {
    /**
     * @export
     * @enum {string}
     */
    export enum ToteutusEnum {
        YKSINKERTAINEN = 'YKSINKERTAINEN',
        PERUSOPETUS = 'PERUSOPETUS',
        LOPS = 'LOPS',
        AMMATILLINEN = 'AMMATILLINEN',
        TPO = 'TPO',
        LOPS2019 = 'LOPS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KieletEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteHakuInternalDto
 */
export interface PerusteHakuInternalDto {
    /**
     *
     * @type {number}
     * @memberof PerusteHakuInternalDto
     */
    id?: number;
    /**
     *
     * @type {PerusteVersionDto}
     * @memberof PerusteHakuInternalDto
     */
    globalVersion?: PerusteVersionDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuInternalDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuInternalDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuInternalDto
     */
    toteutus?: PerusteHakuInternalDto.ToteutusEnum;
    /**
     *
     * @type {Array<KoulutusDto>}
     * @memberof PerusteHakuInternalDto
     */
    koulutukset?: Array<KoulutusDto>;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteHakuInternalDto
     */
    kielet?: Array<PerusteHakuInternalDto.KieletEnum>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuInternalDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {MaarayskirjeDto}
     * @memberof PerusteHakuInternalDto
     */
    maarayskirje?: MaarayskirjeDto;
    /**
     *
     * @type {Array<MuutosmaaraysDto>}
     * @memberof PerusteHakuInternalDto
     */
    muutosmaaraykset?: Array<MuutosmaaraysDto>;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuInternalDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuInternalDto
     */
    voimassaoloAlkaa?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuInternalDto
     */
    siirtymaPaattyy?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuInternalDto
     */
    voimassaoloLoppuu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuInternalDto
     */
    paatospvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuInternalDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteHakuInternalDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuInternalDto
     */
    tila?: PerusteHakuInternalDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteHakuInternalDto
     */
    tyyppi?: PerusteHakuInternalDto.TyyppiEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteHakuInternalDto
     */
    koulutusvienti?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteHakuInternalDto
     */
    korvattavatDiaarinumerot?: Array<string>;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteHakuInternalDto
     */
    osaamisalat?: Array<KoodiDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuInternalDto
     */
    tyotehtavatJoissaVoiToimia?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteHakuInternalDto
     */
    suorittaneenOsaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<TutkintonimikeKoodiDto>}
     * @memberof PerusteHakuInternalDto
     */
    tutkintonimikkeet?: Array<TutkintonimikeKoodiDto>;
    /**
     *
     * @type {Array<SuoritustapaDto>}
     * @memberof PerusteHakuInternalDto
     */
    suoritustavat?: Array<SuoritustapaDto>;
    /**
     *
     * @type {KVLiiteDto}
     * @memberof PerusteHakuInternalDto
     */
    kvliite?: KVLiiteDto;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteHakuInternalDto
     */
    tutkintonimikeKoodit?: Array<KoodiDto>;
    /**
     *
     * @type {Array<CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto>}
     * @memberof PerusteHakuInternalDto
     */
    tutkintonimikkeetKoodisto?: Array<CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto>;
    /**
     *
     * @type {Array<PerusteInfoDto>}
     * @memberof PerusteHakuInternalDto
     */
    korvaavatPerusteet?: Array<PerusteInfoDto>;
    /**
     *
     * @type {Array<PerusteInfoDto>}
     * @memberof PerusteHakuInternalDto
     */
    korvattavatPerusteet?: Array<PerusteInfoDto>;
    /**
     *
     * @type {PerusteprojektiDto}
     * @memberof PerusteHakuInternalDto
     */
    perusteprojekti?: PerusteprojektiDto;
}

/**
 * @export
 * @namespace PerusteHakuInternalDto
 */
export namespace PerusteHakuInternalDto {
    /**
     * @export
     * @enum {string}
     */
    export enum ToteutusEnum {
        YKSINKERTAINEN = 'YKSINKERTAINEN',
        PERUSOPETUS = 'PERUSOPETUS',
        LOPS = 'LOPS',
        AMMATILLINEN = 'AMMATILLINEN',
        TPO = 'TPO',
        LOPS2019 = 'LOPS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KieletEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteInfoDto
 */
export interface PerusteInfoDto {
    /**
     *
     * @type {number}
     * @memberof PerusteInfoDto
     */
    id?: number;
    /**
     *
     * @type {PerusteVersionDto}
     * @memberof PerusteInfoDto
     */
    globalVersion?: PerusteVersionDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteInfoDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteInfoDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteInfoDto
     */
    voimassaoloLoppuu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteInfoDto
     */
    voimassaoloAlkaa?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteInfoDto
     */
    tila?: PerusteInfoDto.TilaEnum;
    /**
     *
     * @type {Array<SuoritustapaDto>}
     * @memberof PerusteInfoDto
     */
    suoritustavat?: Array<SuoritustapaDto>;
}

/**
 * @export
 * @namespace PerusteInfoDto
 */
export namespace PerusteInfoDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
}

/**
 *
 * @export
 * @interface PerusteKaikkiDto
 */
export interface PerusteKaikkiDto {
    /**
     *
     * @type {number}
     * @memberof PerusteKaikkiDto
     */
    id?: number;
    /**
     *
     * @type {PerusteVersionDto}
     * @memberof PerusteKaikkiDto
     */
    globalVersion?: PerusteVersionDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteKaikkiDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteKaikkiDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteKaikkiDto
     */
    toteutus?: PerusteKaikkiDto.ToteutusEnum;
    /**
     *
     * @type {Array<KoulutusDto>}
     * @memberof PerusteKaikkiDto
     */
    koulutukset?: Array<KoulutusDto>;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteKaikkiDto
     */
    kielet?: Array<PerusteKaikkiDto.KieletEnum>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteKaikkiDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {MaarayskirjeDto}
     * @memberof PerusteKaikkiDto
     */
    maarayskirje?: MaarayskirjeDto;
    /**
     *
     * @type {Array<MuutosmaaraysDto>}
     * @memberof PerusteKaikkiDto
     */
    muutosmaaraykset?: Array<MuutosmaaraysDto>;
    /**
     *
     * @type {string}
     * @memberof PerusteKaikkiDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteKaikkiDto
     */
    voimassaoloAlkaa?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteKaikkiDto
     */
    siirtymaPaattyy?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteKaikkiDto
     */
    voimassaoloLoppuu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteKaikkiDto
     */
    paatospvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteKaikkiDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteKaikkiDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteKaikkiDto
     */
    tila?: PerusteKaikkiDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteKaikkiDto
     */
    tyyppi?: PerusteKaikkiDto.TyyppiEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteKaikkiDto
     */
    koulutusvienti?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteKaikkiDto
     */
    korvattavatDiaarinumerot?: Array<string>;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteKaikkiDto
     */
    osaamisalat?: Array<KoodiDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteKaikkiDto
     */
    tyotehtavatJoissaVoiToimia?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteKaikkiDto
     */
    suorittaneenOsaaminen?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<TutkintonimikeKoodiDto>}
     * @memberof PerusteKaikkiDto
     */
    tutkintonimikkeet?: Array<TutkintonimikeKoodiDto>;
    /**
     *
     * @type {Array<SuoritustapaLaajaDto>}
     * @memberof PerusteKaikkiDto
     */
    suoritustavat?: Array<SuoritustapaLaajaDto>;
    /**
     *
     * @type {Array<TutkinnonOsaKaikkiDto>}
     * @memberof PerusteKaikkiDto
     */
    tutkinnonOsat?: Array<TutkinnonOsaKaikkiDto>;
    /**
     *
     * @type {PerusopetuksenPerusteenSisaltoDto}
     * @memberof PerusteKaikkiDto
     */
    perusopetus?: PerusopetuksenPerusteenSisaltoDto;
    /**
     *
     * @type {LukiokoulutuksenPerusteenSisaltoDto}
     * @memberof PerusteKaikkiDto
     */
    lukiokoulutus?: LukiokoulutuksenPerusteenSisaltoDto;
    /**
     *
     * @type {Lops2019SisaltoDto}
     * @memberof PerusteKaikkiDto
     */
    lops2019?: Lops2019SisaltoDto;
    /**
     *
     * @type {EsiopetuksenPerusteenSisaltoDto}
     * @memberof PerusteKaikkiDto
     */
    esiopetus?: EsiopetuksenPerusteenSisaltoDto;
    /**
     *
     * @type {AIPEOpetuksenSisaltoDto}
     * @memberof PerusteKaikkiDto
     */
    aipe?: AIPEOpetuksenSisaltoDto;
    /**
     *
     * @type {TPOOpetuksenSisaltoDto}
     * @memberof PerusteKaikkiDto
     */
    tpo?: TPOOpetuksenSisaltoDto;
}

/**
 * @export
 * @namespace PerusteKaikkiDto
 */
export namespace PerusteKaikkiDto {
    /**
     * @export
     * @enum {string}
     */
    export enum ToteutusEnum {
        YKSINKERTAINEN = 'YKSINKERTAINEN',
        PERUSOPETUS = 'PERUSOPETUS',
        LOPS = 'LOPS',
        AMMATILLINEN = 'AMMATILLINEN',
        TPO = 'TPO',
        LOPS2019 = 'LOPS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KieletEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteKevytDto
 */
export interface PerusteKevytDto {
    /**
     *
     * @type {number}
     * @memberof PerusteKevytDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteKevytDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteKevytDto
     */
    tila?: PerusteKevytDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteKevytDto
     */
    tyyppi?: PerusteKevytDto.TyyppiEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteKevytDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {boolean}
     * @memberof PerusteKevytDto
     */
    esikatseltavissa?: boolean;
    /**
     *
     * @type {Array<SuoritustapaDto>}
     * @memberof PerusteKevytDto
     */
    suoritustavat?: Array<SuoritustapaDto>;
}

/**
 * @export
 * @namespace PerusteKevytDto
 */
export namespace PerusteKevytDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteKoosteDto
 */
export interface PerusteKoosteDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteKoosteDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteKoosteDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteKoosteDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteKoosteDto
     */
    kielet?: Array<PerusteKoosteDto.KieletEnum>;
    /**
     *
     * @type {Array<KoodiDto>}
     * @memberof PerusteKoosteDto
     */
    tutkinnonOsat?: Array<KoodiDto>;
    /**
     *
     * @type {Array<KoosteenOsaamisalaDto>}
     * @memberof PerusteKoosteDto
     */
    osaamisalat?: Array<KoosteenOsaamisalaDto>;
}

/**
 * @export
 * @namespace PerusteKoosteDto
 */
export namespace PerusteKoosteDto {
    /**
     * @export
     * @enum {string}
     */
    export enum KieletEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface PerusteVersionDto
 */
export interface PerusteVersionDto {
    /**
     *
     * @type {Date}
     * @memberof PerusteVersionDto
     */
    aikaleima?: Date;
}

/**
 *
 * @export
 * @interface PerusteenOsaDto
 */
export interface PerusteenOsaDto {
    /**
     *
     * @type {number}
     * @memberof PerusteenOsaDto
     */
    id?: number;
    /**
     *
     * @type {Date}
     * @memberof PerusteenOsaDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteenOsaDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaDto
     */
    muokkaaja?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteenOsaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaDto
     */
    tila?: PerusteenOsaDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaDto
     */
    tunniste?: PerusteenOsaDto.TunnisteEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteenOsaDto
     */
    valmis?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PerusteenOsaDto
     */
    kaannettava?: boolean;
}

/**
 * @export
 * @namespace PerusteenOsaDto
 */
export namespace PerusteenOsaDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TunnisteEnum {
        NORMAALI = 'NORMAALI',
        LAAJAALAINENOSAAMINEN = 'LAAJAALAINENOSAAMINEN',
        RAKENNE = 'RAKENNE'
    }
}

/**
 *
 * @export
 * @interface PerusteenOsaTyoryhmaDto
 */
export interface PerusteenOsaTyoryhmaDto {
    /**
     *
     * @type {number}
     * @memberof PerusteenOsaTyoryhmaDto
     */
    id?: number;
    /**
     *
     * @type {Reference}
     * @memberof PerusteenOsaTyoryhmaDto
     */
    perusteprojekti?: Reference;
    /**
     *
     * @type {Reference}
     * @memberof PerusteenOsaTyoryhmaDto
     */
    perusteenosa?: Reference;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaTyoryhmaDto
     */
    nimi?: string;
}

/**
 *
 * @export
 * @interface PerusteenOsaUpdateDto
 */
export interface PerusteenOsaUpdateDto {
    /**
     *
     * @type {number}
     * @memberof PerusteenOsaUpdateDto
     */
    id?: number;
    /**
     *
     * @type {Date}
     * @memberof PerusteenOsaUpdateDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteenOsaUpdateDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaUpdateDto
     */
    muokkaaja?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof PerusteenOsaUpdateDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaUpdateDto
     */
    tila?: PerusteenOsaUpdateDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaUpdateDto
     */
    tunniste?: PerusteenOsaUpdateDto.TunnisteEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteenOsaUpdateDto
     */
    valmis?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof PerusteenOsaUpdateDto
     */
    kaannettava?: boolean;
    /**
     *
     * @type {string}
     * @memberof PerusteenOsaUpdateDto
     */
    osanTyyppi?: string;
    /**
     *
     * @type {MetaData}
     * @memberof PerusteenOsaUpdateDto
     */
    metadata?: MetaData;
}

/**
 * @export
 * @namespace PerusteenOsaUpdateDto
 */
export namespace PerusteenOsaUpdateDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TunnisteEnum {
        NORMAALI = 'NORMAALI',
        LAAJAALAINENOSAAMINEN = 'LAAJAALAINENOSAAMINEN',
        RAKENNE = 'RAKENNE'
    }
}

/**
 *
 * @export
 * @interface PerusteenOsaViiteDto
 */
export interface PerusteenOsaViiteDto {
    /**
     *
     * @type {number}
     * @memberof PerusteenOsaViiteDto
     */
    id?: number;
    /**
     *
     * @type {PerusteenOsaDto}
     * @memberof PerusteenOsaViiteDto
     */
    perusteenOsa?: PerusteenOsaDto;
    /**
     *
     * @type {Reference}
     * @memberof PerusteenOsaViiteDto
     */
    _perusteenOsa?: Reference;
}

/**
 *
 * @export
 * @interface PerusteenOsaViiteDtoObject
 */
export interface PerusteenOsaViiteDtoObject {
    /**
     *
     * @type {number}
     * @memberof PerusteenOsaViiteDtoObject
     */
    id?: number;
    /**
     *
     * @type {any}
     * @memberof PerusteenOsaViiteDtoObject
     */
    perusteenOsa?: any;
    /**
     *
     * @type {Reference}
     * @memberof PerusteenOsaViiteDtoObject
     */
    _perusteenOsa?: Reference;
}

/**
 *
 * @export
 * @interface PerusteprojektiDto
 */
export interface PerusteprojektiDto {
    /**
     *
     * @type {number}
     * @memberof PerusteprojektiDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiDto
     */
    nimi?: string;
    /**
     *
     * @type {Reference}
     * @memberof PerusteprojektiDto
     */
    peruste?: Reference;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektiDto
     */
    paatosPvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektiDto
     */
    toimikausiAlku?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektiDto
     */
    toimikausiLoppu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiDto
     */
    tehtavaluokka?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiDto
     */
    tehtava?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiDto
     */
    yhteistyotaho?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiDto
     */
    tila?: PerusteprojektiDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiDto
     */
    ryhmaOid?: string;
    /**
     *
     * @type {boolean}
     * @memberof PerusteprojektiDto
     */
    esikatseltavissa?: boolean;
}

/**
 * @export
 * @namespace PerusteprojektiDto
 */
export namespace PerusteprojektiDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
}

/**
 *
 * @export
 * @interface PerusteprojektiInfoDto
 */
export interface PerusteprojektiInfoDto {
    /**
     *
     * @type {number}
     * @memberof PerusteprojektiInfoDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiInfoDto
     */
    nimi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiInfoDto
     */
    tila?: PerusteprojektiInfoDto.TilaEnum;
    /**
     *
     * @type {PerusteDto}
     * @memberof PerusteprojektiInfoDto
     */
    peruste?: PerusteDto;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiInfoDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiInfoDto
     */
    ryhmaOid?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiInfoDto
     */
    koulutustyyppi?: string;
}

/**
 * @export
 * @namespace PerusteprojektiInfoDto
 */
export namespace PerusteprojektiInfoDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
}

/**
 *
 * @export
 * @interface PerusteprojektiKevytDto
 */
export interface PerusteprojektiKevytDto {
    /**
     *
     * @type {number}
     * @memberof PerusteprojektiKevytDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiKevytDto
     */
    nimi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiKevytDto
     */
    tila?: PerusteprojektiKevytDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiKevytDto
     */
    perusteendiaarinumero?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiKevytDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiKevytDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiKevytDto
     */
    toteutus?: PerusteprojektiKevytDto.ToteutusEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiKevytDto
     */
    tyyppi?: PerusteprojektiKevytDto.TyyppiEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof PerusteprojektiKevytDto
     */
    suoritustavat?: Array<string>;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektiKevytDto
     */
    luotu?: Date;
    /**
     *
     * @type {PerusteVersionDto}
     * @memberof PerusteprojektiKevytDto
     */
    globalVersion?: PerusteVersionDto;
    /**
     *
     * @type {PerusteBaseDto}
     * @memberof PerusteprojektiKevytDto
     */
    peruste?: PerusteBaseDto;
}

/**
 * @export
 * @namespace PerusteprojektiKevytDto
 */
export namespace PerusteprojektiKevytDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ToteutusEnum {
        YKSINKERTAINEN = 'YKSINKERTAINEN',
        PERUSOPETUS = 'PERUSOPETUS',
        LOPS = 'LOPS',
        AMMATILLINEN = 'AMMATILLINEN',
        TPO = 'TPO',
        LOPS2019 = 'LOPS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteprojektiListausDto
 */
export interface PerusteprojektiListausDto {
    /**
     *
     * @type {number}
     * @memberof PerusteprojektiListausDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiListausDto
     */
    nimi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiListausDto
     */
    tila?: PerusteprojektiListausDto.TilaEnum;
    /**
     *
     * @type {PerusteKevytDto}
     * @memberof PerusteprojektiListausDto
     */
    peruste?: PerusteKevytDto;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiListausDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiListausDto
     */
    ryhmaOid?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiListausDto
     */
    koulutustyyppi?: string;
}

/**
 * @export
 * @namespace PerusteprojektiListausDto
 */
export namespace PerusteprojektiListausDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
}

/**
 *
 * @export
 * @interface PerusteprojektiLuontiDto
 */
export interface PerusteprojektiLuontiDto {
    /**
     *
     * @type {number}
     * @memberof PerusteprojektiLuontiDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    nimi?: string;
    /**
     *
     * @type {Reference}
     * @memberof PerusteprojektiLuontiDto
     */
    peruste?: Reference;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektiLuontiDto
     */
    paatosPvm?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektiLuontiDto
     */
    toimikausiAlku?: Date;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektiLuontiDto
     */
    toimikausiLoppu?: Date;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    tehtavaluokka?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    tehtava?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    yhteistyotaho?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    tila?: PerusteprojektiLuontiDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    ryhmaOid?: string;
    /**
     *
     * @type {boolean}
     * @memberof PerusteprojektiLuontiDto
     */
    esikatseltavissa?: boolean;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    laajuusYksikko?: PerusteprojektiLuontiDto.LaajuusYksikkoEnum;
    /**
     *
     * @type {number}
     * @memberof PerusteprojektiLuontiDto
     */
    perusteId?: number;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    toteutus?: PerusteprojektiLuontiDto.ToteutusEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektiLuontiDto
     */
    tyyppi?: PerusteprojektiLuontiDto.TyyppiEnum;
    /**
     *
     * @type {boolean}
     * @memberof PerusteprojektiLuontiDto
     */
    reforminMukainen?: boolean;
}

/**
 * @export
 * @namespace PerusteprojektiLuontiDto
 */
export namespace PerusteprojektiLuontiDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LaajuusYksikkoEnum {
        OPINTOVIIKKO = 'OPINTOVIIKKO',
        OSAAMISPISTE = 'OSAAMISPISTE',
        KURSSI = 'KURSSI',
        OPINTOPISTE = 'OPINTOPISTE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ToteutusEnum {
        YKSINKERTAINEN = 'YKSINKERTAINEN',
        PERUSOPETUS = 'PERUSOPETUS',
        LOPS = 'LOPS',
        AMMATILLINEN = 'AMMATILLINEN',
        TPO = 'TPO',
        LOPS2019 = 'LOPS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface PerusteprojektinPerusteenosaDto
 */
export interface PerusteprojektinPerusteenosaDto {
    /**
     *
     * @type {number}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    nimi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    tila?: PerusteprojektinPerusteenosaDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    perusteendiaarinumero?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    diaarinumero?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    koulutustyyppi?: string;
    /**
     *
     * @type {string}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    tyyppi?: PerusteprojektinPerusteenosaDto.TyyppiEnum;
    /**
     *
     * @type {Date}
     * @memberof PerusteprojektinPerusteenosaDto
     */
    luotu?: Date;
}

/**
 * @export
 * @namespace PerusteprojektinPerusteenosaDto
 */
export namespace PerusteprojektinPerusteenosaDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        POISTETTU = 'POISTETTU',
        LAADINTA = 'LAADINTA',
        KOMMENTOINTI = 'KOMMENTOINTI',
        VIIMEISTELY = 'VIIMEISTELY',
        VALMIS = 'VALMIS',
        JULKAISTU = 'JULKAISTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        OPAS = 'OPAS',
        AMOSAAYHTEINEN = 'AMOSAA_YHTEINEN',
        POHJA = 'POHJA'
    }
}

/**
 *
 * @export
 * @interface RakenneModuuliDto
 */
export interface RakenneModuuliDto {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof RakenneModuuliDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof RakenneModuuliDto
     */
    vieras?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof RakenneModuuliDto
     */
    tunniste?: string;
    /**
     *
     * @type {boolean}
     * @memberof RakenneModuuliDto
     */
    pakollinen?: boolean;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof RakenneModuuliDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof RakenneModuuliDto
     */
    rooli?: RakenneModuuliDto.RooliEnum;
    /**
     *
     * @type {MuodostumisSaantoDto}
     * @memberof RakenneModuuliDto
     */
    muodostumisSaanto?: MuodostumisSaantoDto;
    /**
     *
     * @type {OsaamisalaDto}
     * @memberof RakenneModuuliDto
     */
    osaamisala?: OsaamisalaDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof RakenneModuuliDto
     */
    tutkintonimike?: KoodiDto;
    /**
     *
     * @type {Array<AbstractRakenneOsaDto>}
     * @memberof RakenneModuuliDto
     */
    osat?: Array<AbstractRakenneOsaDto>;
    /**
     *
     * @type {number}
     * @memberof RakenneModuuliDto
     */
    versioId?: number;
}

/**
 * @export
 * @namespace RakenneModuuliDto
 */
export namespace RakenneModuuliDto {
    /**
     * @export
     * @enum {string}
     */
    export enum RooliEnum {
        NORMAALI = 'NORMAALI',
        VIRTUAALINEN = 'VIRTUAALINEN',
        OSAAMISALA = 'OSAAMISALA',
        TUTKINTONIMIKE = 'TUTKINTONIMIKE',
        VIERAS = 'VIERAS'
    }
}

/**
 *
 * @export
 * @interface RakenneOngelmaDto
 */
export interface RakenneOngelmaDto {
    /**
     *
     * @type {string}
     * @memberof RakenneOngelmaDto
     */
    ongelma?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof RakenneOngelmaDto
     */
    ryhma?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface RakenneValidointiDto
 */
export interface RakenneValidointiDto {
    /**
     *
     * @type {Array<RakenneOngelmaDto>}
     * @memberof RakenneValidointiDto
     */
    ongelmat?: Array<RakenneOngelmaDto>;
}

/**
 *
 * @export
 * @interface Reference
 */
export interface Reference {
}

/**
 *
 * @export
 * @interface Revision
 */
export interface Revision {
    /**
     *
     * @type {number}
     * @memberof Revision
     */
    numero?: number;
    /**
     *
     * @type {Date}
     * @memberof Revision
     */
    pvm?: Date;
    /**
     *
     * @type {string}
     * @memberof Revision
     */
    muokkaajaOid?: string;
    /**
     *
     * @type {string}
     * @memberof Revision
     */
    kommentti?: string;
}

/**
 *
 * @export
 * @interface Sort
 */
export interface Sort {
}

/**
 *
 * @export
 * @interface Status
 */
export interface Status {
    /**
     *
     * @type {string}
     * @memberof Status
     */
    viesti?: string;
    /**
     *
     * @type {Validointi}
     * @memberof Status
     */
    validointi?: Validointi;
    /**
     *
     * @type {Array<LokalisoituTekstiDto>}
     * @memberof Status
     */
    nimet?: Array<LokalisoituTekstiDto>;
    /**
     *
     * @type {string}
     * @memberof Status
     */
    suoritustapa?: Status.SuoritustapaEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof Status
     */
    kielet?: Array<Status.KieletEnum>;
}

/**
 * @export
 * @namespace Status
 */
export namespace Status {
    /**
     * @export
     * @enum {string}
     */
    export enum SuoritustapaEnum {
        OPS = 'OPS',
        NAYTTO = 'NAYTTO',
        REFORMI = 'REFORMI',
        PERUSOPETUS = 'PERUSOPETUS',
        LISAOPETUS = 'LISAOPETUS',
        VARHAISKASVATUS = 'VARHAISKASVATUS',
        OPAS = 'OPAS',
        ESIOPETUS = 'ESIOPETUS',
        AIPE = 'AIPE',
        TPO = 'TPO',
        LUKIOKOULUTUS = 'LUKIOKOULUTUS',
        LUKIOKOULUTUS2019 = 'LUKIOKOULUTUS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KieletEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface SuoritustapaDto
 */
export interface SuoritustapaDto {
    /**
     *
     * @type {string}
     * @memberof SuoritustapaDto
     */
    suoritustapakoodi?: SuoritustapaDto.SuoritustapakoodiEnum;
    /**
     *
     * @type {string}
     * @memberof SuoritustapaDto
     */
    laajuusYksikko?: SuoritustapaDto.LaajuusYksikkoEnum;
}

/**
 * @export
 * @namespace SuoritustapaDto
 */
export namespace SuoritustapaDto {
    /**
     * @export
     * @enum {string}
     */
    export enum SuoritustapakoodiEnum {
        OPS = 'OPS',
        NAYTTO = 'NAYTTO',
        REFORMI = 'REFORMI',
        PERUSOPETUS = 'PERUSOPETUS',
        LISAOPETUS = 'LISAOPETUS',
        VARHAISKASVATUS = 'VARHAISKASVATUS',
        OPAS = 'OPAS',
        ESIOPETUS = 'ESIOPETUS',
        AIPE = 'AIPE',
        TPO = 'TPO',
        LUKIOKOULUTUS = 'LUKIOKOULUTUS',
        LUKIOKOULUTUS2019 = 'LUKIOKOULUTUS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LaajuusYksikkoEnum {
        OPINTOVIIKKO = 'OPINTOVIIKKO',
        OSAAMISPISTE = 'OSAAMISPISTE',
        KURSSI = 'KURSSI',
        OPINTOPISTE = 'OPINTOPISTE'
    }
}

/**
 *
 * @export
 * @interface SuoritustapaLaajaDto
 */
export interface SuoritustapaLaajaDto {
    /**
     *
     * @type {string}
     * @memberof SuoritustapaLaajaDto
     */
    suoritustapakoodi?: SuoritustapaLaajaDto.SuoritustapakoodiEnum;
    /**
     *
     * @type {string}
     * @memberof SuoritustapaLaajaDto
     */
    laajuusYksikko?: SuoritustapaLaajaDto.LaajuusYksikkoEnum;
    /**
     *
     * @type {RakenneModuuliDto}
     * @memberof SuoritustapaLaajaDto
     */
    rakenne?: RakenneModuuliDto;
    /**
     *
     * @type {Laaja}
     * @memberof SuoritustapaLaajaDto
     */
    sisalto?: Laaja;
    /**
     *
     * @type {Array<TutkinnonOsaViiteSuppeaDto>}
     * @memberof SuoritustapaLaajaDto
     */
    tutkinnonOsaViitteet?: Array<TutkinnonOsaViiteSuppeaDto>;
}

/**
 * @export
 * @namespace SuoritustapaLaajaDto
 */
export namespace SuoritustapaLaajaDto {
    /**
     * @export
     * @enum {string}
     */
    export enum SuoritustapakoodiEnum {
        OPS = 'OPS',
        NAYTTO = 'NAYTTO',
        REFORMI = 'REFORMI',
        PERUSOPETUS = 'PERUSOPETUS',
        LISAOPETUS = 'LISAOPETUS',
        VARHAISKASVATUS = 'VARHAISKASVATUS',
        OPAS = 'OPAS',
        ESIOPETUS = 'ESIOPETUS',
        AIPE = 'AIPE',
        TPO = 'TPO',
        LUKIOKOULUTUS = 'LUKIOKOULUTUS',
        LUKIOKOULUTUS2019 = 'LUKIOKOULUTUS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum LaajuusYksikkoEnum {
        OPINTOVIIKKO = 'OPINTOVIIKKO',
        OSAAMISPISTE = 'OSAAMISPISTE',
        KURSSI = 'KURSSI',
        OPINTOPISTE = 'OPINTOPISTE'
    }
}

/**
 *
 * @export
 * @interface Suppea
 */
export interface Suppea {
    /**
     *
     * @type {number}
     * @memberof Suppea
     */
    id?: number;
    /**
     *
     * @type {Date}
     * @memberof Suppea
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof Suppea
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof Suppea
     */
    muokkaaja?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof Suppea
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof Suppea
     */
    tila?: Suppea.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof Suppea
     */
    tunniste?: Suppea.TunnisteEnum;
    /**
     *
     * @type {boolean}
     * @memberof Suppea
     */
    valmis?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Suppea
     */
    kaannettava?: boolean;
    /**
     *
     * @type {string}
     * @memberof Suppea
     */
    osanTyyppi?: string;
}

/**
 * @export
 * @namespace Suppea
 */
export namespace Suppea {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TunnisteEnum {
        NORMAALI = 'NORMAALI',
        LAAJAALAINENOSAAMINEN = 'LAAJAALAINENOSAAMINEN',
        RAKENNE = 'RAKENNE'
    }
}

/**
 *
 * @export
 * @interface TPOOpetuksenSisaltoDto
 */
export interface TPOOpetuksenSisaltoDto {
    /**
     *
     * @type {Laaja}
     * @memberof TPOOpetuksenSisaltoDto
     */
    sisalto?: Laaja;
}

/**
 *
 * @export
 * @interface TaiteenalaDto
 */
export interface TaiteenalaDto extends Laaja {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TaiteenalaDto
     */
    teksti?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof TaiteenalaDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {KevytTekstiKappaleDto}
     * @memberof TaiteenalaDto
     */
    kasvatus?: KevytTekstiKappaleDto;
    /**
     *
     * @type {KevytTekstiKappaleDto}
     * @memberof TaiteenalaDto
     */
    yhteisetOpinnot?: KevytTekstiKappaleDto;
    /**
     *
     * @type {KevytTekstiKappaleDto}
     * @memberof TaiteenalaDto
     */
    teemaopinnot?: KevytTekstiKappaleDto;
    /**
     *
     * @type {KevytTekstiKappaleDto}
     * @memberof TaiteenalaDto
     */
    aikuistenOpetus?: KevytTekstiKappaleDto;
    /**
     *
     * @type {KevytTekstiKappaleDto}
     * @memberof TaiteenalaDto
     */
    tyotavatOpetuksessa?: KevytTekstiKappaleDto;
    /**
     *
     * @type {KevytTekstiKappaleDto}
     * @memberof TaiteenalaDto
     */
    oppimisenArviointiOpetuksessa?: KevytTekstiKappaleDto;
}

/**
 * @export
 * @namespace TaiteenalaDto
 */
export namespace TaiteenalaDto {
}

/**
 *
 * @export
 * @interface TavoitteenArviointiDto
 */
export interface TavoitteenArviointiDto {
    /**
     *
     * @type {number}
     * @memberof TavoitteenArviointiDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TavoitteenArviointiDto
     */
    arvioinninKohde?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TavoitteenArviointiDto
     */
    hyvanOsaamisenKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TavoitteenArviointiDto
     */
    osaamisenKuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof TavoitteenArviointiDto
     */
    arvosana?: number;
}

/**
 *
 * @export
 * @interface TekstiKappaleDto
 */
export interface TekstiKappaleDto extends Laaja {
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TekstiKappaleDto
     */
    teksti?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof TekstiKappaleDto
     */
    osaamisala?: KoodiDto;
    /**
     *
     * @type {boolean}
     * @memberof TekstiKappaleDto
     */
    liite?: boolean;
}

/**
 * @export
 * @namespace TekstiKappaleDto
 */
export namespace TekstiKappaleDto {
}

/**
 *
 * @export
 * @interface TekstiOsaDto
 */
export interface TekstiOsaDto {
    /**
     *
     * @type {number}
     * @memberof TekstiOsaDto
     */
    id?: number;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TekstiOsaDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TekstiOsaDto
     */
    teksti?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface TekstiPalanen
 */
export interface TekstiPalanen {
    /**
     *
     * @type {number}
     * @memberof TekstiPalanen
     */
    id?: number;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof TekstiPalanen
     */
    teksti?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof TekstiPalanen
     */
    tunniste?: string;
}

/**
 *
 * @export
 * @interface TermiDto
 */
export interface TermiDto {
    /**
     *
     * @type {number}
     * @memberof TermiDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TermiDto
     */
    avain?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TermiDto
     */
    termi?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TermiDto
     */
    selitys?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface TiedoteDto
 */
export interface TiedoteDto {
    /**
     *
     * @type {number}
     * @memberof TiedoteDto
     */
    id?: number;
    /**
     *
     * @type {Reference}
     * @memberof TiedoteDto
     */
    perusteprojekti?: Reference;
    /**
     *
     * @type {PerusteKevytDto}
     * @memberof TiedoteDto
     */
    peruste?: PerusteKevytDto;
    /**
     *
     * @type {boolean}
     * @memberof TiedoteDto
     */
    julkinen?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TiedoteDto
     */
    yleinen?: boolean;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TiedoteDto
     */
    otsikko?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TiedoteDto
     */
    sisalto?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<string>}
     * @memberof TiedoteDto
     */
    julkaisupaikat?: Array<TiedoteDto.JulkaisupaikatEnum>;
    /**
     *
     * @type {Array<string>}
     * @memberof TiedoteDto
     */
    koulutustyypit?: Array<TiedoteDto.KoulutustyypitEnum>;
    /**
     *
     * @type {Array<PerusteKevytDto>}
     * @memberof TiedoteDto
     */
    perusteet?: Array<PerusteKevytDto>;
    /**
     *
     * @type {Date}
     * @memberof TiedoteDto
     */
    luotu?: Date;
    /**
     *
     * @type {string}
     * @memberof TiedoteDto
     */
    luoja?: string;
    /**
     *
     * @type {string}
     * @memberof TiedoteDto
     */
    nimi?: string;
    /**
     *
     * @type {Date}
     * @memberof TiedoteDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof TiedoteDto
     */
    muokkaaja?: string;
}

/**
 * @export
 * @namespace TiedoteDto
 */
export namespace TiedoteDto {
    /**
     * @export
     * @enum {string}
     */
    export enum JulkaisupaikatEnum {
        OPINTOPOLKU = 'OPINTOPOLKU',
        OPINTOPOLKUETUSIVU = 'OPINTOPOLKU_ETUSIVU',
        OPS = 'OPS',
        AMOSAA = 'AMOSAA'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KoulutustyypitEnum {
        PERUSTUTKINTO = 'PERUSTUTKINTO',
        LUKIOKOULUTUS = 'LUKIOKOULUTUS',
        TELMA = 'TELMA',
        LISAOPETUS = 'LISAOPETUS',
        AMMATTITUTKINTO = 'AMMATTITUTKINTO',
        ERIKOISAMMATTITUTKINTO = 'ERIKOISAMMATTITUTKINTO',
        AIKUISTENLUKIOKOULUTUS = 'AIKUISTENLUKIOKOULUTUS',
        ESIOPETUS = 'ESIOPETUS',
        PERUSOPETUS = 'PERUSOPETUS',
        AIKUISTENPERUSOPETUS = 'AIKUISTENPERUSOPETUS',
        VALMA = 'VALMA',
        VARHAISKASVATUS = 'VARHAISKASVATUS',
        PERUSOPETUSVALMISTAVA = 'PERUSOPETUSVALMISTAVA',
        LUKIOVALMISTAVAKOULUTUS = 'LUKIOVALMISTAVAKOULUTUS',
        TPO = 'TPO'
    }
}

/**
 *
 * @export
 * @interface TilaUpdateStatus
 */
export interface TilaUpdateStatus {
    /**
     *
     * @type {Array<Status>}
     * @memberof TilaUpdateStatus
     */
    infot?: Array<Status>;
    /**
     *
     * @type {boolean}
     * @memberof TilaUpdateStatus
     */
    vaihtoOk?: boolean;
}

/**
 *
 * @export
 * @interface TutkinnonOsaDto
 */
export interface TutkinnonOsaDto {
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaDto
     */
    id?: number;
    /**
     *
     * @type {Date}
     * @memberof TutkinnonOsaDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof TutkinnonOsaDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaDto
     */
    muokkaaja?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaDto
     */
    tila?: TutkinnonOsaDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaDto
     */
    tunniste?: TutkinnonOsaDto.TunnisteEnum;
    /**
     *
     * @type {boolean}
     * @memberof TutkinnonOsaDto
     */
    valmis?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TutkinnonOsaDto
     */
    kaannettava?: boolean;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaDto
     */
    tavoitteet?: LokalisoituTekstiDto;
    /**
     *
     * @type {ArviointiDto}
     * @memberof TutkinnonOsaDto
     */
    arviointi?: ArviointiDto;
    /**
     *
     * @type {Array<AmmattitaitovaatimusKohdealueetDto>}
     * @memberof TutkinnonOsaDto
     */
    ammattitaitovaatimuksetLista?: Array<AmmattitaitovaatimusKohdealueetDto>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaDto
     */
    ammattitaitovaatimukset?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaDto
     */
    ammattitaidonOsoittamistavat?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {KoodiDto}
     * @memberof TutkinnonOsaDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {Array<OsaAlueDto>}
     * @memberof TutkinnonOsaDto
     */
    osaAlueet?: Array<OsaAlueDto>;
    /**
     *
     * @type {Array<KevytTekstiKappaleDto>}
     * @memberof TutkinnonOsaDto
     */
    vapaatTekstit?: Array<KevytTekstiKappaleDto>;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaDto
     */
    tyyppi?: TutkinnonOsaDto.TyyppiEnum;
    /**
     *
     * @type {ValmaTelmaSisaltoDto}
     * @memberof TutkinnonOsaDto
     */
    valmaTelmaSisalto?: ValmaTelmaSisaltoDto;
    /**
     *
     * @type {Ammattitaitovaatimukset2019Dto}
     * @memberof TutkinnonOsaDto
     */
    ammattitaitovaatimukset2019?: Ammattitaitovaatimukset2019Dto;
    /**
     *
     * @type {Reference}
     * @memberof TutkinnonOsaDto
     */
    geneerinenArviointiasteikko?: Reference;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaDto
     */
    osanTyyppi?: string;
}

/**
 * @export
 * @namespace TutkinnonOsaDto
 */
export namespace TutkinnonOsaDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TunnisteEnum {
        NORMAALI = 'NORMAALI',
        LAAJAALAINENOSAAMINEN = 'LAAJAALAINENOSAAMINEN',
        RAKENNE = 'RAKENNE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        TUTKE2 = 'TUTKE2',
        REFORMITUTKE2 = 'REFORMI_TUTKE2'
    }
}

/**
 *
 * @export
 * @interface TutkinnonOsaKaikkiDto
 */
export interface TutkinnonOsaKaikkiDto {
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaKaikkiDto
     */
    id?: number;
    /**
     *
     * @type {Date}
     * @memberof TutkinnonOsaKaikkiDto
     */
    luotu?: Date;
    /**
     *
     * @type {Date}
     * @memberof TutkinnonOsaKaikkiDto
     */
    muokattu?: Date;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaKaikkiDto
     */
    muokkaaja?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaKaikkiDto
     */
    tila?: TutkinnonOsaKaikkiDto.TilaEnum;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaKaikkiDto
     */
    tunniste?: TutkinnonOsaKaikkiDto.TunnisteEnum;
    /**
     *
     * @type {boolean}
     * @memberof TutkinnonOsaKaikkiDto
     */
    valmis?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof TutkinnonOsaKaikkiDto
     */
    kaannettava?: boolean;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaKaikkiDto
     */
    osanTyyppi?: string;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    kuvaus?: LokalisoituTekstiDto;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaKaikkiDto
     */
    opintoluokitus?: number;
    /**
     *
     * @type {KoodiDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    koodi?: KoodiDto;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaKaikkiDto
     */
    koodiUri?: string;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaKaikkiDto
     */
    koodiArvo?: string;
    /**
     *
     * @type {Array<OsaAlueKokonaanDto>}
     * @memberof TutkinnonOsaKaikkiDto
     */
    osaAlueet?: Array<OsaAlueKokonaanDto>;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaKaikkiDto
     */
    tyyppi?: TutkinnonOsaKaikkiDto.TyyppiEnum;
    /**
     *
     * @type {ValmaTelmaSisaltoDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    valmaTelmaSisalto?: ValmaTelmaSisaltoDto;
    /**
     *
     * @type {GeneerinenArviointiasteikkoDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    geneerinenArviointiasteikko?: GeneerinenArviointiasteikkoDto;
    /**
     *
     * @type {Ammattitaitovaatimukset2019Dto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    ammattitaitovaatimukset2019?: Ammattitaitovaatimukset2019Dto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    ammattitaidonOsoittamistavat?: LokalisoituTekstiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    tavoitteet?: LokalisoituTekstiDto;
    /**
     *
     * @type {ArviointiDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    arviointi?: ArviointiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaKaikkiDto
     */
    ammattitaitovaatimukset?: LokalisoituTekstiDto;
}

/**
 * @export
 * @namespace TutkinnonOsaKaikkiDto
 */
export namespace TutkinnonOsaKaikkiDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TilaEnum {
        LUONNOS = 'LUONNOS',
        VALMIS = 'VALMIS',
        POISTETTU = 'POISTETTU'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TunnisteEnum {
        NORMAALI = 'NORMAALI',
        LAAJAALAINENOSAAMINEN = 'LAAJAALAINENOSAAMINEN',
        RAKENNE = 'RAKENNE'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        TUTKE2 = 'TUTKE2',
        REFORMITUTKE2 = 'REFORMI_TUTKE2'
    }
}

/**
 *
 * @export
 * @interface TutkinnonOsaViiteDto
 */
export interface TutkinnonOsaViiteDto {
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteDto
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteDto
     */
    laajuus?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteDto
     */
    laajuusMaksimi?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteDto
     */
    jarjestys?: number;
    /**
     *
     * @type {Date}
     * @memberof TutkinnonOsaViiteDto
     */
    muokattu?: Date;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaViiteDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaViiteDto
     */
    tyyppi?: TutkinnonOsaViiteDto.TyyppiEnum;
    /**
     *
     * @type {Reference}
     * @memberof TutkinnonOsaViiteDto
     */
    _tutkinnonOsa?: Reference;
    /**
     *
     * @type {TutkinnonOsaDto}
     * @memberof TutkinnonOsaViiteDto
     */
    tutkinnonOsa?: TutkinnonOsaDto;
}

/**
 * @export
 * @namespace TutkinnonOsaViiteDto
 */
export namespace TutkinnonOsaViiteDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        TUTKE2 = 'TUTKE2',
        REFORMITUTKE2 = 'REFORMI_TUTKE2'
    }
}

/**
 *
 * @export
 * @interface TutkinnonOsaViiteKontekstiDto
 */
export interface TutkinnonOsaViiteKontekstiDto {
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    laajuus?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    laajuusMaksimi?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    jarjestys?: number;
    /**
     *
     * @type {Date}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    muokattu?: Date;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {string}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    tyyppi?: TutkinnonOsaViiteKontekstiDto.TyyppiEnum;
    /**
     *
     * @type {PerusteInfoDto}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    peruste?: PerusteInfoDto;
    /**
     *
     * @type {SuoritustapaDto}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    suoritustapa?: SuoritustapaDto;
    /**
     *
     * @type {PerusteprojektiKevytDto}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    perusteProjekti?: PerusteprojektiKevytDto;
    /**
     *
     * @type {Reference}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    _tutkinnonOsa?: Reference;
    /**
     *
     * @type {TutkinnonOsaDto}
     * @memberof TutkinnonOsaViiteKontekstiDto
     */
    tutkinnonOsa?: TutkinnonOsaDto;
}

/**
 * @export
 * @namespace TutkinnonOsaViiteKontekstiDto
 */
export namespace TutkinnonOsaViiteKontekstiDto {
    /**
     * @export
     * @enum {string}
     */
    export enum TyyppiEnum {
        NORMAALI = 'NORMAALI',
        TUTKE2 = 'TUTKE2',
        REFORMITUTKE2 = 'REFORMI_TUTKE2'
    }
}

/**
 *
 * @export
 * @interface TutkinnonOsaViiteSuppeaDto
 */
export interface TutkinnonOsaViiteSuppeaDto {
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteSuppeaDto
     */
    id?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteSuppeaDto
     */
    laajuus?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteSuppeaDto
     */
    laajuusMaksimi?: number;
    /**
     *
     * @type {number}
     * @memberof TutkinnonOsaViiteSuppeaDto
     */
    jarjestys?: number;
    /**
     *
     * @type {Reference}
     * @memberof TutkinnonOsaViiteSuppeaDto
     */
    tutkinnonOsa?: Reference;
}

/**
 *
 * @export
 * @interface TutkintonimikeKoodiDto
 */
export interface TutkintonimikeKoodiDto {
    /**
     *
     * @type {number}
     * @memberof TutkintonimikeKoodiDto
     */
    id?: number;
    /**
     *
     * @type {Reference}
     * @memberof TutkintonimikeKoodiDto
     */
    peruste?: Reference;
    /**
     *
     * @type {string}
     * @memberof TutkintonimikeKoodiDto
     */
    tutkinnonOsaUri?: string;
    /**
     *
     * @type {string}
     * @memberof TutkintonimikeKoodiDto
     */
    tutkinnonOsaArvo?: string;
    /**
     *
     * @type {string}
     * @memberof TutkintonimikeKoodiDto
     */
    osaamisalaUri?: string;
    /**
     *
     * @type {string}
     * @memberof TutkintonimikeKoodiDto
     */
    osaamisalaArvo?: string;
    /**
     *
     * @type {string}
     * @memberof TutkintonimikeKoodiDto
     */
    tutkintonimikeUri?: string;
    /**
     *
     * @type {string}
     * @memberof TutkintonimikeKoodiDto
     */
    tutkintonimikeArvo?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof TutkintonimikeKoodiDto
     */
    nimi?: { [key: string]: string; };
}

/**
 *
 * @export
 * @interface TyoryhmaHenkiloDto
 */
export interface TyoryhmaHenkiloDto {
    /**
     *
     * @type {number}
     * @memberof TyoryhmaHenkiloDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof TyoryhmaHenkiloDto
     */
    kayttajaOid?: string;
    /**
     *
     * @type {string}
     * @memberof TyoryhmaHenkiloDto
     */
    nimi?: string;
}

/**
 *
 * @export
 * @interface ValidationDto
 */
export interface ValidationDto {
    /**
     *
     * @type {PerusteprojektiListausDto}
     * @memberof ValidationDto
     */
    perusteprojekti?: PerusteprojektiListausDto;
    /**
     *
     * @type {Date}
     * @memberof ValidationDto
     */
    lastCheck?: Date;
    /**
     *
     * @type {boolean}
     * @memberof ValidationDto
     */
    vaihtoOk?: boolean;
    /**
     *
     * @type {Array<ValidointiStatusInfoDto>}
     * @memberof ValidationDto
     */
    infot?: Array<ValidointiStatusInfoDto>;
}

/**
 *
 * @export
 * @interface Validointi
 */
export interface Validointi {
    /**
     *
     * @type {Array<Ongelma>}
     * @memberof Validointi
     */
    ongelmat?: Array<Ongelma>;
    /**
     *
     * @type {number}
     * @memberof Validointi
     */
    laskettuLaajuus?: number;
    /**
     *
     * @type {number}
     * @memberof Validointi
     */
    sisakkaisiaOsaamisalaryhmia?: number;
}

/**
 *
 * @export
 * @interface ValidointiStatusInfoDto
 */
export interface ValidointiStatusInfoDto {
    /**
     *
     * @type {string}
     * @memberof ValidointiStatusInfoDto
     */
    viesti?: string;
    /**
     *
     * @type {RakenneValidointiDto}
     * @memberof ValidointiStatusInfoDto
     */
    validointi?: RakenneValidointiDto;
    /**
     *
     * @type {Array<TekstiPalanen>}
     * @memberof ValidointiStatusInfoDto
     */
    nimet?: Array<TekstiPalanen>;
    /**
     *
     * @type {string}
     * @memberof ValidointiStatusInfoDto
     */
    suoritustapa?: ValidointiStatusInfoDto.SuoritustapaEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof ValidointiStatusInfoDto
     */
    kieli?: Array<ValidointiStatusInfoDto.KieliEnum>;
}

/**
 * @export
 * @namespace ValidointiStatusInfoDto
 */
export namespace ValidointiStatusInfoDto {
    /**
     * @export
     * @enum {string}
     */
    export enum SuoritustapaEnum {
        OPS = 'OPS',
        NAYTTO = 'NAYTTO',
        REFORMI = 'REFORMI',
        PERUSOPETUS = 'PERUSOPETUS',
        LISAOPETUS = 'LISAOPETUS',
        VARHAISKASVATUS = 'VARHAISKASVATUS',
        OPAS = 'OPAS',
        ESIOPETUS = 'ESIOPETUS',
        AIPE = 'AIPE',
        TPO = 'TPO',
        LUKIOKOULUTUS = 'LUKIOKOULUTUS',
        LUKIOKOULUTUS2019 = 'LUKIOKOULUTUS2019'
    }
    /**
     * @export
     * @enum {string}
     */
    export enum KieliEnum {
        FI = 'FI',
        SV = 'SV',
        SE = 'SE',
        RU = 'RU',
        EN = 'EN'
    }
}

/**
 *
 * @export
 * @interface ValmaTelmaSisaltoDto
 */
export interface ValmaTelmaSisaltoDto {
    /**
     *
     * @type {number}
     * @memberof ValmaTelmaSisaltoDto
     */
    id?: number;
    /**
     *
     * @type {OsaamisenArviointiDto}
     * @memberof ValmaTelmaSisaltoDto
     */
    osaamisenarviointi?: OsaamisenArviointiDto;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof ValmaTelmaSisaltoDto
     */
    osaamisenarviointiTekstina?: LokalisoituTekstiDto;
    /**
     *
     * @type {Array<OsaamisenTavoiteDto>}
     * @memberof ValmaTelmaSisaltoDto
     */
    osaamistavoite?: Array<OsaamisenTavoiteDto>;
}

/**
 *
 * @export
 * @interface VuosiluokkaKokonaisuudenLaajaalainenOsaaminenDto
 */
export interface VuosiluokkaKokonaisuudenLaajaalainenOsaaminenDto {
    /**
     *
     * @type {number}
     * @memberof VuosiluokkaKokonaisuudenLaajaalainenOsaaminenDto
     */
    id?: number;
    /**
     *
     * @type {Reference}
     * @memberof VuosiluokkaKokonaisuudenLaajaalainenOsaaminenDto
     */
    laajaalainenOsaaminen?: Reference;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof VuosiluokkaKokonaisuudenLaajaalainenOsaaminenDto
     */
    kuvaus?: LokalisoituTekstiDto;
}

/**
 *
 * @export
 * @interface VuosiluokkaKokonaisuusDto
 */
export interface VuosiluokkaKokonaisuusDto {
    /**
     *
     * @type {number}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    tunniste?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    vuosiluokat?: Array<VuosiluokkaKokonaisuusDto.VuosiluokatEnum>;
    /**
     *
     * @type {LokalisoituTekstiDto}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    nimi?: LokalisoituTekstiDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    siirtymaEdellisesta?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    tehtava?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    siirtymaSeuraavaan?: TekstiOsaDto;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    laajaalainenOsaaminen?: TekstiOsaDto;
    /**
     *
     * @type {Array<VuosiluokkaKokonaisuudenLaajaalainenOsaaminenDto>}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    laajaalaisetOsaamiset?: Array<VuosiluokkaKokonaisuudenLaajaalainenOsaaminenDto>;
    /**
     *
     * @type {TekstiOsaDto}
     * @memberof VuosiluokkaKokonaisuusDto
     */
    paikallisestiPaatettavatAsiat?: TekstiOsaDto;
}

/**
 * @export
 * @namespace VuosiluokkaKokonaisuusDto
 */
export namespace VuosiluokkaKokonaisuusDto {
    /**
     * @export
     * @enum {string}
     */
    export enum VuosiluokatEnum {
        _1 = 'VUOSILUOKKA_1',
        _2 = 'VUOSILUOKKA_2',
        _3 = 'VUOSILUOKKA_3',
        _4 = 'VUOSILUOKKA_4',
        _5 = 'VUOSILUOKKA_5',
        _6 = 'VUOSILUOKKA_6',
        _7 = 'VUOSILUOKKA_7',
        _8 = 'VUOSILUOKKA_8',
        _9 = 'VUOSILUOKKA_9'
    }
}

/**
 * ArviointiasteikotApi - axios parameter creator
 * @export
 */
export const ArviointiasteikotApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    get (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling get.')
      }
      const localVarPath = `/arviointiasteikot/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAll (options: any = {}): RequestArgs {
      const localVarPath = `/arviointiasteikot`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {Array<ArviointiAsteikkoDto>} [ArviointiAsteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateArviointiasteikot (ArviointiAsteikkoDto?: Array<ArviointiAsteikkoDto>, options: any = {}): RequestArgs {
      const localVarPath = `/arviointiasteikot`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Array&lt;ArviointiAsteikkoDto&gt;' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(ArviointiAsteikkoDto || {}) : (ArviointiAsteikkoDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * ArviointiasteikotApi - functional programming interface
 * @export
 */
export const ArviointiasteikotApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    get (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ArviointiAsteikkoDto> {
      const localVarAxiosArgs = ArviointiasteikotApiAxiosParamCreator(configuration).get(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAll (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArviointiAsteikkoDto>> {
      const localVarAxiosArgs = ArviointiasteikotApiAxiosParamCreator(configuration).getAll(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {Array<ArviointiAsteikkoDto>} [ArviointiAsteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateArviointiasteikot (ArviointiAsteikkoDto?: Array<ArviointiAsteikkoDto>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ArviointiAsteikkoDto>> {
      const localVarAxiosArgs = ArviointiasteikotApiAxiosParamCreator(configuration).updateArviointiasteikot(ArviointiAsteikkoDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * ArviointiasteikotApi - factory interface
 * @export
 */
export const ArviointiasteikotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    get (id: number, options?: any) {
      return ArviointiasteikotApiFp(configuration).get(id, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAll (options?: any) {
      return ArviointiasteikotApiFp(configuration).getAll(options)(axios, basePath)
    },
    /**
         *
         * @param {Array<ArviointiAsteikkoDto>} [ArviointiAsteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateArviointiasteikot (ArviointiAsteikkoDto?: Array<ArviointiAsteikkoDto>, options?: any) {
      return ArviointiasteikotApiFp(configuration).updateArviointiasteikot(ArviointiAsteikkoDto, options)(axios, basePath)
    }
  }
}

/**
 * ArviointiasteikotApi - object-oriented interface
 * @export
 * @class ArviointiasteikotApi
 * @extends {BaseAPI}
 */
export class ArviointiasteikotApi extends BaseAPI {
  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArviointiasteikotApi
     */
  public get (id: number, options?: any) {
    return ArviointiasteikotApiFp(this.configuration).get(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArviointiasteikotApi
     */
  public getAll (options?: any) {
    return ArviointiasteikotApiFp(this.configuration).getAll(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {Array<ArviointiAsteikkoDto>} [ArviointiAsteikkoDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArviointiasteikotApi
     */
  public updateArviointiasteikot (ArviointiAsteikkoDto?: Array<ArviointiAsteikkoDto>, options?: any) {
    return ArviointiasteikotApiFp(this.configuration).updateArviointiasteikot(ArviointiAsteikkoDto, options)(this.axios, this.basePath)
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {OpasLuontiDto} [OpasLuontiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOpas (OpasLuontiDto?: OpasLuontiDto, options: any = {}): RequestArgs {
      const localVarPath = `/oppaat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'OpasLuontiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(OpasLuontiDto || {}) : (OpasLuontiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {PerusteprojektiLuontiDto} [PerusteprojektiLuontiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addPerusteprojekti (PerusteprojektiLuontiDto?: PerusteprojektiLuontiDto, options: any = {}): RequestArgs {
      const localVarPath = `/perusteprojektit`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'PerusteprojektiLuontiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(PerusteprojektiLuontiDto || {}) : (PerusteprojektiLuontiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    alarelaatio (koodi: string, options: any = {}): RequestArgs {
      // verify required parameter 'koodi' is not null or undefined
      if (koodi === null || koodi === undefined) {
        throw new RequiredError('koodi', 'Required parameter koodi was null or undefined when calling alarelaatio.')
      }
      const localVarPath = `/koodisto/relaatio/sisaltyy-alakoodit/{koodi}`
        .replace(`{${'koodi'}}`, encodeURIComponent(String(koodi)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKoulutusalat (options: any = {}): RequestArgs {
      const localVarPath = `/koulutusalat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOpintoalat (options: any = {}): RequestArgs {
      const localVarPath = `/opintoalat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary oppaiden haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {string} [nimi]
         * @param {string} [kieli] perusteen nimen kieli
         * @param {string} [diaarinumero]
         * @param {number} [muokattu] muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOppaat (sivu?: number, sivukoko?: number, nimi?: string, kieli?: string, diaarinumero?: string, muokattu?: number, options: any = {}): RequestArgs {
      const localVarPath = `/oppaat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sivu !== undefined) {
        localVarQueryParameter['sivu'] = sivu
      }

      if (sivukoko !== undefined) {
        localVarQueryParameter['sivukoko'] = sivukoko
      }

      if (nimi !== undefined) {
        localVarQueryParameter['nimi'] = nimi
      }

      if (kieli !== undefined) {
        localVarQueryParameter['kieli'] = kieli
      }

      if (diaarinumero !== undefined) {
        localVarQueryParameter['diaarinumero'] = diaarinumero
      }

      if (muokattu !== undefined) {
        localVarQueryParameter['muokattu'] = muokattu
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOppaatKevyt (options: any = {}): RequestArgs {
      const localVarPath = `/oppaat/projektit`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteprojektit (options: any = {}): RequestArgs {
      const localVarPath = `/perusteprojektit/info`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteprojektitKevyt (options: any = {}): RequestArgs {
      const localVarPath = `/perusteprojektit/perusteHaku`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getJasenetTiedot (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getJasenetTiedot.')
      }
      const localVarPath = `/perusteprojektit/{id}/jasenet/tiedot`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOmatPerusteprojektit (options: any = {}): RequestArgs {
      const localVarPath = `/perusteprojektit/omat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOrganisaatioRyhmat (options: any = {}): RequestArgs {
      const localVarPath = `/ulkopuoliset/organisaatioryhmat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOrganisaatioRyhmatByOid (oid: string, options: any = {}): RequestArgs {
      // verify required parameter 'oid' is not null or undefined
      if (oid === null || oid === undefined) {
        throw new RequiredError('oid', 'Required parameter oid was null or undefined when calling getOrganisaatioRyhmatByOid.')
      }
      const localVarPath = `/ulkopuoliset/organisaatioryhmat/{oid}`
        .replace(`{${'oid'}}`, encodeURIComponent(String(oid)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerustenosienTyoryhmat (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerustenosienTyoryhmat.')
      }
      const localVarPath = `/perusteprojektit/{id}/perusteenosientyoryhmat`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojekti (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojekti.')
      }
      const localVarPath = `/perusteprojektit/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {Ref} diaarinumero
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiByDiaarinumero (diaarinumero: Ref, options: any = {}): RequestArgs {
      // verify required parameter 'diaarinumero' is not null or undefined
      if (diaarinumero === null || diaarinumero === undefined) {
        throw new RequiredError('diaarinumero', 'Required parameter diaarinumero was null or undefined when calling getPerusteprojektiByDiaarinumero.')
      }
      const localVarPath = `/perusteprojektit/diaarinumero/uniikki/{diaarinumero}`
        .replace(`{${'diaarinumero'}}`, encodeURIComponent(String(diaarinumero)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiJasenet (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojektiJasenet.')
      }
      const localVarPath = `/perusteprojektit/{id}/jasenet`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} sivu
         * @param {number} sivukoko
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiKoodiongelmat (sivu: number, sivukoko: number, options: any = {}): RequestArgs {
      // verify required parameter 'sivu' is not null or undefined
      if (sivu === null || sivu === undefined) {
        throw new RequiredError('sivu', 'Required parameter sivu was null or undefined when calling getPerusteprojektiKoodiongelmat.')
      }
      // verify required parameter 'sivukoko' is not null or undefined
      if (sivukoko === null || sivukoko === undefined) {
        throw new RequiredError('sivukoko', 'Required parameter sivukoko was null or undefined when calling getPerusteprojektiKoodiongelmat.')
      }
      const localVarPath = `/perusteprojektit/koodiongelmat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sivu !== undefined) {
        localVarQueryParameter['sivu'] = sivu
      }

      if (sivukoko !== undefined) {
        localVarQueryParameter['sivukoko'] = sivukoko
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiOikeudet (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojektiOikeudet.')
      }
      const localVarPath = `/perusteprojektit/{id}/oikeudet`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTilat (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojektiTilat.')
      }
      const localVarPath = `/perusteprojektit/{id}/tilat`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} nimi
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTyoryhmaByNimi (nimi: string, id: number, options: any = {}): RequestArgs {
      // verify required parameter 'nimi' is not null or undefined
      if (nimi === null || nimi === undefined) {
        throw new RequiredError('nimi', 'Required parameter nimi was null or undefined when calling getPerusteprojektiTyoryhmaByNimi.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojektiTyoryhmaByNimi.')
      }
      const localVarPath = `/perusteprojektit/{id}/tyoryhma/{nimi}`
        .replace(`{${'nimi'}}`, encodeURIComponent(String(nimi)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTyoryhmat (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojektiTyoryhmat.')
      }
      const localVarPath = `/perusteprojektit/{id}/tyoryhma`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiValidointi (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojektiValidointi.')
      }
      const localVarPath = `/perusteprojektit/{id}/validoi`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} pid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektinTyoryhma (id: number, pid: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteprojektinTyoryhma.')
      }
      // verify required parameter 'pid' is not null or undefined
      if (pid === null || pid === undefined) {
        throw new RequiredError('pid', 'Required parameter pid was null or undefined when calling getPerusteprojektinTyoryhma.')
      }
      const localVarPath = `/perusteprojektit/{id}/perusteenosat/{pid}/tyoryhmat`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'pid'}}`, encodeURIComponent(String(pid)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} sivu
         * @param {number} sivukoko
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getVirheellisetPerusteprojektit (sivu: number, sivukoko: number, options: any = {}): RequestArgs {
      // verify required parameter 'sivu' is not null or undefined
      if (sivu === null || sivu === undefined) {
        throw new RequiredError('sivu', 'Required parameter sivu was null or undefined when calling getVirheellisetPerusteprojektit.')
      }
      // verify required parameter 'sivukoko' is not null or undefined
      if (sivukoko === null || sivukoko === undefined) {
        throw new RequiredError('sivukoko', 'Required parameter sivukoko was null or undefined when calling getVirheellisetPerusteprojektit.')
      }
      const localVarPath = `/perusteprojektit/virheelliset`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sivu !== undefined) {
        localVarQueryParameter['sivu'] = sivu
      }

      if (sivukoko !== undefined) {
        localVarQueryParameter['sivukoko'] = sivukoko
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} [haku]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kaikki (koodisto: string, haku?: string, options: any = {}): RequestArgs {
      // verify required parameter 'koodisto' is not null or undefined
      if (koodisto === null || koodisto === undefined) {
        throw new RequiredError('koodisto', 'Required parameter koodisto was null or undefined when calling kaikki.')
      }
      const localVarPath = `/koodisto/{koodisto}`
        .replace(`{${'koodisto'}}`, encodeURIComponent(String(koodisto)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (haku !== undefined) {
        localVarQueryParameter['haku'] = haku
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} [haku]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kaikkiSivutettuna (koodisto: string, haku?: string, options: any = {}): RequestArgs {
      // verify required parameter 'koodisto' is not null or undefined
      if (koodisto === null || koodisto === undefined) {
        throw new RequiredError('koodisto', 'Required parameter koodisto was null or undefined when calling kaikkiSivutettuna.')
      }
      const localVarPath = `/koodisto/sivutettu/{koodisto}`
        .replace(`{${'koodisto'}}`, encodeURIComponent(String(koodisto)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (haku !== undefined) {
        localVarQueryParameter['haku'] = haku
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {LokalisoituTekstiDto} [LokalisoituTekstiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lisaaUusiKoodi (koodisto: string, LokalisoituTekstiDto?: LokalisoituTekstiDto, options: any = {}): RequestArgs {
      // verify required parameter 'koodisto' is not null or undefined
      if (koodisto === null || koodisto === undefined) {
        throw new RequiredError('koodisto', 'Required parameter koodisto was null or undefined when calling lisaaUusiKoodi.')
      }
      const localVarPath = `/koodisto/{koodisto}`
        .replace(`{${'koodisto'}}`, encodeURIComponent(String(koodisto)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'LokalisoituTekstiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(LokalisoituTekstiDto || {}) : (LokalisoituTekstiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} perusteenOsaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    omistaaPerusteprojektiOsan (id: number, perusteenOsaId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling omistaaPerusteprojektiOsan.')
      }
      // verify required parameter 'perusteenOsaId' is not null or undefined
      if (perusteenOsaId === null || perusteenOsaId === undefined) {
        throw new RequiredError('perusteenOsaId', 'Required parameter perusteenOsaId was null or undefined when calling omistaaPerusteprojektiOsan.')
      }
      const localVarPath = `/perusteprojektit/{id}/oikeudet/{perusteenOsaId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'perusteenOsaId'}}`, encodeURIComponent(String(perusteenOsaId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {Array<TyoryhmaHenkiloDto>} [TyoryhmaHenkiloDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postMultipleTyoryhmaHenkilot (id: number, TyoryhmaHenkiloDto?: Array<TyoryhmaHenkiloDto>, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling postMultipleTyoryhmaHenkilot.')
      }
      const localVarPath = `/perusteprojektit/{id}/tyoryhma`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Array&lt;TyoryhmaHenkiloDto&gt;' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TyoryhmaHenkiloDto || {}) : (TyoryhmaHenkiloDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {string} nimi
         * @param {Array<string>} [request_body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postMultipleTyoryhmaHenkilotToTyoryhma (id: number, nimi: string, request_body?: Array<string>, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling postMultipleTyoryhmaHenkilotToTyoryhma.')
      }
      // verify required parameter 'nimi' is not null or undefined
      if (nimi === null || nimi === undefined) {
        throw new RequiredError('nimi', 'Required parameter nimi was null or undefined when calling postMultipleTyoryhmaHenkilotToTyoryhma.')
      }
      const localVarPath = `/perusteprojektit/{id}/tyoryhma/{nimi}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'nimi'}}`, encodeURIComponent(String(nimi)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Array&lt;string&gt;' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(request_body || {}) : (request_body || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} pid
         * @param {Array<string>} [request_body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postPerusteenOsaTyoryhma (id: number, pid: number, request_body?: Array<string>, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling postPerusteenOsaTyoryhma.')
      }
      // verify required parameter 'pid' is not null or undefined
      if (pid === null || pid === undefined) {
        throw new RequiredError('pid', 'Required parameter pid was null or undefined when calling postPerusteenOsaTyoryhma.')
      }
      const localVarPath = `/perusteprojektit/{id}/perusteenosat/{pid}/tyoryhmat`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'pid'}}`, encodeURIComponent(String(pid)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Array&lt;string&gt;' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(request_body || {}) : (request_body || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {string} nimi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeTyoryhmat (id: number, nimi: string, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling removeTyoryhmat.')
      }
      // verify required parameter 'nimi' is not null or undefined
      if (nimi === null || nimi === undefined) {
        throw new RequiredError('nimi', 'Required parameter nimi was null or undefined when calling removeTyoryhmat.')
      }
      const localVarPath = `/perusteprojektit/{id}/tyoryhma/{nimi}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'nimi'}}`, encodeURIComponent(String(nimi)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {PerusteprojektiDto} [PerusteprojektiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteprojekti (id: number, PerusteprojektiDto?: PerusteprojektiDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updatePerusteprojekti.')
      }
      const localVarPath = `/perusteprojektit/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'PerusteprojektiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(PerusteprojektiDto || {}) : (PerusteprojektiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {string} tila
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteprojektiTila (id: number, tila: string, TiedoteDto?: TiedoteDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updatePerusteprojektiTila.')
      }
      // verify required parameter 'tila' is not null or undefined
      if (tila === null || tila === undefined) {
        throw new RequiredError('tila', 'Required parameter tila was null or undefined when calling updatePerusteprojektiTila.')
      }
      const localVarPath = `/perusteprojektit/{id}/tila/{tila}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'tila'}}`, encodeURIComponent(String(tila)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'TiedoteDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TiedoteDto || {}) : (TiedoteDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    yksi (koodisto: string, koodi: string, options: any = {}): RequestArgs {
      // verify required parameter 'koodisto' is not null or undefined
      if (koodisto === null || koodisto === undefined) {
        throw new RequiredError('koodisto', 'Required parameter koodisto was null or undefined when calling yksi.')
      }
      // verify required parameter 'koodi' is not null or undefined
      if (koodi === null || koodi === undefined) {
        throw new RequiredError('koodi', 'Required parameter koodi was null or undefined when calling yksi.')
      }
      const localVarPath = `/koodisto/{koodisto}/{koodi}`
        .replace(`{${'koodisto'}}`, encodeURIComponent(String(koodisto)))
        .replace(`{${'koodi'}}`, encodeURIComponent(String(koodi)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    ylarelaatio (koodi: string, options: any = {}): RequestArgs {
      // verify required parameter 'koodi' is not null or undefined
      if (koodi === null || koodi === undefined) {
        throw new RequiredError('koodi', 'Required parameter koodi was null or undefined when calling ylarelaatio.')
      }
      const localVarPath = `/koodisto/relaatio/sisaltyy-ylakoodit/{koodi}`
        .replace(`{${'koodi'}}`, encodeURIComponent(String(koodi)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {OpasLuontiDto} [OpasLuontiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOpas (OpasLuontiDto?: OpasLuontiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OpasDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).addOpas(OpasLuontiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {PerusteprojektiLuontiDto} [PerusteprojektiLuontiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addPerusteprojekti (PerusteprojektiLuontiDto?: PerusteprojektiLuontiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteprojektiDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).addPerusteprojekti(PerusteprojektiLuontiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    alarelaatio (koodi: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KoodistoKoodiDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).alarelaatio(koodi, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKoulutusalat (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KoulutusalaDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAllKoulutusalat(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOpintoalat (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OpintoalaDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAllOpintoalat(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary oppaiden haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {string} [nimi]
         * @param {string} [kieli] perusteen nimen kieli
         * @param {string} [diaarinumero]
         * @param {number} [muokattu] muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOppaat (sivu?: number, sivukoko?: number, nimi?: string, kieli?: string, diaarinumero?: string, muokattu?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePerusteHakuDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAllOppaat(sivu, sivukoko, nimi, kieli, diaarinumero, muokattu, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOppaatKevyt (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePerusteprojektiKevytDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAllOppaatKevyt(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteprojektit (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteprojektiInfoDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAllPerusteprojektit(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteprojektitKevyt (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePerusteprojektiKevytDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAllPerusteprojektitKevyt(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getJasenetTiedot (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CombinedDtoKayttajanTietoDtoKayttajanProjektitiedotDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getJasenetTiedot(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOmatPerusteprojektit (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteprojektiListausDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getOmatPerusteprojektit(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOrganisaatioRyhmat (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getOrganisaatioRyhmat(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOrganisaatioRyhmatByOid (oid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getOrganisaatioRyhmatByOid(oid, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerustenosienTyoryhmat (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteenOsaTyoryhmaDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerustenosienTyoryhmat(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojekti (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteprojektiDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojekti(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {Ref} diaarinumero
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiByDiaarinumero (diaarinumero: Ref, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiByDiaarinumero(diaarinumero, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiJasenet (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KayttajanTietoDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiJasenet(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} sivu
         * @param {number} sivukoko
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiKoodiongelmat (sivu: number, sivukoko: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageKoulutuskoodiStatusDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiKoodiongelmat(sivu, sivukoko, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiOikeudet (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: Array<string>; }> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiOikeudet(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTilat (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiTilat(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} nimi
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTyoryhmaByNimi (nimi: string, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TyoryhmaHenkiloDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiTyoryhmaByNimi(nimi, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTyoryhmat (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TyoryhmaHenkiloDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiTyoryhmat(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiValidointi (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TilaUpdateStatus> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektiValidointi(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} pid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektinTyoryhma (id: number, pid: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getPerusteprojektinTyoryhma(id, pid, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} sivu
         * @param {number} sivukoko
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getVirheellisetPerusteprojektit (sivu: number, sivukoko: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageValidationDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getVirheellisetPerusteprojektit(sivu, sivukoko, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} [haku]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kaikki (koodisto: string, haku?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KoodistoKoodiDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).kaikki(koodisto, haku, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} [haku]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kaikkiSivutettuna (koodisto: string, haku?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageKoodistoKoodiDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).kaikkiSivutettuna(koodisto, haku, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {LokalisoituTekstiDto} [LokalisoituTekstiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lisaaUusiKoodi (koodisto: string, LokalisoituTekstiDto?: LokalisoituTekstiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<KoodistoKoodiDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).lisaaUusiKoodi(koodisto, LokalisoituTekstiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} perusteenOsaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    omistaaPerusteprojektiOsan (id: number, perusteenOsaId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OmistajaDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).omistaaPerusteprojektiOsan(id, perusteenOsaId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {Array<TyoryhmaHenkiloDto>} [TyoryhmaHenkiloDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postMultipleTyoryhmaHenkilot (id: number, TyoryhmaHenkiloDto?: Array<TyoryhmaHenkiloDto>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TyoryhmaHenkiloDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postMultipleTyoryhmaHenkilot(id, TyoryhmaHenkiloDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {string} nimi
         * @param {Array<string>} [request_body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postMultipleTyoryhmaHenkilotToTyoryhma (id: number, nimi: string, request_body?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TyoryhmaHenkiloDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postMultipleTyoryhmaHenkilotToTyoryhma(id, nimi, request_body, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} pid
         * @param {Array<string>} [request_body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postPerusteenOsaTyoryhma (id: number, pid: number, request_body?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postPerusteenOsaTyoryhma(id, pid, request_body, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {string} nimi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeTyoryhmat (id: number, nimi: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TyoryhmaHenkiloDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).removeTyoryhmat(id, nimi, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {PerusteprojektiDto} [PerusteprojektiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteprojekti (id: number, PerusteprojektiDto?: PerusteprojektiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updatePerusteprojekti(id, PerusteprojektiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {string} tila
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteprojektiTila (id: number, tila: string, TiedoteDto?: TiedoteDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updatePerusteprojektiTila(id, tila, TiedoteDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    yksi (koodisto: string, koodi: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<KoodistoKoodiDto> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).yksi(koodisto, koodi, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    ylarelaatio (koodi: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KoodistoKoodiDto>> {
      const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).ylarelaatio(koodi, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {OpasLuontiDto} [OpasLuontiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOpas (OpasLuontiDto?: OpasLuontiDto, options?: any) {
      return DefaultApiFp(configuration).addOpas(OpasLuontiDto, options)(axios, basePath)
    },
    /**
         *
         * @param {PerusteprojektiLuontiDto} [PerusteprojektiLuontiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addPerusteprojekti (PerusteprojektiLuontiDto?: PerusteprojektiLuontiDto, options?: any) {
      return DefaultApiFp(configuration).addPerusteprojekti(PerusteprojektiLuontiDto, options)(axios, basePath)
    },
    /**
         *
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    alarelaatio (koodi: string, options?: any) {
      return DefaultApiFp(configuration).alarelaatio(koodi, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKoulutusalat (options?: any) {
      return DefaultApiFp(configuration).getAllKoulutusalat(options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOpintoalat (options?: any) {
      return DefaultApiFp(configuration).getAllOpintoalat(options)(axios, basePath)
    },
    /**
         *
         * @summary oppaiden haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {string} [nimi]
         * @param {string} [kieli] perusteen nimen kieli
         * @param {string} [diaarinumero]
         * @param {number} [muokattu] muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOppaat (sivu?: number, sivukoko?: number, nimi?: string, kieli?: string, diaarinumero?: string, muokattu?: number, options?: any) {
      return DefaultApiFp(configuration).getAllOppaat(sivu, sivukoko, nimi, kieli, diaarinumero, muokattu, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllOppaatKevyt (options?: any) {
      return DefaultApiFp(configuration).getAllOppaatKevyt(options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteprojektit (options?: any) {
      return DefaultApiFp(configuration).getAllPerusteprojektit(options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteprojektitKevyt (options?: any) {
      return DefaultApiFp(configuration).getAllPerusteprojektitKevyt(options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getJasenetTiedot (id: number, options?: any) {
      return DefaultApiFp(configuration).getJasenetTiedot(id, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOmatPerusteprojektit (options?: any) {
      return DefaultApiFp(configuration).getOmatPerusteprojektit(options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOrganisaatioRyhmat (options?: any) {
      return DefaultApiFp(configuration).getOrganisaatioRyhmat(options)(axios, basePath)
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOrganisaatioRyhmatByOid (oid: string, options?: any) {
      return DefaultApiFp(configuration).getOrganisaatioRyhmatByOid(oid, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerustenosienTyoryhmat (id: number, options?: any) {
      return DefaultApiFp(configuration).getPerustenosienTyoryhmat(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojekti (id: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojekti(id, options)(axios, basePath)
    },
    /**
         *
         * @param {Ref} diaarinumero
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiByDiaarinumero (diaarinumero: Ref, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiByDiaarinumero(diaarinumero, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiJasenet (id: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiJasenet(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} sivu
         * @param {number} sivukoko
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiKoodiongelmat (sivu: number, sivukoko: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiKoodiongelmat(sivu, sivukoko, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiOikeudet (id: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiOikeudet(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTilat (id: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiTilat(id, options)(axios, basePath)
    },
    /**
         *
         * @param {string} nimi
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTyoryhmaByNimi (nimi: string, id: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiTyoryhmaByNimi(nimi, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiTyoryhmat (id: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiTyoryhmat(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektiValidointi (id: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektiValidointi(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} pid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteprojektinTyoryhma (id: number, pid: number, options?: any) {
      return DefaultApiFp(configuration).getPerusteprojektinTyoryhma(id, pid, options)(axios, basePath)
    },
    /**
         *
         * @param {number} sivu
         * @param {number} sivukoko
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getVirheellisetPerusteprojektit (sivu: number, sivukoko: number, options?: any) {
      return DefaultApiFp(configuration).getVirheellisetPerusteprojektit(sivu, sivukoko, options)(axios, basePath)
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} [haku]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kaikki (koodisto: string, haku?: string, options?: any) {
      return DefaultApiFp(configuration).kaikki(koodisto, haku, options)(axios, basePath)
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} [haku]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kaikkiSivutettuna (koodisto: string, haku?: string, options?: any) {
      return DefaultApiFp(configuration).kaikkiSivutettuna(koodisto, haku, options)(axios, basePath)
    },
    /**
         *
         * @param {string} koodisto
         * @param {LokalisoituTekstiDto} [LokalisoituTekstiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lisaaUusiKoodi (koodisto: string, LokalisoituTekstiDto?: LokalisoituTekstiDto, options?: any) {
      return DefaultApiFp(configuration).lisaaUusiKoodi(koodisto, LokalisoituTekstiDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} perusteenOsaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    omistaaPerusteprojektiOsan (id: number, perusteenOsaId: number, options?: any) {
      return DefaultApiFp(configuration).omistaaPerusteprojektiOsan(id, perusteenOsaId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {Array<TyoryhmaHenkiloDto>} [TyoryhmaHenkiloDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postMultipleTyoryhmaHenkilot (id: number, TyoryhmaHenkiloDto?: Array<TyoryhmaHenkiloDto>, options?: any) {
      return DefaultApiFp(configuration).postMultipleTyoryhmaHenkilot(id, TyoryhmaHenkiloDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {string} nimi
         * @param {Array<string>} [request_body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postMultipleTyoryhmaHenkilotToTyoryhma (id: number, nimi: string, request_body?: Array<string>, options?: any) {
      return DefaultApiFp(configuration).postMultipleTyoryhmaHenkilotToTyoryhma(id, nimi, request_body, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} pid
         * @param {Array<string>} [request_body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    postPerusteenOsaTyoryhma (id: number, pid: number, request_body?: Array<string>, options?: any) {
      return DefaultApiFp(configuration).postPerusteenOsaTyoryhma(id, pid, request_body, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {string} nimi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeTyoryhmat (id: number, nimi: string, options?: any) {
      return DefaultApiFp(configuration).removeTyoryhmat(id, nimi, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {PerusteprojektiDto} [PerusteprojektiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteprojekti (id: number, PerusteprojektiDto?: PerusteprojektiDto, options?: any) {
      return DefaultApiFp(configuration).updatePerusteprojekti(id, PerusteprojektiDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {string} tila
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteprojektiTila (id: number, tila: string, TiedoteDto?: TiedoteDto, options?: any) {
      return DefaultApiFp(configuration).updatePerusteprojektiTila(id, tila, TiedoteDto, options)(axios, basePath)
    },
    /**
         *
         * @param {string} koodisto
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    yksi (koodisto: string, koodi: string, options?: any) {
      return DefaultApiFp(configuration).yksi(koodisto, koodi, options)(axios, basePath)
    },
    /**
         *
         * @param {string} koodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    ylarelaatio (koodi: string, options?: any) {
      return DefaultApiFp(configuration).ylarelaatio(koodi, options)(axios, basePath)
    }
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
     *
     * @param {OpasLuontiDto} [OpasLuontiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public addOpas (OpasLuontiDto?: OpasLuontiDto, options?: any) {
    return DefaultApiFp(this.configuration).addOpas(OpasLuontiDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {PerusteprojektiLuontiDto} [PerusteprojektiLuontiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public addPerusteprojekti (PerusteprojektiLuontiDto?: PerusteprojektiLuontiDto, options?: any) {
    return DefaultApiFp(this.configuration).addPerusteprojekti(PerusteprojektiLuontiDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} koodi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public alarelaatio (koodi: string, options?: any) {
    return DefaultApiFp(this.configuration).alarelaatio(koodi, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getAllKoulutusalat (options?: any) {
    return DefaultApiFp(this.configuration).getAllKoulutusalat(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getAllOpintoalat (options?: any) {
    return DefaultApiFp(this.configuration).getAllOpintoalat(options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary oppaiden haku
     * @param {number} [sivu]
     * @param {number} [sivukoko]
     * @param {string} [nimi]
     * @param {string} [kieli] perusteen nimen kieli
     * @param {string} [diaarinumero]
     * @param {number} [muokattu] muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getAllOppaat (sivu?: number, sivukoko?: number, nimi?: string, kieli?: string, diaarinumero?: string, muokattu?: number, options?: any) {
    return DefaultApiFp(this.configuration).getAllOppaat(sivu, sivukoko, nimi, kieli, diaarinumero, muokattu, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getAllOppaatKevyt (options?: any) {
    return DefaultApiFp(this.configuration).getAllOppaatKevyt(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getAllPerusteprojektit (options?: any) {
    return DefaultApiFp(this.configuration).getAllPerusteprojektit(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getAllPerusteprojektitKevyt (options?: any) {
    return DefaultApiFp(this.configuration).getAllPerusteprojektitKevyt(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getJasenetTiedot (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getJasenetTiedot(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getOmatPerusteprojektit (options?: any) {
    return DefaultApiFp(this.configuration).getOmatPerusteprojektit(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getOrganisaatioRyhmat (options?: any) {
    return DefaultApiFp(this.configuration).getOrganisaatioRyhmat(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getOrganisaatioRyhmatByOid (oid: string, options?: any) {
    return DefaultApiFp(this.configuration).getOrganisaatioRyhmatByOid(oid, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerustenosienTyoryhmat (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerustenosienTyoryhmat(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojekti (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojekti(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {Ref} diaarinumero
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiByDiaarinumero (diaarinumero: Ref, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiByDiaarinumero(diaarinumero, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiJasenet (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiJasenet(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} sivu
     * @param {number} sivukoko
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiKoodiongelmat (sivu: number, sivukoko: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiKoodiongelmat(sivu, sivukoko, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiOikeudet (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiOikeudet(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiTilat (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiTilat(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} nimi
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiTyoryhmaByNimi (nimi: string, id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiTyoryhmaByNimi(nimi, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiTyoryhmat (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiTyoryhmat(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektiValidointi (id: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektiValidointi(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getPerusteprojektinTyoryhma (id: number, pid: number, options?: any) {
    return DefaultApiFp(this.configuration).getPerusteprojektinTyoryhma(id, pid, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} sivu
     * @param {number} sivukoko
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public getVirheellisetPerusteprojektit (sivu: number, sivukoko: number, options?: any) {
    return DefaultApiFp(this.configuration).getVirheellisetPerusteprojektit(sivu, sivukoko, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} koodisto
     * @param {string} [haku]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public kaikki (koodisto: string, haku?: string, options?: any) {
    return DefaultApiFp(this.configuration).kaikki(koodisto, haku, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} koodisto
     * @param {string} [haku]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public kaikkiSivutettuna (koodisto: string, haku?: string, options?: any) {
    return DefaultApiFp(this.configuration).kaikkiSivutettuna(koodisto, haku, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} koodisto
     * @param {LokalisoituTekstiDto} [LokalisoituTekstiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public lisaaUusiKoodi (koodisto: string, LokalisoituTekstiDto?: LokalisoituTekstiDto, options?: any) {
    return DefaultApiFp(this.configuration).lisaaUusiKoodi(koodisto, LokalisoituTekstiDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} perusteenOsaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public omistaaPerusteprojektiOsan (id: number, perusteenOsaId: number, options?: any) {
    return DefaultApiFp(this.configuration).omistaaPerusteprojektiOsan(id, perusteenOsaId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {Array<TyoryhmaHenkiloDto>} [TyoryhmaHenkiloDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public postMultipleTyoryhmaHenkilot (id: number, TyoryhmaHenkiloDto?: Array<TyoryhmaHenkiloDto>, options?: any) {
    return DefaultApiFp(this.configuration).postMultipleTyoryhmaHenkilot(id, TyoryhmaHenkiloDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {string} nimi
     * @param {Array<string>} [request_body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public postMultipleTyoryhmaHenkilotToTyoryhma (id: number, nimi: string, request_body?: Array<string>, options?: any) {
    return DefaultApiFp(this.configuration).postMultipleTyoryhmaHenkilotToTyoryhma(id, nimi, request_body, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} pid
     * @param {Array<string>} [request_body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public postPerusteenOsaTyoryhma (id: number, pid: number, request_body?: Array<string>, options?: any) {
    return DefaultApiFp(this.configuration).postPerusteenOsaTyoryhma(id, pid, request_body, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {string} nimi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public removeTyoryhmat (id: number, nimi: string, options?: any) {
    return DefaultApiFp(this.configuration).removeTyoryhmat(id, nimi, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {PerusteprojektiDto} [PerusteprojektiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public updatePerusteprojekti (id: number, PerusteprojektiDto?: PerusteprojektiDto, options?: any) {
    return DefaultApiFp(this.configuration).updatePerusteprojekti(id, PerusteprojektiDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {string} tila
     * @param {TiedoteDto} [TiedoteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public updatePerusteprojektiTila (id: number, tila: string, TiedoteDto?: TiedoteDto, options?: any) {
    return DefaultApiFp(this.configuration).updatePerusteprojektiTila(id, tila, TiedoteDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} koodisto
     * @param {string} koodi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public yksi (koodisto: string, koodi: string, options?: any) {
    return DefaultApiFp(this.configuration).yksi(koodisto, koodi, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} koodi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
  public ylarelaatio (koodi: string, options?: any) {
    return DefaultApiFp(this.configuration).ylarelaatio(koodi, options)(this.axios, this.basePath)
  }
}

/**
 * DokumentitApi - axios parameter creator
 * @export
 */
export const DokumentitApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @summary luo dokumentti
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapakoodi
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    createDokumentti (perusteId: number, kieli: string, suoritustapakoodi: string, version: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling createDokumentti.')
      }
      // verify required parameter 'kieli' is not null or undefined
      if (kieli === null || kieli === undefined) {
        throw new RequiredError('kieli', 'Required parameter kieli was null or undefined when calling createDokumentti.')
      }
      // verify required parameter 'suoritustapakoodi' is not null or undefined
      if (suoritustapakoodi === null || suoritustapakoodi === undefined) {
        throw new RequiredError('suoritustapakoodi', 'Required parameter suoritustapakoodi was null or undefined when calling createDokumentti.')
      }
      // verify required parameter 'version' is not null or undefined
      if (version === null || version === undefined) {
        throw new RequiredError('version', 'Required parameter version was null or undefined when calling createDokumentti.')
      }
      const localVarPath = `/dokumentit`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (perusteId !== undefined) {
        localVarQueryParameter['perusteId'] = perusteId
      }

      if (kieli !== undefined) {
        localVarQueryParameter['kieli'] = kieli
      }

      if (suoritustapakoodi !== undefined) {
        localVarQueryParameter['suoritustapakoodi'] = suoritustapakoodi
      }

      if (version !== undefined) {
        localVarQueryParameter['version'] = version
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getDokumentti (fileName: string, options: any = {}): RequestArgs {
      // verify required parameter 'fileName' is not null or undefined
      if (fileName === null || fileName === undefined) {
        throw new RequiredError('fileName', 'Required parameter fileName was null or undefined when calling getDokumentti.')
      }
      const localVarPath = `/dokumentit/{fileName}`
        .replace(`{${'fileName'}}`, encodeURIComponent(String(fileName)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getDokumenttiId.')
      }
      // verify required parameter 'kieli' is not null or undefined
      if (kieli === null || kieli === undefined) {
        throw new RequiredError('kieli', 'Required parameter kieli was null or undefined when calling getDokumenttiId.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling getDokumenttiId.')
      }
      const localVarPath = `/dokumentit/peruste`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (perusteId !== undefined) {
        localVarQueryParameter['perusteId'] = perusteId
      }

      if (kieli !== undefined) {
        localVarQueryParameter['kieli'] = kieli
      }

      if (suoritustapa !== undefined) {
        localVarQueryParameter['suoritustapa'] = suoritustapa
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKVLiiteDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getKVLiiteDokumenttiId.')
      }
      // verify required parameter 'kieli' is not null or undefined
      if (kieli === null || kieli === undefined) {
        throw new RequiredError('kieli', 'Required parameter kieli was null or undefined when calling getKVLiiteDokumenttiId.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling getKVLiiteDokumenttiId.')
      }
      const localVarPath = `/dokumentit/kvliite`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (perusteId !== undefined) {
        localVarQueryParameter['perusteId'] = perusteId
      }

      if (kieli !== undefined) {
        localVarQueryParameter['kieli'] = kieli
      }

      if (suoritustapa !== undefined) {
        localVarQueryParameter['suoritustapa'] = suoritustapa
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLatestDokumentti (perusteId: number, kieli: string, suoritustapa: string, version: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getLatestDokumentti.')
      }
      // verify required parameter 'kieli' is not null or undefined
      if (kieli === null || kieli === undefined) {
        throw new RequiredError('kieli', 'Required parameter kieli was null or undefined when calling getLatestDokumentti.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling getLatestDokumentti.')
      }
      // verify required parameter 'version' is not null or undefined
      if (version === null || version === undefined) {
        throw new RequiredError('version', 'Required parameter version was null or undefined when calling getLatestDokumentti.')
      }
      const localVarPath = `/dokumentit`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (perusteId !== undefined) {
        localVarQueryParameter['perusteId'] = perusteId
      }

      if (kieli !== undefined) {
        localVarQueryParameter['kieli'] = kieli
      }

      if (suoritustapa !== undefined) {
        localVarQueryParameter['suoritustapa'] = suoritustapa
      }

      if (version !== undefined) {
        localVarQueryParameter['version'] = version
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} dokumenttiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    queryDokumenttiTila (dokumenttiId: number, options: any = {}): RequestArgs {
      // verify required parameter 'dokumenttiId' is not null or undefined
      if (dokumenttiId === null || dokumenttiId === undefined) {
        throw new RequiredError('dokumenttiId', 'Required parameter dokumenttiId was null or undefined when calling queryDokumenttiTila.')
      }
      const localVarPath = `/dokumentit/{dokumenttiId}/tila`
        .replace(`{${'dokumenttiId'}}`, encodeURIComponent(String(dokumenttiId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * DokumentitApi - functional programming interface
 * @export
 */
export const DokumentitApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @summary luo dokumentti
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapakoodi
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    createDokumentti (perusteId: number, kieli: string, suoritustapakoodi: string, version: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DokumenttiDto> {
      const localVarAxiosArgs = DokumentitApiAxiosParamCreator(configuration).createDokumentti(perusteId, kieli, suoritustapakoodi, version, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getDokumentti (fileName: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
      const localVarAxiosArgs = DokumentitApiAxiosParamCreator(configuration).getDokumentti(fileName, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
      const localVarAxiosArgs = DokumentitApiAxiosParamCreator(configuration).getDokumenttiId(perusteId, kieli, suoritustapa, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKVLiiteDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<number> {
      const localVarAxiosArgs = DokumentitApiAxiosParamCreator(configuration).getKVLiiteDokumenttiId(perusteId, kieli, suoritustapa, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLatestDokumentti (perusteId: number, kieli: string, suoritustapa: string, version: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DokumenttiDto> {
      const localVarAxiosArgs = DokumentitApiAxiosParamCreator(configuration).getLatestDokumentti(perusteId, kieli, suoritustapa, version, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} dokumenttiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    queryDokumenttiTila (dokumenttiId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DokumenttiDto> {
      const localVarAxiosArgs = DokumentitApiAxiosParamCreator(configuration).queryDokumenttiTila(dokumenttiId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * DokumentitApi - factory interface
 * @export
 */
export const DokumentitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @summary luo dokumentti
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapakoodi
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    createDokumentti (perusteId: number, kieli: string, suoritustapakoodi: string, version: string, options?: any) {
      return DokumentitApiFp(configuration).createDokumentti(perusteId, kieli, suoritustapakoodi, version, options)(axios, basePath)
    },
    /**
         *
         * @param {string} fileName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getDokumentti (fileName: string, options?: any) {
      return DokumentitApiFp(configuration).getDokumentti(fileName, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options?: any) {
      return DokumentitApiFp(configuration).getDokumenttiId(perusteId, kieli, suoritustapa, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKVLiiteDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options?: any) {
      return DokumentitApiFp(configuration).getKVLiiteDokumenttiId(perusteId, kieli, suoritustapa, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} kieli
         * @param {string} suoritustapa
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLatestDokumentti (perusteId: number, kieli: string, suoritustapa: string, version: string, options?: any) {
      return DokumentitApiFp(configuration).getLatestDokumentti(perusteId, kieli, suoritustapa, version, options)(axios, basePath)
    },
    /**
         *
         * @param {number} dokumenttiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    queryDokumenttiTila (dokumenttiId: number, options?: any) {
      return DokumentitApiFp(configuration).queryDokumenttiTila(dokumenttiId, options)(axios, basePath)
    }
  }
}

/**
 * DokumentitApi - object-oriented interface
 * @export
 * @class DokumentitApi
 * @extends {BaseAPI}
 */
export class DokumentitApi extends BaseAPI {
  /**
     *
     * @summary luo dokumentti
     * @param {number} perusteId
     * @param {string} kieli
     * @param {string} suoritustapakoodi
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumentitApi
     */
  public createDokumentti (perusteId: number, kieli: string, suoritustapakoodi: string, version: string, options?: any) {
    return DokumentitApiFp(this.configuration).createDokumentti(perusteId, kieli, suoritustapakoodi, version, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} fileName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumentitApi
     */
  public getDokumentti (fileName: string, options?: any) {
    return DokumentitApiFp(this.configuration).getDokumentti(fileName, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} kieli
     * @param {string} suoritustapa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumentitApi
     */
  public getDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options?: any) {
    return DokumentitApiFp(this.configuration).getDokumenttiId(perusteId, kieli, suoritustapa, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} kieli
     * @param {string} suoritustapa
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumentitApi
     */
  public getKVLiiteDokumenttiId (perusteId: number, kieli: string, suoritustapa: string, options?: any) {
    return DokumentitApiFp(this.configuration).getKVLiiteDokumenttiId(perusteId, kieli, suoritustapa, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} kieli
     * @param {string} suoritustapa
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumentitApi
     */
  public getLatestDokumentti (perusteId: number, kieli: string, suoritustapa: string, version: string, options?: any) {
    return DokumentitApiFp(this.configuration).getLatestDokumentti(perusteId, kieli, suoritustapa, version, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} dokumenttiId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DokumentitApi
     */
  public queryDokumenttiTila (dokumenttiId: number, options?: any) {
    return DokumentitApiFp(this.configuration).queryDokumenttiTila(dokumenttiId, options)(this.axios, this.basePath)
  }
}

/**
 * GeneerinenArviointiasteikkoApi - axios parameter creator
 * @export
 */
export const GeneerinenArviointiasteikkoApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addGeneerinenArviointiasteikko (GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options: any = {}): RequestArgs {
      const localVarPath = `/geneerinenarviointi`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'GeneerinenArviointiasteikkoDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(GeneerinenArviointiasteikkoDto || {}) : (GeneerinenArviointiasteikkoDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllGeneerisetArviointiasteikot (options: any = {}): RequestArgs {
      const localVarPath = `/geneerinenarviointi`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOneGeneerisetArviointiasteikko (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOneGeneerisetArviointiasteikko.')
      }
      const localVarPath = `/geneerinenarviointi/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kopioiGeneerinenArviontiasteikko (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling kopioiGeneerinenArviontiasteikko.')
      }
      const localVarPath = `/geneerinenarviointi/{id}/kopioi`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeGeneerinenArviontiasteikko (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling removeGeneerinenArviontiasteikko.')
      }
      const localVarPath = `/geneerinenarviointi/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateGeneerinenArviontiasteikko (id: number, GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateGeneerinenArviontiasteikko.')
      }
      const localVarPath = `/geneerinenarviointi/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'GeneerinenArviointiasteikkoDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(GeneerinenArviointiasteikkoDto || {}) : (GeneerinenArviointiasteikkoDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * GeneerinenArviointiasteikkoApi - functional programming interface
 * @export
 */
export const GeneerinenArviointiasteikkoApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addGeneerinenArviointiasteikko (GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneerinenArviointiasteikkoDto> {
      const localVarAxiosArgs = GeneerinenArviointiasteikkoApiAxiosParamCreator(configuration).addGeneerinenArviointiasteikko(GeneerinenArviointiasteikkoDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllGeneerisetArviointiasteikot (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GeneerinenArviointiasteikkoDto>> {
      const localVarAxiosArgs = GeneerinenArviointiasteikkoApiAxiosParamCreator(configuration).getAllGeneerisetArviointiasteikot(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOneGeneerisetArviointiasteikko (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneerinenArviointiasteikkoDto> {
      const localVarAxiosArgs = GeneerinenArviointiasteikkoApiAxiosParamCreator(configuration).getOneGeneerisetArviointiasteikko(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kopioiGeneerinenArviontiasteikko (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneerinenArviointiasteikkoDto> {
      const localVarAxiosArgs = GeneerinenArviointiasteikkoApiAxiosParamCreator(configuration).kopioiGeneerinenArviontiasteikko(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeGeneerinenArviontiasteikko (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = GeneerinenArviointiasteikkoApiAxiosParamCreator(configuration).removeGeneerinenArviontiasteikko(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateGeneerinenArviontiasteikko (id: number, GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneerinenArviointiasteikkoDto> {
      const localVarAxiosArgs = GeneerinenArviointiasteikkoApiAxiosParamCreator(configuration).updateGeneerinenArviontiasteikko(id, GeneerinenArviointiasteikkoDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * GeneerinenArviointiasteikkoApi - factory interface
 * @export
 */
export const GeneerinenArviointiasteikkoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addGeneerinenArviointiasteikko (GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options?: any) {
      return GeneerinenArviointiasteikkoApiFp(configuration).addGeneerinenArviointiasteikko(GeneerinenArviointiasteikkoDto, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllGeneerisetArviointiasteikot (options?: any) {
      return GeneerinenArviointiasteikkoApiFp(configuration).getAllGeneerisetArviointiasteikot(options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOneGeneerisetArviointiasteikko (id: number, options?: any) {
      return GeneerinenArviointiasteikkoApiFp(configuration).getOneGeneerisetArviointiasteikko(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kopioiGeneerinenArviontiasteikko (id: number, options?: any) {
      return GeneerinenArviointiasteikkoApiFp(configuration).kopioiGeneerinenArviontiasteikko(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeGeneerinenArviontiasteikko (id: number, options?: any) {
      return GeneerinenArviointiasteikkoApiFp(configuration).removeGeneerinenArviontiasteikko(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateGeneerinenArviontiasteikko (id: number, GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options?: any) {
      return GeneerinenArviointiasteikkoApiFp(configuration).updateGeneerinenArviontiasteikko(id, GeneerinenArviointiasteikkoDto, options)(axios, basePath)
    }
  }
}

/**
 * GeneerinenArviointiasteikkoApi - object-oriented interface
 * @export
 * @class GeneerinenArviointiasteikkoApi
 * @extends {BaseAPI}
 */
export class GeneerinenArviointiasteikkoApi extends BaseAPI {
  /**
     *
     * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneerinenArviointiasteikkoApi
     */
  public addGeneerinenArviointiasteikko (GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options?: any) {
    return GeneerinenArviointiasteikkoApiFp(this.configuration).addGeneerinenArviointiasteikko(GeneerinenArviointiasteikkoDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneerinenArviointiasteikkoApi
     */
  public getAllGeneerisetArviointiasteikot (options?: any) {
    return GeneerinenArviointiasteikkoApiFp(this.configuration).getAllGeneerisetArviointiasteikot(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneerinenArviointiasteikkoApi
     */
  public getOneGeneerisetArviointiasteikko (id: number, options?: any) {
    return GeneerinenArviointiasteikkoApiFp(this.configuration).getOneGeneerisetArviointiasteikko(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneerinenArviointiasteikkoApi
     */
  public kopioiGeneerinenArviontiasteikko (id: number, options?: any) {
    return GeneerinenArviointiasteikkoApiFp(this.configuration).kopioiGeneerinenArviontiasteikko(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneerinenArviointiasteikkoApi
     */
  public removeGeneerinenArviontiasteikko (id: number, options?: any) {
    return GeneerinenArviointiasteikkoApiFp(this.configuration).removeGeneerinenArviontiasteikko(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {GeneerinenArviointiasteikkoDto} [GeneerinenArviointiasteikkoDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneerinenArviointiasteikkoApi
     */
  public updateGeneerinenArviontiasteikko (id: number, GeneerinenArviointiasteikkoDto?: GeneerinenArviointiasteikkoDto, options?: any) {
    return GeneerinenArviointiasteikkoApiFp(this.configuration).updateGeneerinenArviontiasteikko(id, GeneerinenArviointiasteikkoDto, options)(this.axios, this.basePath)
  }
}

/**
 * JulkaisutApi - axios parameter creator
 * @export
 */
export const JulkaisutApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getJulkaisu (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getJulkaisu.')
      }
      const localVarPath = `/perusteet/{perusteId}/julkaisu`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * JulkaisutApi - functional programming interface
 * @export
 */
export const JulkaisutApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getJulkaisu (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = JulkaisutApiAxiosParamCreator(configuration).getJulkaisu(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * JulkaisutApi - factory interface
 * @export
 */
export const JulkaisutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getJulkaisu (perusteId: number, options?: any) {
      return JulkaisutApiFp(configuration).getJulkaisu(perusteId, options)(axios, basePath)
    }
  }
}

/**
 * JulkaisutApi - object-oriented interface
 * @export
 * @class JulkaisutApi
 * @extends {BaseAPI}
 */
export class JulkaisutApi extends BaseAPI {
  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JulkaisutApi
     */
  public getJulkaisu (perusteId: number, options?: any) {
    return JulkaisutApiFp(this.configuration).getJulkaisu(perusteId, options)(this.axios, this.basePath)
  }
}

/**
 * KayttajatApi - axios parameter creator
 * @export
 */
export const KayttajatApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttaja (options: any = {}): RequestArgs {
      const localVarPath = `/kayttajatieto`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttaja_1 (oid: string, options: any = {}): RequestArgs {
      // verify required parameter 'oid' is not null or undefined
      if (oid === null || oid === undefined) {
        throw new RequiredError('oid', 'Required parameter oid was null or undefined when calling getKayttaja_1.')
      }
      const localVarPath = `/kayttajatieto/{oid}`
        .replace(`{${'oid'}}`, encodeURIComponent(String(oid)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} oid
         * @param {number} projektiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttajanPerusteprojekti (oid: string, projektiId: number, options: any = {}): RequestArgs {
      // verify required parameter 'oid' is not null or undefined
      if (oid === null || oid === undefined) {
        throw new RequiredError('oid', 'Required parameter oid was null or undefined when calling getKayttajanPerusteprojekti.')
      }
      // verify required parameter 'projektiId' is not null or undefined
      if (projektiId === null || projektiId === undefined) {
        throw new RequiredError('projektiId', 'Required parameter projektiId was null or undefined when calling getKayttajanPerusteprojekti.')
      }
      const localVarPath = `/kayttajatieto/{oid}/perusteprojektit/{projektiId}`
        .replace(`{${'oid'}}`, encodeURIComponent(String(oid)))
        .replace(`{${'projektiId'}}`, encodeURIComponent(String(projektiId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttajanPerusteprojektit (oid: string, options: any = {}): RequestArgs {
      // verify required parameter 'oid' is not null or undefined
      if (oid === null || oid === undefined) {
        throw new RequiredError('oid', 'Required parameter oid was null or undefined when calling getKayttajanPerusteprojektit.')
      }
      const localVarPath = `/kayttajatieto/{oid}/perusteprojektit`
        .replace(`{${'oid'}}`, encodeURIComponent(String(oid)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * KayttajatApi - functional programming interface
 * @export
 */
export const KayttajatApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttaja (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<KayttajanTietoDto> {
      const localVarAxiosArgs = KayttajatApiAxiosParamCreator(configuration).getKayttaja(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttaja_1 (oid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<KayttajanTietoDto> {
      const localVarAxiosArgs = KayttajatApiAxiosParamCreator(configuration).getKayttaja_1(oid, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} oid
         * @param {number} projektiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttajanPerusteprojekti (oid: string, projektiId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<KayttajanProjektitiedotDto> {
      const localVarAxiosArgs = KayttajatApiAxiosParamCreator(configuration).getKayttajanPerusteprojekti(oid, projektiId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttajanPerusteprojektit (oid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KayttajanProjektitiedotDto>> {
      const localVarAxiosArgs = KayttajatApiAxiosParamCreator(configuration).getKayttajanPerusteprojektit(oid, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * KayttajatApi - factory interface
 * @export
 */
export const KayttajatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttaja (options?: any) {
      return KayttajatApiFp(configuration).getKayttaja(options)(axios, basePath)
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttaja_1 (oid: string, options?: any) {
      return KayttajatApiFp(configuration).getKayttaja_1(oid, options)(axios, basePath)
    },
    /**
         *
         * @param {string} oid
         * @param {number} projektiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttajanPerusteprojekti (oid: string, projektiId: number, options?: any) {
      return KayttajatApiFp(configuration).getKayttajanPerusteprojekti(oid, projektiId, options)(axios, basePath)
    },
    /**
         *
         * @param {string} oid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKayttajanPerusteprojektit (oid: string, options?: any) {
      return KayttajatApiFp(configuration).getKayttajanPerusteprojektit(oid, options)(axios, basePath)
    }
  }
}

/**
 * KayttajatApi - object-oriented interface
 * @export
 * @class KayttajatApi
 * @extends {BaseAPI}
 */
export class KayttajatApi extends BaseAPI {
  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KayttajatApi
     */
  public getKayttaja (options?: any) {
    return KayttajatApiFp(this.configuration).getKayttaja(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KayttajatApi
     */
  public getKayttaja_1 (oid: string, options?: any) {
    return KayttajatApiFp(this.configuration).getKayttaja_1(oid, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} oid
     * @param {number} projektiId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KayttajatApi
     */
  public getKayttajanPerusteprojekti (oid: string, projektiId: number, options?: any) {
    return KayttajatApiFp(this.configuration).getKayttajanPerusteprojekti(oid, projektiId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} oid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KayttajatApi
     */
  public getKayttajanPerusteprojektit (oid: string, options?: any) {
    return KayttajatApiFp(this.configuration).getKayttajanPerusteprojektit(oid, options)(this.axios, this.basePath)
  }
}

/**
 * LiitetiedostotApi - axios parameter creator
 * @export
 */
export const LiitetiedostotApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    _delete (perusteId: number, id: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling _delete.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling _delete.')
      }
      const localVarPath = `/perusteet/{perusteId}/kuvat/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKuvat (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getAllKuvat.')
      }
      const localVarPath = `/perusteet/{perusteId}/kuvat`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllLiitteet (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getAllLiitteet.')
      }
      const localVarPath = `/perusteet/{perusteId}/liitteet`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} fileName
         * @param {string} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKuva (perusteId: number, fileName: string, If_None_Match?: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getKuva.')
      }
      // verify required parameter 'fileName' is not null or undefined
      if (fileName === null || fileName === undefined) {
        throw new RequiredError('fileName', 'Required parameter fileName was null or undefined when calling getKuva.')
      }
      const localVarPath = `/perusteet/{perusteId}/kuvat/{fileName}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'fileName'}}`, encodeURIComponent(String(fileName)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} fileName
         * @param {string} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLiite (perusteId: number, fileName: string, If_None_Match?: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getLiite.')
      }
      // verify required parameter 'fileName' is not null or undefined
      if (fileName === null || fileName === undefined) {
        throw new RequiredError('fileName', 'Required parameter fileName was null or undefined when calling getLiite.')
      }
      const localVarPath = `/perusteet/{perusteId}/liitteet/{fileName}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'fileName'}}`, encodeURIComponent(String(fileName)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} nimi
         * @param {Ref} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    uploadKuva (perusteId: number, nimi: string, file: Ref, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling uploadKuva.')
      }
      // verify required parameter 'nimi' is not null or undefined
      if (nimi === null || nimi === undefined) {
        throw new RequiredError('nimi', 'Required parameter nimi was null or undefined when calling uploadKuva.')
      }
      // verify required parameter 'file' is not null or undefined
      if (file === null || file === undefined) {
        throw new RequiredError('file', 'Required parameter file was null or undefined when calling uploadKuva.')
      }
      const localVarPath = `/perusteet/{perusteId}/kuvat`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (nimi !== undefined) {
        localVarQueryParameter['nimi'] = nimi
      }

      if (file !== undefined) {
        localVarQueryParameter['file'] = file
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} nimi
         * @param {Ref} file
         * @param {string} tyyppi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    uploadLiite (perusteId: number, nimi: string, file: Ref, tyyppi: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling uploadLiite.')
      }
      // verify required parameter 'nimi' is not null or undefined
      if (nimi === null || nimi === undefined) {
        throw new RequiredError('nimi', 'Required parameter nimi was null or undefined when calling uploadLiite.')
      }
      // verify required parameter 'file' is not null or undefined
      if (file === null || file === undefined) {
        throw new RequiredError('file', 'Required parameter file was null or undefined when calling uploadLiite.')
      }
      // verify required parameter 'tyyppi' is not null or undefined
      if (tyyppi === null || tyyppi === undefined) {
        throw new RequiredError('tyyppi', 'Required parameter tyyppi was null or undefined when calling uploadLiite.')
      }
      const localVarPath = `/perusteet/{perusteId}/liitteet`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (nimi !== undefined) {
        localVarQueryParameter['nimi'] = nimi
      }

      if (file !== undefined) {
        localVarQueryParameter['file'] = file
      }

      if (tyyppi !== undefined) {
        localVarQueryParameter['tyyppi'] = tyyppi
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LiitetiedostotApi - functional programming interface
 * @export
 */
export const LiitetiedostotApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    _delete (perusteId: number, id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = LiitetiedostotApiAxiosParamCreator(configuration)._delete(perusteId, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKuvat (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiiteDto>> {
      const localVarAxiosArgs = LiitetiedostotApiAxiosParamCreator(configuration).getAllKuvat(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllLiitteet (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LiiteDto>> {
      const localVarAxiosArgs = LiitetiedostotApiAxiosParamCreator(configuration).getAllLiitteet(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} fileName
         * @param {string} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKuva (perusteId: number, fileName: string, If_None_Match?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = LiitetiedostotApiAxiosParamCreator(configuration).getKuva(perusteId, fileName, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} fileName
         * @param {string} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLiite (perusteId: number, fileName: string, If_None_Match?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = LiitetiedostotApiAxiosParamCreator(configuration).getLiite(perusteId, fileName, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} nimi
         * @param {Ref} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    uploadKuva (perusteId: number, nimi: string, file: Ref, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
      const localVarAxiosArgs = LiitetiedostotApiAxiosParamCreator(configuration).uploadKuva(perusteId, nimi, file, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} nimi
         * @param {Ref} file
         * @param {string} tyyppi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    uploadLiite (perusteId: number, nimi: string, file: Ref, tyyppi: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
      const localVarAxiosArgs = LiitetiedostotApiAxiosParamCreator(configuration).uploadLiite(perusteId, nimi, file, tyyppi, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * LiitetiedostotApi - factory interface
 * @export
 */
export const LiitetiedostotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    _delete (perusteId: number, id: string, options?: any) {
      return LiitetiedostotApiFp(configuration)._delete(perusteId, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKuvat (perusteId: number, options?: any) {
      return LiitetiedostotApiFp(configuration).getAllKuvat(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllLiitteet (perusteId: number, options?: any) {
      return LiitetiedostotApiFp(configuration).getAllLiitteet(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} fileName
         * @param {string} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKuva (perusteId: number, fileName: string, If_None_Match?: string, options?: any) {
      return LiitetiedostotApiFp(configuration).getKuva(perusteId, fileName, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} fileName
         * @param {string} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLiite (perusteId: number, fileName: string, If_None_Match?: string, options?: any) {
      return LiitetiedostotApiFp(configuration).getLiite(perusteId, fileName, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} nimi
         * @param {Ref} file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    uploadKuva (perusteId: number, nimi: string, file: Ref, options?: any) {
      return LiitetiedostotApiFp(configuration).uploadKuva(perusteId, nimi, file, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} nimi
         * @param {Ref} file
         * @param {string} tyyppi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    uploadLiite (perusteId: number, nimi: string, file: Ref, tyyppi: string, options?: any) {
      return LiitetiedostotApiFp(configuration).uploadLiite(perusteId, nimi, file, tyyppi, options)(axios, basePath)
    }
  }
}

/**
 * LiitetiedostotApi - object-oriented interface
 * @export
 * @class LiitetiedostotApi
 * @extends {BaseAPI}
 */
export class LiitetiedostotApi extends BaseAPI {
  /**
     *
     * @param {number} perusteId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiitetiedostotApi
     */
  public _delete (perusteId: number, id: string, options?: any) {
    return LiitetiedostotApiFp(this.configuration)._delete(perusteId, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiitetiedostotApi
     */
  public getAllKuvat (perusteId: number, options?: any) {
    return LiitetiedostotApiFp(this.configuration).getAllKuvat(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiitetiedostotApi
     */
  public getAllLiitteet (perusteId: number, options?: any) {
    return LiitetiedostotApiFp(this.configuration).getAllLiitteet(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} fileName
     * @param {string} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiitetiedostotApi
     */
  public getKuva (perusteId: number, fileName: string, If_None_Match?: string, options?: any) {
    return LiitetiedostotApiFp(this.configuration).getKuva(perusteId, fileName, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} fileName
     * @param {string} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiitetiedostotApi
     */
  public getLiite (perusteId: number, fileName: string, If_None_Match?: string, options?: any) {
    return LiitetiedostotApiFp(this.configuration).getLiite(perusteId, fileName, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} nimi
     * @param {Ref} file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiitetiedostotApi
     */
  public uploadKuva (perusteId: number, nimi: string, file: Ref, options?: any) {
    return LiitetiedostotApiFp(this.configuration).uploadKuva(perusteId, nimi, file, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} nimi
     * @param {Ref} file
     * @param {string} tyyppi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LiitetiedostotApi
     */
  public uploadLiite (perusteId: number, nimi: string, file: Ref, tyyppi: string, options?: any) {
    return LiitetiedostotApiFp(this.configuration).uploadLiite(perusteId, nimi, file, tyyppi, options)(this.axios, this.basePath)
  }
}

/**
 * LokalisointiApi - axios parameter creator
 * @export
 */
export const LokalisointiApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {string} locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKaannokset (locale: string, options: any = {}): RequestArgs {
      // verify required parameter 'locale' is not null or undefined
      if (locale === null || locale === undefined) {
        throw new RequiredError('locale', 'Required parameter locale was null or undefined when calling getAllKaannokset.')
      }
      const localVarPath = `/lokalisointi/eperusteet-opintopolku`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (locale !== undefined) {
        localVarQueryParameter['locale'] = locale
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * LokalisointiApi - functional programming interface
 * @export
 */
export const LokalisointiApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {string} locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKaannokset (locale: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LokalisointiDto>> {
      const localVarAxiosArgs = LokalisointiApiAxiosParamCreator(configuration).getAllKaannokset(locale, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * LokalisointiApi - factory interface
 * @export
 */
export const LokalisointiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {string} locale
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllKaannokset (locale: string, options?: any) {
      return LokalisointiApiFp(configuration).getAllKaannokset(locale, options)(axios, basePath)
    }
  }
}

/**
 * LokalisointiApi - object-oriented interface
 * @export
 * @class LokalisointiApi
 * @extends {BaseAPI}
 */
export class LokalisointiApi extends BaseAPI {
  /**
     *
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LokalisointiApi
     */
  public getAllKaannokset (locale: string, options?: any) {
    return LokalisointiApiFp(this.configuration).getAllKaannokset(locale, options)(this.axios, this.basePath)
  }
}

/**
 * Lops2019Api - axios parameter creator
 * @export
 */
export const Lops2019ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOppiaine (perusteId: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addOppiaine.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/uusi`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Lops2019OppiaineDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Lops2019OppiaineDto || {}) : (Lops2019OppiaineDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisalto (perusteId: number, Matala?: Matala, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addSisalto.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/sisalto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Matala' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Matala || {}) : (Matala || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling deleteModuuli.')
      }
      // verify required parameter 'oppiaineId' is not null or undefined
      if (oppiaineId === null || oppiaineId === undefined) {
        throw new RequiredError('oppiaineId', 'Required parameter oppiaineId was null or undefined when calling deleteModuuli.')
      }
      // verify required parameter 'moduuliId' is not null or undefined
      if (moduuliId === null || moduuliId === undefined) {
        throw new RequiredError('moduuliId', 'Required parameter moduuliId was null or undefined when calling deleteModuuli.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{oppiaineId}/moduulit/{moduuliId}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'oppiaineId'}}`, encodeURIComponent(String(oppiaineId)))
        .replace(`{${'moduuliId'}}`, encodeURIComponent(String(moduuliId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteOppiaine (perusteId: number, id: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling deleteOppiaine.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteOppiaine.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteSisalto (perusteId: number, id: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling deleteSisalto.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteSisalto.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/sisalto/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLaajaAlainenOsaaminenKokonaisuus (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getLaajaAlainenOsaaminenKokonaisuus.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/laajaalaiset`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getModuuli.')
      }
      // verify required parameter 'oppiaineId' is not null or undefined
      if (oppiaineId === null || oppiaineId === undefined) {
        throw new RequiredError('oppiaineId', 'Required parameter oppiaineId was null or undefined when calling getModuuli.')
      }
      // verify required parameter 'moduuliId' is not null or undefined
      if (moduuliId === null || moduuliId === undefined) {
        throw new RequiredError('moduuliId', 'Required parameter moduuliId was null or undefined when calling getModuuli.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{oppiaineId}/moduulit/{moduuliId}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'oppiaineId'}}`, encodeURIComponent(String(oppiaineId)))
        .replace(`{${'moduuliId'}}`, encodeURIComponent(String(moduuliId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaine (perusteId: number, id: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getOppiaine.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOppiaine.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} rev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineenVersioData (perusteId: number, oppiaineId: number, rev: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getOppiaineenVersioData.')
      }
      // verify required parameter 'oppiaineId' is not null or undefined
      if (oppiaineId === null || oppiaineId === undefined) {
        throw new RequiredError('oppiaineId', 'Required parameter oppiaineId was null or undefined when calling getOppiaineenVersioData.')
      }
      // verify required parameter 'rev' is not null or undefined
      if (rev === null || rev === undefined) {
        throw new RequiredError('rev', 'Required parameter rev was null or undefined when calling getOppiaineenVersioData.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{oppiaineId}/versiot/{rev}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'oppiaineId'}}`, encodeURIComponent(String(oppiaineId)))
        .replace(`{${'rev'}}`, encodeURIComponent(String(rev)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineenVersiot (perusteId: number, oppiaineId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getOppiaineenVersiot.')
      }
      // verify required parameter 'oppiaineId' is not null or undefined
      if (oppiaineId === null || oppiaineId === undefined) {
        throw new RequiredError('oppiaineId', 'Required parameter oppiaineId was null or undefined when calling getOppiaineenVersiot.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{oppiaineId}/versiot`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'oppiaineId'}}`, encodeURIComponent(String(oppiaineId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineet (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getOppiaineet.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    palautaOppiaineenModuulit (perusteId: number, id: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling palautaOppiaineenModuulit.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling palautaOppiaineenModuulit.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{id}/palautamoduulit`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} rev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    palautaOppiaineenSisalto (perusteId: number, oppiaineId: number, rev: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling palautaOppiaineenSisalto.')
      }
      // verify required parameter 'oppiaineId' is not null or undefined
      if (oppiaineId === null || oppiaineId === undefined) {
        throw new RequiredError('oppiaineId', 'Required parameter oppiaineId was null or undefined when calling palautaOppiaineenSisalto.')
      }
      // verify required parameter 'rev' is not null or undefined
      if (rev === null || rev === undefined) {
        throw new RequiredError('rev', 'Required parameter rev was null or undefined when calling palautaOppiaineenSisalto.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{oppiaineId}/versiot/{rev}/palauta`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'oppiaineId'}}`, encodeURIComponent(String(oppiaineId)))
        .replace(`{${'rev'}}`, encodeURIComponent(String(rev)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {Array<Lops2019OppiaineDto>} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    sortOppiaineet (perusteId: number, Lops2019OppiaineDto?: Array<Lops2019OppiaineDto>, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling sortOppiaineet.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Array&lt;Lops2019OppiaineDto&gt;' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Lops2019OppiaineDto || {}) : (Lops2019OppiaineDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {Lops2019LaajaAlainenOsaaminenKokonaisuusDto} [Lops2019LaajaAlainenOsaaminenKokonaisuusDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateLaajaAlainenOsaaminenKokonaisuus (perusteId: number, Lops2019LaajaAlainenOsaaminenKokonaisuusDto?: Lops2019LaajaAlainenOsaaminenKokonaisuusDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling updateLaajaAlainenOsaaminenKokonaisuus.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/laajaalaiset`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Lops2019LaajaAlainenOsaaminenKokonaisuusDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Lops2019LaajaAlainenOsaaminenKokonaisuusDto || {}) : (Lops2019LaajaAlainenOsaaminenKokonaisuusDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {Lops2019ModuuliDto} [Lops2019ModuuliDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateModuuli (perusteId: number, oppiaineId: number, moduuliId: number, Lops2019ModuuliDto?: Lops2019ModuuliDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling updateModuuli.')
      }
      // verify required parameter 'oppiaineId' is not null or undefined
      if (oppiaineId === null || oppiaineId === undefined) {
        throw new RequiredError('oppiaineId', 'Required parameter oppiaineId was null or undefined when calling updateModuuli.')
      }
      // verify required parameter 'moduuliId' is not null or undefined
      if (moduuliId === null || moduuliId === undefined) {
        throw new RequiredError('moduuliId', 'Required parameter moduuliId was null or undefined when calling updateModuuli.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{oppiaineId}/moduulit/{moduuliId}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'oppiaineId'}}`, encodeURIComponent(String(oppiaineId)))
        .replace(`{${'moduuliId'}}`, encodeURIComponent(String(moduuliId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Lops2019ModuuliDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Lops2019ModuuliDto || {}) : (Lops2019ModuuliDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateOppiaine (perusteId: number, id: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling updateOppiaine.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOppiaine.')
      }
      const localVarPath = `/perusteet/{perusteId}/lops2019/oppiaineet/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Lops2019OppiaineDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Lops2019OppiaineDto || {}) : (Lops2019OppiaineDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * Lops2019Api - functional programming interface
 * @export
 */
export const Lops2019ApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOppiaine (perusteId: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019OppiaineDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).addOppiaine(perusteId, Lops2019OppiaineDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisalto (perusteId: number, Matala?: Matala, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Matala> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).addSisalto(perusteId, Matala, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).deleteModuuli(perusteId, oppiaineId, moduuliId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteOppiaine (perusteId: number, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).deleteOppiaine(perusteId, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteSisalto (perusteId: number, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).deleteSisalto(perusteId, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLaajaAlainenOsaaminenKokonaisuus (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019LaajaAlainenOsaaminenKokonaisuusDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).getLaajaAlainenOsaaminenKokonaisuus(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019ModuuliDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).getModuuli(perusteId, oppiaineId, moduuliId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaine (perusteId: number, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019OppiaineDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).getOppiaine(perusteId, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} rev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineenVersioData (perusteId: number, oppiaineId: number, rev: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019OppiaineKaikkiDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).getOppiaineenVersioData(perusteId, oppiaineId, rev, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineenVersiot (perusteId: number, oppiaineId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Revision>> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).getOppiaineenVersiot(perusteId, oppiaineId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineet (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Lops2019OppiaineDto>> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).getOppiaineet(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    palautaOppiaineenModuulit (perusteId: number, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).palautaOppiaineenModuulit(perusteId, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} rev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    palautaOppiaineenSisalto (perusteId: number, oppiaineId: number, rev: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).palautaOppiaineenSisalto(perusteId, oppiaineId, rev, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {Array<Lops2019OppiaineDto>} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    sortOppiaineet (perusteId: number, Lops2019OppiaineDto?: Array<Lops2019OppiaineDto>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Lops2019OppiaineDto>> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).sortOppiaineet(perusteId, Lops2019OppiaineDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {Lops2019LaajaAlainenOsaaminenKokonaisuusDto} [Lops2019LaajaAlainenOsaaminenKokonaisuusDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateLaajaAlainenOsaaminenKokonaisuus (perusteId: number, Lops2019LaajaAlainenOsaaminenKokonaisuusDto?: Lops2019LaajaAlainenOsaaminenKokonaisuusDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019LaajaAlainenOsaaminenKokonaisuusDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).updateLaajaAlainenOsaaminenKokonaisuus(perusteId, Lops2019LaajaAlainenOsaaminenKokonaisuusDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {Lops2019ModuuliDto} [Lops2019ModuuliDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateModuuli (perusteId: number, oppiaineId: number, moduuliId: number, Lops2019ModuuliDto?: Lops2019ModuuliDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019ModuuliDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).updateModuuli(perusteId, oppiaineId, moduuliId, Lops2019ModuuliDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateOppiaine (perusteId: number, id: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Lops2019OppiaineDto> {
      const localVarAxiosArgs = Lops2019ApiAxiosParamCreator(configuration).updateOppiaine(perusteId, id, Lops2019OppiaineDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * Lops2019Api - factory interface
 * @export
 */
export const Lops2019ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOppiaine (perusteId: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options?: any) {
      return Lops2019ApiFp(configuration).addOppiaine(perusteId, Lops2019OppiaineDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisalto (perusteId: number, Matala?: Matala, options?: any) {
      return Lops2019ApiFp(configuration).addSisalto(perusteId, Matala, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options?: any) {
      return Lops2019ApiFp(configuration).deleteModuuli(perusteId, oppiaineId, moduuliId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteOppiaine (perusteId: number, id: number, options?: any) {
      return Lops2019ApiFp(configuration).deleteOppiaine(perusteId, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteSisalto (perusteId: number, id: number, options?: any) {
      return Lops2019ApiFp(configuration).deleteSisalto(perusteId, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getLaajaAlainenOsaaminenKokonaisuus (perusteId: number, options?: any) {
      return Lops2019ApiFp(configuration).getLaajaAlainenOsaaminenKokonaisuus(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options?: any) {
      return Lops2019ApiFp(configuration).getModuuli(perusteId, oppiaineId, moduuliId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaine (perusteId: number, id: number, options?: any) {
      return Lops2019ApiFp(configuration).getOppiaine(perusteId, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} rev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineenVersioData (perusteId: number, oppiaineId: number, rev: number, options?: any) {
      return Lops2019ApiFp(configuration).getOppiaineenVersioData(perusteId, oppiaineId, rev, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineenVersiot (perusteId: number, oppiaineId: number, options?: any) {
      return Lops2019ApiFp(configuration).getOppiaineenVersiot(perusteId, oppiaineId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOppiaineet (perusteId: number, options?: any) {
      return Lops2019ApiFp(configuration).getOppiaineet(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    palautaOppiaineenModuulit (perusteId: number, id: number, options?: any) {
      return Lops2019ApiFp(configuration).palautaOppiaineenModuulit(perusteId, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} rev
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    palautaOppiaineenSisalto (perusteId: number, oppiaineId: number, rev: number, options?: any) {
      return Lops2019ApiFp(configuration).palautaOppiaineenSisalto(perusteId, oppiaineId, rev, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {Array<Lops2019OppiaineDto>} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    sortOppiaineet (perusteId: number, Lops2019OppiaineDto?: Array<Lops2019OppiaineDto>, options?: any) {
      return Lops2019ApiFp(configuration).sortOppiaineet(perusteId, Lops2019OppiaineDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {Lops2019LaajaAlainenOsaaminenKokonaisuusDto} [Lops2019LaajaAlainenOsaaminenKokonaisuusDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateLaajaAlainenOsaaminenKokonaisuus (perusteId: number, Lops2019LaajaAlainenOsaaminenKokonaisuusDto?: Lops2019LaajaAlainenOsaaminenKokonaisuusDto, options?: any) {
      return Lops2019ApiFp(configuration).updateLaajaAlainenOsaaminenKokonaisuus(perusteId, Lops2019LaajaAlainenOsaaminenKokonaisuusDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} oppiaineId
         * @param {number} moduuliId
         * @param {Lops2019ModuuliDto} [Lops2019ModuuliDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateModuuli (perusteId: number, oppiaineId: number, moduuliId: number, Lops2019ModuuliDto?: Lops2019ModuuliDto, options?: any) {
      return Lops2019ApiFp(configuration).updateModuuli(perusteId, oppiaineId, moduuliId, Lops2019ModuuliDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateOppiaine (perusteId: number, id: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options?: any) {
      return Lops2019ApiFp(configuration).updateOppiaine(perusteId, id, Lops2019OppiaineDto, options)(axios, basePath)
    }
  }
}

/**
 * Lops2019Api - object-oriented interface
 * @export
 * @class Lops2019Api
 * @extends {BaseAPI}
 */
export class Lops2019Api extends BaseAPI {
  /**
     *
     * @param {number} perusteId
     * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public addOppiaine (perusteId: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options?: any) {
    return Lops2019ApiFp(this.configuration).addOppiaine(perusteId, Lops2019OppiaineDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {Matala} [Matala]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public addSisalto (perusteId: number, Matala?: Matala, options?: any) {
    return Lops2019ApiFp(this.configuration).addSisalto(perusteId, Matala, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} oppiaineId
     * @param {number} moduuliId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public deleteModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options?: any) {
    return Lops2019ApiFp(this.configuration).deleteModuuli(perusteId, oppiaineId, moduuliId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public deleteOppiaine (perusteId: number, id: number, options?: any) {
    return Lops2019ApiFp(this.configuration).deleteOppiaine(perusteId, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public deleteSisalto (perusteId: number, id: number, options?: any) {
    return Lops2019ApiFp(this.configuration).deleteSisalto(perusteId, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public getLaajaAlainenOsaaminenKokonaisuus (perusteId: number, options?: any) {
    return Lops2019ApiFp(this.configuration).getLaajaAlainenOsaaminenKokonaisuus(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} oppiaineId
     * @param {number} moduuliId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public getModuuli (perusteId: number, oppiaineId: number, moduuliId: number, options?: any) {
    return Lops2019ApiFp(this.configuration).getModuuli(perusteId, oppiaineId, moduuliId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public getOppiaine (perusteId: number, id: number, options?: any) {
    return Lops2019ApiFp(this.configuration).getOppiaine(perusteId, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} oppiaineId
     * @param {number} rev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public getOppiaineenVersioData (perusteId: number, oppiaineId: number, rev: number, options?: any) {
    return Lops2019ApiFp(this.configuration).getOppiaineenVersioData(perusteId, oppiaineId, rev, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} oppiaineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public getOppiaineenVersiot (perusteId: number, oppiaineId: number, options?: any) {
    return Lops2019ApiFp(this.configuration).getOppiaineenVersiot(perusteId, oppiaineId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public getOppiaineet (perusteId: number, options?: any) {
    return Lops2019ApiFp(this.configuration).getOppiaineet(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public palautaOppiaineenModuulit (perusteId: number, id: number, options?: any) {
    return Lops2019ApiFp(this.configuration).palautaOppiaineenModuulit(perusteId, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} oppiaineId
     * @param {number} rev
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public palautaOppiaineenSisalto (perusteId: number, oppiaineId: number, rev: number, options?: any) {
    return Lops2019ApiFp(this.configuration).palautaOppiaineenSisalto(perusteId, oppiaineId, rev, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {Array<Lops2019OppiaineDto>} [Lops2019OppiaineDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public sortOppiaineet (perusteId: number, Lops2019OppiaineDto?: Array<Lops2019OppiaineDto>, options?: any) {
    return Lops2019ApiFp(this.configuration).sortOppiaineet(perusteId, Lops2019OppiaineDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {Lops2019LaajaAlainenOsaaminenKokonaisuusDto} [Lops2019LaajaAlainenOsaaminenKokonaisuusDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public updateLaajaAlainenOsaaminenKokonaisuus (perusteId: number, Lops2019LaajaAlainenOsaaminenKokonaisuusDto?: Lops2019LaajaAlainenOsaaminenKokonaisuusDto, options?: any) {
    return Lops2019ApiFp(this.configuration).updateLaajaAlainenOsaaminenKokonaisuus(perusteId, Lops2019LaajaAlainenOsaaminenKokonaisuusDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} oppiaineId
     * @param {number} moduuliId
     * @param {Lops2019ModuuliDto} [Lops2019ModuuliDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public updateModuuli (perusteId: number, oppiaineId: number, moduuliId: number, Lops2019ModuuliDto?: Lops2019ModuuliDto, options?: any) {
    return Lops2019ApiFp(this.configuration).updateModuuli(perusteId, oppiaineId, moduuliId, Lops2019ModuuliDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} id
     * @param {Lops2019OppiaineDto} [Lops2019OppiaineDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lops2019Api
     */
  public updateOppiaine (perusteId: number, id: number, Lops2019OppiaineDto?: Lops2019OppiaineDto, options?: any) {
    return Lops2019ApiFp(this.configuration).updateOppiaine(perusteId, id, Lops2019OppiaineDto, options)(this.axios, this.basePath)
  }
}

/**
 * PerusteenosatApi - axios parameter creator
 * @export
 */
export const PerusteenosatApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOsaamistavoite (id: number, osaAlueId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling addOsaamistavoite.')
      }
      // verify required parameter 'osaAlueId' is not null or undefined
      if (osaAlueId === null || osaAlueId === undefined) {
        throw new RequiredError('osaAlueId', 'Required parameter osaAlueId was null or undefined when calling addOsaamistavoite.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalue/{osaAlueId}/osaamistavoite`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'osaAlueId'}}`, encodeURIComponent(String(osaAlueId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'OsaamistavoiteLaajaDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(OsaamistavoiteLaajaDto || {}) : (OsaamistavoiteLaajaDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {OsaAlueLaajaDto} [OsaAlueLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkinnonOsaOsaAlue (id: number, OsaAlueLaajaDto?: OsaAlueLaajaDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling addTutkinnonOsaOsaAlue.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalue`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'OsaAlueLaajaDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(OsaAlueLaajaDto || {}) : (OsaAlueLaajaDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    checkLockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling checkLockByTutkinnonOsaViite.')
      }
      const localVarPath = `/perusteenosat/tutkinnonosaviite/{viiteId}/lukko`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    checkPerusteenOsaLock (id: number, If_None_Match?: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling checkPerusteenOsaLock.')
      }
      const localVarPath = `/perusteenosat/{id}/lukko`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deletePerusteenOsa (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deletePerusteenOsa.')
      }
      const localVarPath = `/perusteenosat/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOsaamistavoitteet (id: number, osaAlueId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOsaamistavoitteet.')
      }
      // verify required parameter 'osaAlueId' is not null or undefined
      if (osaAlueId === null || osaAlueId === undefined) {
        throw new RequiredError('osaAlueId', 'Required parameter osaAlueId was null or undefined when calling getOsaamistavoitteet.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalue/{osaAlueId}/osaamistavoitteet`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'osaAlueId'}}`, encodeURIComponent(String(osaAlueId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOwningProjektit (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getOwningProjektit.')
      }
      const localVarPath = `/perusteenosat/{id}/projektit`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsa (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteenOsa.')
      }
      const localVarPath = `/perusteenosat/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersio (id: number, versioId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteenOsaVersio.')
      }
      // verify required parameter 'versioId' is not null or undefined
      if (versioId === null || versioId === undefined) {
        throw new RequiredError('versioId', 'Required parameter versioId was null or undefined when calling getPerusteenOsaVersio.')
      }
      const localVarPath = `/perusteenosat/{id}/versio/{versioId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'versioId'}}`, encodeURIComponent(String(versioId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersioByViite (id: number, versioId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteenOsaVersioByViite.')
      }
      // verify required parameter 'versioId' is not null or undefined
      if (versioId === null || versioId === undefined) {
        throw new RequiredError('versioId', 'Required parameter versioId was null or undefined when calling getPerusteenOsaVersioByViite.')
      }
      const localVarPath = `/perusteenosat/viite/{id}/versio/{versioId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'versioId'}}`, encodeURIComponent(String(versioId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersiot (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteenOsaVersiot.')
      }
      const localVarPath = `/perusteenosat/{id}/versiot`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaViiteVersiot (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getPerusteenOsaViiteVersiot.')
      }
      const localVarPath = `/perusteenosat/viite/{id}/versiot`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} nimi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatAllWithName (nimi: string, options: any = {}): RequestArgs {
      // verify required parameter 'nimi' is not null or undefined
      if (nimi === null || nimi === undefined) {
        throw new RequiredError('nimi', 'Required parameter nimi was null or undefined when calling getPerusteenOsatAllWithName.')
      }
      const localVarPath = `/perusteenosat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (nimi !== undefined) {
        localVarQueryParameter['nimi'] = nimi
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatByViite (viiteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling getPerusteenOsatByViite.')
      }
      const localVarPath = `/perusteenosat/viite/{viiteId}`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatByViiteSisalto (viiteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling getPerusteenOsatByViiteSisalto.')
      }
      const localVarPath = `/perusteenosat/viite/{viiteId}/sisalto`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling getTutkinnonOsaOsaAlue.')
      }
      // verify required parameter 'osaAlueId' is not null or undefined
      if (osaAlueId === null || osaAlueId === undefined) {
        throw new RequiredError('osaAlueId', 'Required parameter osaAlueId was null or undefined when calling getTutkinnonOsaOsaAlue.')
      }
      const localVarPath = `/perusteenosat/{viiteId}/osaalue/{osaAlueId}`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
        .replace(`{${'osaAlueId'}}`, encodeURIComponent(String(osaAlueId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlueet (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getTutkinnonOsaOsaAlueet.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalueet`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlueetVersio (id: number, versioId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getTutkinnonOsaOsaAlueetVersio.')
      }
      // verify required parameter 'versioId' is not null or undefined
      if (versioId === null || versioId === undefined) {
        throw new RequiredError('versioId', 'Required parameter versioId was null or undefined when calling getTutkinnonOsaOsaAlueetVersio.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalueet/versio/{versioId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'versioId'}}`, encodeURIComponent(String(versioId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling lockByTutkinnonOsaViite.')
      }
      const localVarPath = `/perusteenosat/tutkinnonosaviite/{viiteId}/lukko`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockByTutkinnonOsaViitePut (viiteId: number, If_None_Match?: number, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling lockByTutkinnonOsaViitePut.')
      }
      const localVarPath = `/perusteenosat/tutkinnonosaviite/{viiteId}/lukko`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockPerusteenOsa (id: number, If_None_Match?: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling lockPerusteenOsa.')
      }
      const localVarPath = `/perusteenosat/{id}/lukko`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockPerusteenOsaPut (id: number, If_None_Match?: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling lockPerusteenOsaPut.')
      }
      const localVarPath = `/perusteenosat/{id}/lukko`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (If_None_Match !== undefined && If_None_Match !== null) {
        localVarHeaderParameter['If-None-Match'] = String(If_None_Match)
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeOsaAlue (id: number, osaAlueId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling removeOsaAlue.')
      }
      // verify required parameter 'osaAlueId' is not null or undefined
      if (osaAlueId === null || osaAlueId === undefined) {
        throw new RequiredError('osaAlueId', 'Required parameter osaAlueId was null or undefined when calling removeOsaAlue.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalue/{osaAlueId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'osaAlueId'}}`, encodeURIComponent(String(osaAlueId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {number} osaamistavoiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling removeOsaamistavoite.')
      }
      // verify required parameter 'osaAlueId' is not null or undefined
      if (osaAlueId === null || osaAlueId === undefined) {
        throw new RequiredError('osaAlueId', 'Required parameter osaAlueId was null or undefined when calling removeOsaamistavoite.')
      }
      // verify required parameter 'osaamistavoiteId' is not null or undefined
      if (osaamistavoiteId === null || osaamistavoiteId === undefined) {
        throw new RequiredError('osaamistavoiteId', 'Required parameter osaamistavoiteId was null or undefined when calling removeOsaamistavoite.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalue/{osaAlueId}/osaamistavoite/{osaamistavoiteId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'osaAlueId'}}`, encodeURIComponent(String(osaAlueId)))
        .replace(`{${'osaamistavoiteId'}}`, encodeURIComponent(String(osaamistavoiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    revertPerusteenOsaToVersio (id: number, versioId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling revertPerusteenOsaToVersio.')
      }
      // verify required parameter 'versioId' is not null or undefined
      if (versioId === null || versioId === undefined) {
        throw new RequiredError('versioId', 'Required parameter versioId was null or undefined when calling revertPerusteenOsaToVersio.')
      }
      const localVarPath = `/perusteenosat/{id}/palauta/{versioId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'versioId'}}`, encodeURIComponent(String(versioId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    unlockByTutkinnonOsaViite (viiteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling unlockByTutkinnonOsaViite.')
      }
      const localVarPath = `/perusteenosat/tutkinnonosaviite/{viiteId}/lukko`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    unlockPerusteenOsa (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling unlockPerusteenOsa.')
      }
      const localVarPath = `/perusteenosat/{id}/lukko`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {number} osaamistavoiteId
         * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateOsaamistavoite.')
      }
      // verify required parameter 'osaAlueId' is not null or undefined
      if (osaAlueId === null || osaAlueId === undefined) {
        throw new RequiredError('osaAlueId', 'Required parameter osaAlueId was null or undefined when calling updateOsaamistavoite.')
      }
      // verify required parameter 'osaamistavoiteId' is not null or undefined
      if (osaamistavoiteId === null || osaamistavoiteId === undefined) {
        throw new RequiredError('osaamistavoiteId', 'Required parameter osaamistavoiteId was null or undefined when calling updateOsaamistavoite.')
      }
      const localVarPath = `/perusteenosat/{id}/osaalue/{osaAlueId}/osaamistavoite/{osaamistavoiteId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'osaAlueId'}}`, encodeURIComponent(String(osaAlueId)))
        .replace(`{${'osaamistavoiteId'}}`, encodeURIComponent(String(osaamistavoiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'OsaamistavoiteLaajaDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(OsaamistavoiteLaajaDto || {}) : (OsaamistavoiteLaajaDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {PerusteenOsaUpdateDto} [PerusteenOsaUpdateDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteenOsa (id: number, PerusteenOsaUpdateDto?: PerusteenOsaUpdateDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updatePerusteenOsa.')
      }
      const localVarPath = `/perusteenosat/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'PerusteenOsaUpdateDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(PerusteenOsaUpdateDto || {}) : (PerusteenOsaUpdateDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} osaAlueId
         * @param {OsaAlueKokonaanDto} [OsaAlueKokonaanDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, OsaAlueKokonaanDto?: OsaAlueKokonaanDto, options: any = {}): RequestArgs {
      // verify required parameter 'viiteId' is not null or undefined
      if (viiteId === null || viiteId === undefined) {
        throw new RequiredError('viiteId', 'Required parameter viiteId was null or undefined when calling updateTutkinnonOsaOsaAlue.')
      }
      // verify required parameter 'osaAlueId' is not null or undefined
      if (osaAlueId === null || osaAlueId === undefined) {
        throw new RequiredError('osaAlueId', 'Required parameter osaAlueId was null or undefined when calling updateTutkinnonOsaOsaAlue.')
      }
      const localVarPath = `/perusteenosat/{viiteId}/osaalue/{osaAlueId}`
        .replace(`{${'viiteId'}}`, encodeURIComponent(String(viiteId)))
        .replace(`{${'osaAlueId'}}`, encodeURIComponent(String(osaAlueId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'OsaAlueKokonaanDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(OsaAlueKokonaanDto || {}) : (OsaAlueKokonaanDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PerusteenosatApi - functional programming interface
 * @export
 */
export const PerusteenosatApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOsaamistavoite (id: number, osaAlueId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsaamistavoiteLaajaDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).addOsaamistavoite(id, osaAlueId, OsaamistavoiteLaajaDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {OsaAlueLaajaDto} [OsaAlueLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkinnonOsaOsaAlue (id: number, OsaAlueLaajaDto?: OsaAlueLaajaDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsaAlueLaajaDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).addTutkinnonOsaOsaAlue(id, OsaAlueLaajaDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    checkLockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LukkoDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).checkLockByTutkinnonOsaViite(viiteId, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    checkPerusteenOsaLock (id: number, If_None_Match?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LukkoDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).checkPerusteenOsaLock(id, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deletePerusteenOsa (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).deletePerusteenOsa(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOsaamistavoitteet (id: number, osaAlueId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OsaamistavoiteLaajaDto>> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getOsaamistavoitteet(id, osaAlueId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOwningProjektit (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteprojektinPerusteenosaDto>> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getOwningProjektit(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsa (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Laaja> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsa(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersio (id: number, versioId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Laaja> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsaVersio(id, versioId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersioByViite (id: number, versioId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteenOsaDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsaVersioByViite(id, versioId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersiot (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CombinedDtoRevisionHenkiloTietoDto>> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsaVersiot(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaViiteVersiot (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CombinedDtoRevisionHenkiloTietoDto>> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsaViiteVersiot(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} nimi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatAllWithName (nimi: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Suppea>> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsatAllWithName(nimi, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatByViite (viiteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Laaja> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsatByViite(viiteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatByViiteSisalto (viiteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Laaja> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getPerusteenOsatByViiteSisalto(viiteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsaAlueKokonaanDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getTutkinnonOsaOsaAlue(viiteId, osaAlueId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlueet (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OsaAlueKokonaanDto>> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getTutkinnonOsaOsaAlueet(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlueetVersio (id: number, versioId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OsaAlueKokonaanDto>> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).getTutkinnonOsaOsaAlueetVersio(id, versioId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LukkoDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).lockByTutkinnonOsaViite(viiteId, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockByTutkinnonOsaViitePut (viiteId: number, If_None_Match?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LukkoDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).lockByTutkinnonOsaViitePut(viiteId, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockPerusteenOsa (id: number, If_None_Match?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LukkoDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).lockPerusteenOsa(id, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockPerusteenOsaPut (id: number, If_None_Match?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LukkoDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).lockPerusteenOsaPut(id, If_None_Match, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeOsaAlue (id: number, osaAlueId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).removeOsaAlue(id, osaAlueId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {number} osaamistavoiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).removeOsaamistavoite(id, osaAlueId, osaamistavoiteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    revertPerusteenOsaToVersio (id: number, versioId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Laaja> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).revertPerusteenOsaToVersio(id, versioId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    unlockByTutkinnonOsaViite (viiteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).unlockByTutkinnonOsaViite(viiteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    unlockPerusteenOsa (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).unlockPerusteenOsa(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {number} osaamistavoiteId
         * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsaamistavoiteLaajaDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).updateOsaamistavoite(id, osaAlueId, osaamistavoiteId, OsaamistavoiteLaajaDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {PerusteenOsaUpdateDto} [PerusteenOsaUpdateDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteenOsa (id: number, PerusteenOsaUpdateDto?: PerusteenOsaUpdateDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Laaja> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).updatePerusteenOsa(id, PerusteenOsaUpdateDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} osaAlueId
         * @param {OsaAlueKokonaanDto} [OsaAlueKokonaanDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, OsaAlueKokonaanDto?: OsaAlueKokonaanDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OsaAlueKokonaanDto> {
      const localVarAxiosArgs = PerusteenosatApiAxiosParamCreator(configuration).updateTutkinnonOsaOsaAlue(viiteId, osaAlueId, OsaAlueKokonaanDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * PerusteenosatApi - factory interface
 * @export
 */
export const PerusteenosatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addOsaamistavoite (id: number, osaAlueId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options?: any) {
      return PerusteenosatApiFp(configuration).addOsaamistavoite(id, osaAlueId, OsaamistavoiteLaajaDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {OsaAlueLaajaDto} [OsaAlueLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkinnonOsaOsaAlue (id: number, OsaAlueLaajaDto?: OsaAlueLaajaDto, options?: any) {
      return PerusteenosatApiFp(configuration).addTutkinnonOsaOsaAlue(id, OsaAlueLaajaDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    checkLockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options?: any) {
      return PerusteenosatApiFp(configuration).checkLockByTutkinnonOsaViite(viiteId, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    checkPerusteenOsaLock (id: number, If_None_Match?: number, options?: any) {
      return PerusteenosatApiFp(configuration).checkPerusteenOsaLock(id, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deletePerusteenOsa (id: number, options?: any) {
      return PerusteenosatApiFp(configuration).deletePerusteenOsa(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOsaamistavoitteet (id: number, osaAlueId: number, options?: any) {
      return PerusteenosatApiFp(configuration).getOsaamistavoitteet(id, osaAlueId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOwningProjektit (id: number, options?: any) {
      return PerusteenosatApiFp(configuration).getOwningProjektit(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsa (id: number, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsa(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersio (id: number, versioId: number, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsaVersio(id, versioId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersioByViite (id: number, versioId: number, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsaVersioByViite(id, versioId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaVersiot (id: number, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsaVersiot(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsaViiteVersiot (id: number, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsaViiteVersiot(id, options)(axios, basePath)
    },
    /**
         *
         * @param {string} nimi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatAllWithName (nimi: string, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsatAllWithName(nimi, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatByViite (viiteId: number, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsatByViite(viiteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenOsatByViiteSisalto (viiteId: number, options?: any) {
      return PerusteenosatApiFp(configuration).getPerusteenOsatByViiteSisalto(viiteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, options?: any) {
      return PerusteenosatApiFp(configuration).getTutkinnonOsaOsaAlue(viiteId, osaAlueId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlueet (id: number, options?: any) {
      return PerusteenosatApiFp(configuration).getTutkinnonOsaOsaAlueet(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaOsaAlueetVersio (id: number, versioId: number, options?: any) {
      return PerusteenosatApiFp(configuration).getTutkinnonOsaOsaAlueetVersio(id, versioId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options?: any) {
      return PerusteenosatApiFp(configuration).lockByTutkinnonOsaViite(viiteId, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockByTutkinnonOsaViitePut (viiteId: number, If_None_Match?: number, options?: any) {
      return PerusteenosatApiFp(configuration).lockByTutkinnonOsaViitePut(viiteId, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockPerusteenOsa (id: number, If_None_Match?: number, options?: any) {
      return PerusteenosatApiFp(configuration).lockPerusteenOsa(id, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} [If_None_Match]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    lockPerusteenOsaPut (id: number, If_None_Match?: number, options?: any) {
      return PerusteenosatApiFp(configuration).lockPerusteenOsaPut(id, If_None_Match, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeOsaAlue (id: number, osaAlueId: number, options?: any) {
      return PerusteenosatApiFp(configuration).removeOsaAlue(id, osaAlueId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {number} osaamistavoiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, options?: any) {
      return PerusteenosatApiFp(configuration).removeOsaamistavoite(id, osaAlueId, osaamistavoiteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    revertPerusteenOsaToVersio (id: number, versioId: number, options?: any) {
      return PerusteenosatApiFp(configuration).revertPerusteenOsaToVersio(id, versioId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    unlockByTutkinnonOsaViite (viiteId: number, options?: any) {
      return PerusteenosatApiFp(configuration).unlockByTutkinnonOsaViite(viiteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    unlockPerusteenOsa (id: number, options?: any) {
      return PerusteenosatApiFp(configuration).unlockPerusteenOsa(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} osaAlueId
         * @param {number} osaamistavoiteId
         * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options?: any) {
      return PerusteenosatApiFp(configuration).updateOsaamistavoite(id, osaAlueId, osaamistavoiteId, OsaamistavoiteLaajaDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {PerusteenOsaUpdateDto} [PerusteenOsaUpdateDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePerusteenOsa (id: number, PerusteenOsaUpdateDto?: PerusteenOsaUpdateDto, options?: any) {
      return PerusteenosatApiFp(configuration).updatePerusteenOsa(id, PerusteenOsaUpdateDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} viiteId
         * @param {number} osaAlueId
         * @param {OsaAlueKokonaanDto} [OsaAlueKokonaanDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, OsaAlueKokonaanDto?: OsaAlueKokonaanDto, options?: any) {
      return PerusteenosatApiFp(configuration).updateTutkinnonOsaOsaAlue(viiteId, osaAlueId, OsaAlueKokonaanDto, options)(axios, basePath)
    }
  }
}

/**
 * PerusteenosatApi - object-oriented interface
 * @export
 * @class PerusteenosatApi
 * @extends {BaseAPI}
 */
export class PerusteenosatApi extends BaseAPI {
  /**
     *
     * @param {number} id
     * @param {number} osaAlueId
     * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public addOsaamistavoite (id: number, osaAlueId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options?: any) {
    return PerusteenosatApiFp(this.configuration).addOsaamistavoite(id, osaAlueId, OsaamistavoiteLaajaDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {OsaAlueLaajaDto} [OsaAlueLaajaDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public addTutkinnonOsaOsaAlue (id: number, OsaAlueLaajaDto?: OsaAlueLaajaDto, options?: any) {
    return PerusteenosatApiFp(this.configuration).addTutkinnonOsaOsaAlue(id, OsaAlueLaajaDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {number} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public checkLockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).checkLockByTutkinnonOsaViite(viiteId, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public checkPerusteenOsaLock (id: number, If_None_Match?: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).checkPerusteenOsaLock(id, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public deletePerusteenOsa (id: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).deletePerusteenOsa(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} osaAlueId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getOsaamistavoitteet (id: number, osaAlueId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getOsaamistavoitteet(id, osaAlueId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getOwningProjektit (id: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getOwningProjektit(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsa (id: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsa(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} versioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsaVersio (id: number, versioId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsaVersio(id, versioId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} versioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsaVersioByViite (id: number, versioId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsaVersioByViite(id, versioId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsaVersiot (id: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsaVersiot(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsaViiteVersiot (id: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsaViiteVersiot(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} nimi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsatAllWithName (nimi: string, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsatAllWithName(nimi, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsatByViite (viiteId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsatByViite(viiteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getPerusteenOsatByViiteSisalto (viiteId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getPerusteenOsatByViiteSisalto(viiteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {number} osaAlueId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getTutkinnonOsaOsaAlue(viiteId, osaAlueId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getTutkinnonOsaOsaAlueet (id: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getTutkinnonOsaOsaAlueet(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} versioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public getTutkinnonOsaOsaAlueetVersio (id: number, versioId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).getTutkinnonOsaOsaAlueetVersio(id, versioId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {number} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public lockByTutkinnonOsaViite (viiteId: number, If_None_Match?: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).lockByTutkinnonOsaViite(viiteId, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {number} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public lockByTutkinnonOsaViitePut (viiteId: number, If_None_Match?: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).lockByTutkinnonOsaViitePut(viiteId, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public lockPerusteenOsa (id: number, If_None_Match?: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).lockPerusteenOsa(id, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} [If_None_Match]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public lockPerusteenOsaPut (id: number, If_None_Match?: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).lockPerusteenOsaPut(id, If_None_Match, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} osaAlueId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public removeOsaAlue (id: number, osaAlueId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).removeOsaAlue(id, osaAlueId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} osaAlueId
     * @param {number} osaamistavoiteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public removeOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).removeOsaamistavoite(id, osaAlueId, osaamistavoiteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} versioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public revertPerusteenOsaToVersio (id: number, versioId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).revertPerusteenOsaToVersio(id, versioId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public unlockByTutkinnonOsaViite (viiteId: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).unlockByTutkinnonOsaViite(viiteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public unlockPerusteenOsa (id: number, options?: any) {
    return PerusteenosatApiFp(this.configuration).unlockPerusteenOsa(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} osaAlueId
     * @param {number} osaamistavoiteId
     * @param {OsaamistavoiteLaajaDto} [OsaamistavoiteLaajaDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public updateOsaamistavoite (id: number, osaAlueId: number, osaamistavoiteId: number, OsaamistavoiteLaajaDto?: OsaamistavoiteLaajaDto, options?: any) {
    return PerusteenosatApiFp(this.configuration).updateOsaamistavoite(id, osaAlueId, osaamistavoiteId, OsaamistavoiteLaajaDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {PerusteenOsaUpdateDto} [PerusteenOsaUpdateDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public updatePerusteenOsa (id: number, PerusteenOsaUpdateDto?: PerusteenOsaUpdateDto, options?: any) {
    return PerusteenosatApiFp(this.configuration).updatePerusteenOsa(id, PerusteenOsaUpdateDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} viiteId
     * @param {number} osaAlueId
     * @param {OsaAlueKokonaanDto} [OsaAlueKokonaanDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteenosatApi
     */
  public updateTutkinnonOsaOsaAlue (viiteId: number, osaAlueId: number, OsaAlueKokonaanDto?: OsaAlueKokonaanDto, options?: any) {
    return PerusteenosatApiFp(this.configuration).updateTutkinnonOsaOsaAlue(viiteId, osaAlueId, OsaAlueKokonaanDto, options)(this.axios, this.basePath)
  }
}

/**
 * PerusteetApi - axios parameter creator
 * @export
 */
export const PerusteetApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkintonimikekoodi (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addTutkintonimikekoodi.')
      }
      const localVarPath = `/perusteet/{perusteId}/tutkintonimikekoodit`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'TutkintonimikeKoodiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TutkintonimikeKoodiDto || {}) : (TutkintonimikeKoodiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkintonimikekoodiPut (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addTutkintonimikekoodiPut.')
      }
      const localVarPath = `/perusteet/{perusteId}/tutkintonimikekoodit`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'TutkintonimikeKoodiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TutkintonimikeKoodiDto || {}) : (TutkintonimikeKoodiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusopetus (options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/perusopetus`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteiden sisäinen haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {boolean} [tuleva] hae myös tulevatperusteet
         * @param {boolean} [siirtyma] hae myös siirtymäajalla olevat perusteet
         * @param {boolean} [voimassaolo] hae myös voimassaolevat perusteet
         * @param {boolean} [poistunut] hae myös poistuneet perusteet
         * @param {string} [nimi]
         * @param {Array<string>} [koulutusala]
         * @param {Array<string>} [koulutustyyppi] koulutustyyppi (koodistokoodi)
         * @param {Array<string>} [kieli] perusteen kieli
         * @param {Array<string>} [opintoala] opintoalakoodi
         * @param {string} [suoritustapa] AM-perusteet; naytto tai ops
         * @param {string} [koulutuskoodi]
         * @param {string} [diaarinumero]
         * @param {number} [muokattu] Perustetta muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC). Huomioi koko perusteen sisällön.
         * @param {boolean} [tutkintonimikkeet] hae myös tutkintonimikkeistä
         * @param {boolean} [tutkinnonosat] hae myös tutkinnon osista
         * @param {boolean} [osaamisalat] hae myös osaamisaloista
         * @param {boolean} [koulutusvienti] Haku ainoastaan koulutusviennistä
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteet (sivu?: number, sivukoko?: number, tuleva?: boolean, siirtyma?: boolean, voimassaolo?: boolean, poistunut?: boolean, nimi?: string, koulutusala?: Array<string>, koulutustyyppi?: Array<string>, kieli?: Array<string>, opintoala?: Array<string>, suoritustapa?: string, koulutuskoodi?: string, diaarinumero?: string, muokattu?: number, tutkintonimikkeet?: boolean, tutkinnonosat?: boolean, osaamisalat?: boolean, koulutusvienti?: boolean, options: any = {}): RequestArgs {
      const localVarPath = `/perusteet`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sivu !== undefined) {
        localVarQueryParameter['sivu'] = sivu
      }

      if (sivukoko !== undefined) {
        localVarQueryParameter['sivukoko'] = sivukoko
      }

      if (tuleva !== undefined) {
        localVarQueryParameter['tuleva'] = tuleva
      }

      if (siirtyma !== undefined) {
        localVarQueryParameter['siirtyma'] = siirtyma
      }

      if (voimassaolo !== undefined) {
        localVarQueryParameter['voimassaolo'] = voimassaolo
      }

      if (poistunut !== undefined) {
        localVarQueryParameter['poistunut'] = poistunut
      }

      if (nimi !== undefined) {
        localVarQueryParameter['nimi'] = nimi
      }

      if (koulutusala) {
        localVarQueryParameter['koulutusala'] = koulutusala
      }

      if (koulutustyyppi) {
        localVarQueryParameter['koulutustyyppi'] = koulutustyyppi
      }

      if (kieli) {
        localVarQueryParameter['kieli'] = kieli
      }

      if (opintoala) {
        localVarQueryParameter['opintoala'] = opintoala
      }

      if (suoritustapa !== undefined) {
        localVarQueryParameter['suoritustapa'] = suoritustapa
      }

      if (koulutuskoodi !== undefined) {
        localVarQueryParameter['koulutuskoodi'] = koulutuskoodi
      }

      if (diaarinumero !== undefined) {
        localVarQueryParameter['diaarinumero'] = diaarinumero
      }

      if (muokattu !== undefined) {
        localVarQueryParameter['muokattu'] = muokattu
      }

      if (tutkintonimikkeet !== undefined) {
        localVarQueryParameter['tutkintonimikkeet'] = tutkintonimikkeet
      }

      if (tutkinnonosat !== undefined) {
        localVarQueryParameter['tutkinnonosat'] = tutkinnonosat
      }

      if (osaamisalat !== undefined) {
        localVarQueryParameter['osaamisalat'] = osaamisalat
      }

      if (koulutusvienti !== undefined) {
        localVarQueryParameter['koulutusvienti'] = koulutusvienti
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteetInfo (options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/info`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteiden sisäinen haku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteetInternal (options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/internal`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmmattitaitovaatimukset (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getAmmattitaitovaatimukset.')
      }
      const localVarPath = `/perusteet/{perusteId}/tutkinnonosat/ammattitaitovaatimukset`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary Paikallisen puolen ammatillista laadintaa tukevat perusteet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmosaaOpsit (options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/amosaaops`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary Amosaa jaetun tutkinnon pohja
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmosaaPohja (options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/amosaapohja`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteen yksilöintietojen haku diaarinumerolla
         * @param {string} [diaarinumero]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getByDiaari (diaarinumero?: string, options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/diaari`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (diaarinumero !== undefined) {
        localVarQueryParameter['diaarinumero'] = diaarinumero
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteen kaikkien tietojen haku
         * @param {number} perusteId
         * @param {number} [rev]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKokoSisalto (perusteId: number, rev?: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getKokoSisalto.')
      }
      const localVarPath = `/perusteet/{perusteId}/kaikki`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (rev !== undefined) {
        localVarQueryParameter['rev'] = rev
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKvLiite (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getKvLiite.')
      }
      const localVarPath = `/perusteet/{perusteId}/kvliite`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteen tietojen haku
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getMeta (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getMeta.')
      }
      const localVarPath = `/perusteet/{perusteId}/meta`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getNavigation (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getNavigation.')
      }
      const localVarPath = `/perusteet/{perusteId}/navigaatio`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteen osaamisalojen kuvaukset koulutustarjontaa varten
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOsaamisalat (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getOsaamisalat.')
      }
      const localVarPath = `/perusteet/{perusteId}/osaamisalakuvaukset`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteKooste (options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/kooste`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteen uusin versio
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteVersion (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getPerusteVersion.')
      }
      const localVarPath = `/perusteet/{perusteId}/version`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary perusteen tietojen haku
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenTiedot (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getPerusteenTiedot.')
      }
      const localVarPath = `/perusteet/{perusteId}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapakoodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getSuoritustapa (perusteId: number, suoritustapakoodi: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getSuoritustapa.')
      }
      // verify required parameter 'suoritustapakoodi' is not null or undefined
      if (suoritustapakoodi === null || suoritustapakoodi === undefined) {
        throw new RequiredError('suoritustapakoodi', 'Required parameter suoritustapakoodi was null or undefined when calling getSuoritustapa.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapakoodi}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapakoodi'}}`, encodeURIComponent(String(suoritustapakoodi)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkintonimikekoodit (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getTutkintonimikekoodit.')
      }
      const localVarPath = `/perusteet/{perusteId}/tutkintonimikekoodit`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {string} kieli
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getUusimmatPerusteet (kieli: string, options: any = {}): RequestArgs {
      // verify required parameter 'kieli' is not null or undefined
      if (kieli === null || kieli === undefined) {
        throw new RequiredError('kieli', 'Required parameter kieli was null or undefined when calling getUusimmatPerusteet.')
      }
      const localVarPath = `/perusteet/uusimmat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (kieli !== undefined) {
        localVarQueryParameter['kieli'] = kieli
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getValittavatKielet (options: any = {}): RequestArgs {
      const localVarPath = `/perusteet/valittavatkielet`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    pushAllAmmattitaitovaatimuksetToKoodisto (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling pushAllAmmattitaitovaatimuksetToKoodisto.')
      }
      const localVarPath = `/perusteet/tutkinnonosat/ammattitaitovaatimuskoodisto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    pushAmmattitaitovaatimuksetToKoodisto (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling pushAmmattitaitovaatimuksetToKoodisto.')
      }
      const localVarPath = `/perusteet/{perusteId}/tutkinnonosat/ammattitaitovaatimuskoodisto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} tutkintonimikeKoodiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeTutkintonimikekoodi (perusteId: number, tutkintonimikeKoodiId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling removeTutkintonimikekoodi.')
      }
      // verify required parameter 'tutkintonimikeKoodiId' is not null or undefined
      if (tutkintonimikeKoodiId === null || tutkintonimikeKoodiId === undefined) {
        throw new RequiredError('tutkintonimikeKoodiId', 'Required parameter tutkintonimikeKoodiId was null or undefined when calling removeTutkintonimikekoodi.')
      }
      const localVarPath = `/perusteet/{perusteId}/tutkintonimikekoodit/{tutkintonimikeKoodiId}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'tutkintonimikeKoodiId'}}`, encodeURIComponent(String(tutkintonimikeKoodiId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {PerusteDto} [PerusteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePeruste (perusteId: number, PerusteDto?: PerusteDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling updatePeruste.')
      }
      const localVarPath = `/perusteet/{perusteId}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'PerusteDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(PerusteDto || {}) : (PerusteDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * PerusteetApi - functional programming interface
 * @export
 */
export const PerusteetApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkintonimikekoodi (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TutkintonimikeKoodiDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).addTutkintonimikekoodi(perusteId, TutkintonimikeKoodiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkintonimikekoodiPut (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TutkintonimikeKoodiDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).addTutkintonimikekoodiPut(perusteId, TutkintonimikeKoodiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusopetus (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteInfoDto>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getAllPerusopetus(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteiden sisäinen haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {boolean} [tuleva] hae myös tulevatperusteet
         * @param {boolean} [siirtyma] hae myös siirtymäajalla olevat perusteet
         * @param {boolean} [voimassaolo] hae myös voimassaolevat perusteet
         * @param {boolean} [poistunut] hae myös poistuneet perusteet
         * @param {string} [nimi]
         * @param {Array<string>} [koulutusala]
         * @param {Array<string>} [koulutustyyppi] koulutustyyppi (koodistokoodi)
         * @param {Array<string>} [kieli] perusteen kieli
         * @param {Array<string>} [opintoala] opintoalakoodi
         * @param {string} [suoritustapa] AM-perusteet; naytto tai ops
         * @param {string} [koulutuskoodi]
         * @param {string} [diaarinumero]
         * @param {number} [muokattu] Perustetta muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC). Huomioi koko perusteen sisällön.
         * @param {boolean} [tutkintonimikkeet] hae myös tutkintonimikkeistä
         * @param {boolean} [tutkinnonosat] hae myös tutkinnon osista
         * @param {boolean} [osaamisalat] hae myös osaamisaloista
         * @param {boolean} [koulutusvienti] Haku ainoastaan koulutusviennistä
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteet (sivu?: number, sivukoko?: number, tuleva?: boolean, siirtyma?: boolean, voimassaolo?: boolean, poistunut?: boolean, nimi?: string, koulutusala?: Array<string>, koulutustyyppi?: Array<string>, kieli?: Array<string>, opintoala?: Array<string>, suoritustapa?: string, koulutuskoodi?: string, diaarinumero?: string, muokattu?: number, tutkintonimikkeet?: boolean, tutkinnonosat?: boolean, osaamisalat?: boolean, koulutusvienti?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePerusteHakuDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getAllPerusteet(sivu, sivukoko, tuleva, siirtyma, voimassaolo, poistunut, nimi, koulutusala, koulutustyyppi, kieli, opintoala, suoritustapa, koulutuskoodi, diaarinumero, muokattu, tutkintonimikkeet, tutkinnonosat, osaamisalat, koulutusvienti, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteetInfo (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePerusteInfoDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getAllPerusteetInfo(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteiden sisäinen haku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteetInternal (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagePerusteHakuInternalDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getAllPerusteetInternal(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmmattitaitovaatimukset (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ammattitaitovaatimus2019Dto>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getAmmattitaitovaatimukset(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary Paikallisen puolen ammatillista laadintaa tukevat perusteet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmosaaOpsit (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteHakuDto>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getAmosaaOpsit(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary Amosaa jaetun tutkinnon pohja
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmosaaPohja (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteKaikkiDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getAmosaaPohja(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteen yksilöintietojen haku diaarinumerolla
         * @param {string} [diaarinumero]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getByDiaari (diaarinumero?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteInfoDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getByDiaari(diaarinumero, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteen kaikkien tietojen haku
         * @param {number} perusteId
         * @param {number} [rev]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKokoSisalto (perusteId: number, rev?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteKaikkiDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getKokoSisalto(perusteId, rev, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKvLiite (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getKvLiite(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteen tietojen haku
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getMeta (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteInfoDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getMeta(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getNavigation (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NavigationNodeDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getNavigation(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteen osaamisalojen kuvaukset koulutustarjontaa varten
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOsaamisalat (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: { [key: string]: Array<TekstiKappaleDto>; }; }> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getOsaamisalat(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteKooste (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteKoosteDto>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getPerusteKooste(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteen uusin versio
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteVersion (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteVersionDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getPerusteVersion(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary perusteen tietojen haku
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenTiedot (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getPerusteenTiedot(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapakoodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getSuoritustapa (perusteId: number, suoritustapakoodi: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuoritustapaDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getSuoritustapa(perusteId, suoritustapakoodi, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkintonimikekoodit (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CombinedDtoTutkintonimikeKoodiDtoHashMapStringKoodistoKoodiDto>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getTutkintonimikekoodit(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {string} kieli
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getUusimmatPerusteet (kieli: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PerusteDto>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getUusimmatPerusteet(kieli, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getValittavatKielet (options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).getValittavatKielet(options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    pushAllAmmattitaitovaatimuksetToKoodisto (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).pushAllAmmattitaitovaatimuksetToKoodisto(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    pushAmmattitaitovaatimuksetToKoodisto (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<KoodiDto>> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).pushAmmattitaitovaatimuksetToKoodisto(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} tutkintonimikeKoodiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeTutkintonimikekoodi (perusteId: number, tutkintonimikeKoodiId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TutkintonimikeKoodiDto> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).removeTutkintonimikekoodi(perusteId, tutkintonimikeKoodiId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {PerusteDto} [PerusteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePeruste (perusteId: number, PerusteDto?: PerusteDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = PerusteetApiAxiosParamCreator(configuration).updatePeruste(perusteId, PerusteDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * PerusteetApi - factory interface
 * @export
 */
export const PerusteetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkintonimikekoodi (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options?: any) {
      return PerusteetApiFp(configuration).addTutkintonimikekoodi(perusteId, TutkintonimikeKoodiDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTutkintonimikekoodiPut (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options?: any) {
      return PerusteetApiFp(configuration).addTutkintonimikekoodiPut(perusteId, TutkintonimikeKoodiDto, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusopetus (options?: any) {
      return PerusteetApiFp(configuration).getAllPerusopetus(options)(axios, basePath)
    },
    /**
         *
         * @summary perusteiden sisäinen haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {boolean} [tuleva] hae myös tulevatperusteet
         * @param {boolean} [siirtyma] hae myös siirtymäajalla olevat perusteet
         * @param {boolean} [voimassaolo] hae myös voimassaolevat perusteet
         * @param {boolean} [poistunut] hae myös poistuneet perusteet
         * @param {string} [nimi]
         * @param {Array<string>} [koulutusala]
         * @param {Array<string>} [koulutustyyppi] koulutustyyppi (koodistokoodi)
         * @param {Array<string>} [kieli] perusteen kieli
         * @param {Array<string>} [opintoala] opintoalakoodi
         * @param {string} [suoritustapa] AM-perusteet; naytto tai ops
         * @param {string} [koulutuskoodi]
         * @param {string} [diaarinumero]
         * @param {number} [muokattu] Perustetta muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC). Huomioi koko perusteen sisällön.
         * @param {boolean} [tutkintonimikkeet] hae myös tutkintonimikkeistä
         * @param {boolean} [tutkinnonosat] hae myös tutkinnon osista
         * @param {boolean} [osaamisalat] hae myös osaamisaloista
         * @param {boolean} [koulutusvienti] Haku ainoastaan koulutusviennistä
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteet (sivu?: number, sivukoko?: number, tuleva?: boolean, siirtyma?: boolean, voimassaolo?: boolean, poistunut?: boolean, nimi?: string, koulutusala?: Array<string>, koulutustyyppi?: Array<string>, kieli?: Array<string>, opintoala?: Array<string>, suoritustapa?: string, koulutuskoodi?: string, diaarinumero?: string, muokattu?: number, tutkintonimikkeet?: boolean, tutkinnonosat?: boolean, osaamisalat?: boolean, koulutusvienti?: boolean, options?: any) {
      return PerusteetApiFp(configuration).getAllPerusteet(sivu, sivukoko, tuleva, siirtyma, voimassaolo, poistunut, nimi, koulutusala, koulutustyyppi, kieli, opintoala, suoritustapa, koulutuskoodi, diaarinumero, muokattu, tutkintonimikkeet, tutkinnonosat, osaamisalat, koulutusvienti, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteetInfo (options?: any) {
      return PerusteetApiFp(configuration).getAllPerusteetInfo(options)(axios, basePath)
    },
    /**
         *
         * @summary perusteiden sisäinen haku
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllPerusteetInternal (options?: any) {
      return PerusteetApiFp(configuration).getAllPerusteetInternal(options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmmattitaitovaatimukset (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getAmmattitaitovaatimukset(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @summary Paikallisen puolen ammatillista laadintaa tukevat perusteet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmosaaOpsit (options?: any) {
      return PerusteetApiFp(configuration).getAmosaaOpsit(options)(axios, basePath)
    },
    /**
         *
         * @summary Amosaa jaetun tutkinnon pohja
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAmosaaPohja (options?: any) {
      return PerusteetApiFp(configuration).getAmosaaPohja(options)(axios, basePath)
    },
    /**
         *
         * @summary perusteen yksilöintietojen haku diaarinumerolla
         * @param {string} [diaarinumero]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getByDiaari (diaarinumero?: string, options?: any) {
      return PerusteetApiFp(configuration).getByDiaari(diaarinumero, options)(axios, basePath)
    },
    /**
         *
         * @summary perusteen kaikkien tietojen haku
         * @param {number} perusteId
         * @param {number} [rev]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKokoSisalto (perusteId: number, rev?: number, options?: any) {
      return PerusteetApiFp(configuration).getKokoSisalto(perusteId, rev, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getKvLiite (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getKvLiite(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @summary perusteen tietojen haku
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getMeta (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getMeta(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getNavigation (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getNavigation(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @summary perusteen osaamisalojen kuvaukset koulutustarjontaa varten
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getOsaamisalat (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getOsaamisalat(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteKooste (options?: any) {
      return PerusteetApiFp(configuration).getPerusteKooste(options)(axios, basePath)
    },
    /**
         *
         * @summary perusteen uusin versio
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteVersion (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getPerusteVersion(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @summary perusteen tietojen haku
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getPerusteenTiedot (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getPerusteenTiedot(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapakoodi
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getSuoritustapa (perusteId: number, suoritustapakoodi: string, options?: any) {
      return PerusteetApiFp(configuration).getSuoritustapa(perusteId, suoritustapakoodi, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkintonimikekoodit (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).getTutkintonimikekoodit(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {string} kieli
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getUusimmatPerusteet (kieli: string, options?: any) {
      return PerusteetApiFp(configuration).getUusimmatPerusteet(kieli, options)(axios, basePath)
    },
    /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getValittavatKielet (options?: any) {
      return PerusteetApiFp(configuration).getValittavatKielet(options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    pushAllAmmattitaitovaatimuksetToKoodisto (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).pushAllAmmattitaitovaatimuksetToKoodisto(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    pushAmmattitaitovaatimuksetToKoodisto (perusteId: number, options?: any) {
      return PerusteetApiFp(configuration).pushAmmattitaitovaatimuksetToKoodisto(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} tutkintonimikeKoodiId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeTutkintonimikekoodi (perusteId: number, tutkintonimikeKoodiId: number, options?: any) {
      return PerusteetApiFp(configuration).removeTutkintonimikekoodi(perusteId, tutkintonimikeKoodiId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {PerusteDto} [PerusteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updatePeruste (perusteId: number, PerusteDto?: PerusteDto, options?: any) {
      return PerusteetApiFp(configuration).updatePeruste(perusteId, PerusteDto, options)(axios, basePath)
    }
  }
}

/**
 * PerusteetApi - object-oriented interface
 * @export
 * @class PerusteetApi
 * @extends {BaseAPI}
 */
export class PerusteetApi extends BaseAPI {
  /**
     *
     * @param {number} perusteId
     * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public addTutkintonimikekoodi (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options?: any) {
    return PerusteetApiFp(this.configuration).addTutkintonimikekoodi(perusteId, TutkintonimikeKoodiDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {TutkintonimikeKoodiDto} [TutkintonimikeKoodiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public addTutkintonimikekoodiPut (perusteId: number, TutkintonimikeKoodiDto?: TutkintonimikeKoodiDto, options?: any) {
    return PerusteetApiFp(this.configuration).addTutkintonimikekoodiPut(perusteId, TutkintonimikeKoodiDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getAllPerusopetus (options?: any) {
    return PerusteetApiFp(this.configuration).getAllPerusopetus(options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteiden sisäinen haku
     * @param {number} [sivu]
     * @param {number} [sivukoko]
     * @param {boolean} [tuleva] hae myös tulevatperusteet
     * @param {boolean} [siirtyma] hae myös siirtymäajalla olevat perusteet
     * @param {boolean} [voimassaolo] hae myös voimassaolevat perusteet
     * @param {boolean} [poistunut] hae myös poistuneet perusteet
     * @param {string} [nimi]
     * @param {Array<string>} [koulutusala]
     * @param {Array<string>} [koulutustyyppi] koulutustyyppi (koodistokoodi)
     * @param {Array<string>} [kieli] perusteen kieli
     * @param {Array<string>} [opintoala] opintoalakoodi
     * @param {string} [suoritustapa] AM-perusteet; naytto tai ops
     * @param {string} [koulutuskoodi]
     * @param {string} [diaarinumero]
     * @param {number} [muokattu] Perustetta muokattu jälkeen (aikaleima; millisenkunteja alkaen 1970-01-01 00:00:00 UTC). Huomioi koko perusteen sisällön.
     * @param {boolean} [tutkintonimikkeet] hae myös tutkintonimikkeistä
     * @param {boolean} [tutkinnonosat] hae myös tutkinnon osista
     * @param {boolean} [osaamisalat] hae myös osaamisaloista
     * @param {boolean} [koulutusvienti] Haku ainoastaan koulutusviennistä
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getAllPerusteet (sivu?: number, sivukoko?: number, tuleva?: boolean, siirtyma?: boolean, voimassaolo?: boolean, poistunut?: boolean, nimi?: string, koulutusala?: Array<string>, koulutustyyppi?: Array<string>, kieli?: Array<string>, opintoala?: Array<string>, suoritustapa?: string, koulutuskoodi?: string, diaarinumero?: string, muokattu?: number, tutkintonimikkeet?: boolean, tutkinnonosat?: boolean, osaamisalat?: boolean, koulutusvienti?: boolean, options?: any) {
    return PerusteetApiFp(this.configuration).getAllPerusteet(sivu, sivukoko, tuleva, siirtyma, voimassaolo, poistunut, nimi, koulutusala, koulutustyyppi, kieli, opintoala, suoritustapa, koulutuskoodi, diaarinumero, muokattu, tutkintonimikkeet, tutkinnonosat, osaamisalat, koulutusvienti, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getAllPerusteetInfo (options?: any) {
    return PerusteetApiFp(this.configuration).getAllPerusteetInfo(options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteiden sisäinen haku
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getAllPerusteetInternal (options?: any) {
    return PerusteetApiFp(this.configuration).getAllPerusteetInternal(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getAmmattitaitovaatimukset (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getAmmattitaitovaatimukset(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary Paikallisen puolen ammatillista laadintaa tukevat perusteet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getAmosaaOpsit (options?: any) {
    return PerusteetApiFp(this.configuration).getAmosaaOpsit(options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary Amosaa jaetun tutkinnon pohja
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getAmosaaPohja (options?: any) {
    return PerusteetApiFp(this.configuration).getAmosaaPohja(options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteen yksilöintietojen haku diaarinumerolla
     * @param {string} [diaarinumero]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getByDiaari (diaarinumero?: string, options?: any) {
    return PerusteetApiFp(this.configuration).getByDiaari(diaarinumero, options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteen kaikkien tietojen haku
     * @param {number} perusteId
     * @param {number} [rev]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getKokoSisalto (perusteId: number, rev?: number, options?: any) {
    return PerusteetApiFp(this.configuration).getKokoSisalto(perusteId, rev, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getKvLiite (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getKvLiite(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteen tietojen haku
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getMeta (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getMeta(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getNavigation (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getNavigation(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteen osaamisalojen kuvaukset koulutustarjontaa varten
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getOsaamisalat (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getOsaamisalat(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getPerusteKooste (options?: any) {
    return PerusteetApiFp(this.configuration).getPerusteKooste(options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteen uusin versio
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getPerusteVersion (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getPerusteVersion(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary perusteen tietojen haku
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getPerusteenTiedot (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getPerusteenTiedot(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} suoritustapakoodi
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getSuoritustapa (perusteId: number, suoritustapakoodi: string, options?: any) {
    return PerusteetApiFp(this.configuration).getSuoritustapa(perusteId, suoritustapakoodi, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getTutkintonimikekoodit (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).getTutkintonimikekoodit(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {string} kieli
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getUusimmatPerusteet (kieli: string, options?: any) {
    return PerusteetApiFp(this.configuration).getUusimmatPerusteet(kieli, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public getValittavatKielet (options?: any) {
    return PerusteetApiFp(this.configuration).getValittavatKielet(options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public pushAllAmmattitaitovaatimuksetToKoodisto (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).pushAllAmmattitaitovaatimuksetToKoodisto(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public pushAmmattitaitovaatimuksetToKoodisto (perusteId: number, options?: any) {
    return PerusteetApiFp(this.configuration).pushAmmattitaitovaatimuksetToKoodisto(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} tutkintonimikeKoodiId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public removeTutkintonimikekoodi (perusteId: number, tutkintonimikeKoodiId: number, options?: any) {
    return PerusteetApiFp(this.configuration).removeTutkintonimikekoodi(perusteId, tutkintonimikeKoodiId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {PerusteDto} [PerusteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PerusteetApi
     */
  public updatePeruste (perusteId: number, PerusteDto?: PerusteDto, options?: any) {
    return PerusteetApiFp(this.configuration).updatePeruste(perusteId, PerusteDto, options)(this.axios, this.basePath)
  }
}

/**
 * SisallotApi - axios parameter creator
 * @export
 */
export const SisallotApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {number} perusteenosaViiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoLapsi (perusteId: number, suoritustapa: string, perusteenosaViiteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addSisaltoLapsi.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling addSisaltoLapsi.')
      }
      // verify required parameter 'perusteenosaViiteId' is not null or undefined
      if (perusteenosaViiteId === null || perusteenosaViiteId === undefined) {
        throw new RequiredError('perusteenosaViiteId', 'Required parameter perusteenosaViiteId was null or undefined when calling addSisaltoLapsi.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto/{perusteenosaViiteId}/lapsi`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
        .replace(`{${'perusteenosaViiteId'}}`, encodeURIComponent(String(perusteenosaViiteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addSisaltoUUSI.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling addSisaltoUUSI.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Matala' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Matala || {}) : (Matala || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {number} parentId
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoUusiLapsi (perusteId: number, suoritustapa: string, parentId: number, childId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addSisaltoUusiLapsi.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling addSisaltoUusiLapsi.')
      }
      // verify required parameter 'parentId' is not null or undefined
      if (parentId === null || parentId === undefined) {
        throw new RequiredError('parentId', 'Required parameter parentId was null or undefined when calling addSisaltoUusiLapsi.')
      }
      // verify required parameter 'childId' is not null or undefined
      if (childId === null || childId === undefined) {
        throw new RequiredError('childId', 'Required parameter childId was null or undefined when calling addSisaltoUusiLapsi.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto/{parentId}/lapsi/{childId}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
        .replace(`{${'parentId'}}`, encodeURIComponent(String(parentId)))
        .replace(`{${'childId'}}`, encodeURIComponent(String(childId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoViiteUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addSisaltoViiteUUSI.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling addSisaltoViiteUUSI.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Matala' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Matala || {}) : (Matala || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {string} [muoto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getSuoritustapaSisaltoUUSI (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', muoto?: string, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getSuoritustapaSisaltoUUSI.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling getSuoritustapaSisaltoUUSI.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (muoto !== undefined) {
        localVarQueryParameter['muoto'] = muoto
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kloonaaTekstiKappale (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling kloonaaTekstiKappale.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling kloonaaTekstiKappale.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling kloonaaTekstiKappale.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto/{id}/muokattavakopio`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeSisaltoViite (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling removeSisaltoViite.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling removeSisaltoViite.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling removeSisaltoViite.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {Laaja} [Laaja]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateSisaltoViiteWithPost (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling updateSisaltoViiteWithPost.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling updateSisaltoViiteWithPost.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateSisaltoViiteWithPost.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Laaja' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Laaja || {}) : (Laaja || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {Laaja} [Laaja]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateSisaltoViiteWithPut (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling updateSisaltoViiteWithPut.')
      }
      // verify required parameter 'suoritustapa' is not null or undefined
      if (suoritustapa === null || suoritustapa === undefined) {
        throw new RequiredError('suoritustapa', 'Required parameter suoritustapa was null or undefined when calling updateSisaltoViiteWithPut.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateSisaltoViiteWithPut.')
      }
      const localVarPath = `/perusteet/{perusteId}/suoritustavat/{suoritustapa}/sisalto/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'suoritustapa'}}`, encodeURIComponent(String(suoritustapa)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'Laaja' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(Laaja || {}) : (Laaja || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * SisallotApi - functional programming interface
 * @export
 */
export const SisallotApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {number} perusteenosaViiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoLapsi (perusteId: number, suoritustapa: string, perusteenosaViiteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Matala> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).addSisaltoLapsi(perusteId, suoritustapa, perusteenosaViiteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Matala> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).addSisaltoUUSI(perusteId, suoritustapa, Matala, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {number} parentId
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoUusiLapsi (perusteId: number, suoritustapa: string, parentId: number, childId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Matala> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).addSisaltoUusiLapsi(perusteId, suoritustapa, parentId, childId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoViiteUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Matala> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).addSisaltoViiteUUSI(perusteId, suoritustapa, Matala, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {string} [muoto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getSuoritustapaSisaltoUUSI (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', muoto?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PerusteenOsaViiteDtoObject> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).getSuoritustapaSisaltoUUSI(perusteId, suoritustapa, muoto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kloonaaTekstiKappale (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Laaja> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).kloonaaTekstiKappale(perusteId, suoritustapa, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeSisaltoViite (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).removeSisaltoViite(perusteId, suoritustapa, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {Laaja} [Laaja]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateSisaltoViiteWithPost (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).updateSisaltoViiteWithPost(perusteId, suoritustapa, id, Laaja, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {Laaja} [Laaja]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateSisaltoViiteWithPut (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = SisallotApiAxiosParamCreator(configuration).updateSisaltoViiteWithPut(perusteId, suoritustapa, id, Laaja, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * SisallotApi - factory interface
 * @export
 */
export const SisallotApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {number} perusteenosaViiteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoLapsi (perusteId: number, suoritustapa: string, perusteenosaViiteId: number, options?: any) {
      return SisallotApiFp(configuration).addSisaltoLapsi(perusteId, suoritustapa, perusteenosaViiteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options?: any) {
      return SisallotApiFp(configuration).addSisaltoUUSI(perusteId, suoritustapa, Matala, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {number} parentId
         * @param {number} childId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoUusiLapsi (perusteId: number, suoritustapa: string, parentId: number, childId: number, options?: any) {
      return SisallotApiFp(configuration).addSisaltoUusiLapsi(perusteId, suoritustapa, parentId, childId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {string} suoritustapa
         * @param {Matala} [Matala]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addSisaltoViiteUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options?: any) {
      return SisallotApiFp(configuration).addSisaltoViiteUUSI(perusteId, suoritustapa, Matala, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {string} [muoto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getSuoritustapaSisaltoUUSI (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', muoto?: string, options?: any) {
      return SisallotApiFp(configuration).getSuoritustapaSisaltoUUSI(perusteId, suoritustapa, muoto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    kloonaaTekstiKappale (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options?: any) {
      return SisallotApiFp(configuration).kloonaaTekstiKappale(perusteId, suoritustapa, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    removeSisaltoViite (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options?: any) {
      return SisallotApiFp(configuration).removeSisaltoViite(perusteId, suoritustapa, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {Laaja} [Laaja]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateSisaltoViiteWithPost (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options?: any) {
      return SisallotApiFp(configuration).updateSisaltoViiteWithPost(perusteId, suoritustapa, id, Laaja, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
         * @param {number} id
         * @param {Laaja} [Laaja]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateSisaltoViiteWithPut (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options?: any) {
      return SisallotApiFp(configuration).updateSisaltoViiteWithPut(perusteId, suoritustapa, id, Laaja, options)(axios, basePath)
    }
  }
}

/**
 * SisallotApi - object-oriented interface
 * @export
 * @class SisallotApi
 * @extends {BaseAPI}
 */
export class SisallotApi extends BaseAPI {
  /**
     *
     * @param {number} perusteId
     * @param {string} suoritustapa
     * @param {number} perusteenosaViiteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public addSisaltoLapsi (perusteId: number, suoritustapa: string, perusteenosaViiteId: number, options?: any) {
    return SisallotApiFp(this.configuration).addSisaltoLapsi(perusteId, suoritustapa, perusteenosaViiteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} suoritustapa
     * @param {Matala} [Matala]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public addSisaltoUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options?: any) {
    return SisallotApiFp(this.configuration).addSisaltoUUSI(perusteId, suoritustapa, Matala, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} suoritustapa
     * @param {number} parentId
     * @param {number} childId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public addSisaltoUusiLapsi (perusteId: number, suoritustapa: string, parentId: number, childId: number, options?: any) {
    return SisallotApiFp(this.configuration).addSisaltoUusiLapsi(perusteId, suoritustapa, parentId, childId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {string} suoritustapa
     * @param {Matala} [Matala]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public addSisaltoViiteUUSI (perusteId: number, suoritustapa: string, Matala?: Matala, options?: any) {
    return SisallotApiFp(this.configuration).addSisaltoViiteUUSI(perusteId, suoritustapa, Matala, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
     * @param {string} [muoto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public getSuoritustapaSisaltoUUSI (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', muoto?: string, options?: any) {
    return SisallotApiFp(this.configuration).getSuoritustapaSisaltoUUSI(perusteId, suoritustapa, muoto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public kloonaaTekstiKappale (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options?: any) {
    return SisallotApiFp(this.configuration).kloonaaTekstiKappale(perusteId, suoritustapa, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public removeSisaltoViite (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, options?: any) {
    return SisallotApiFp(this.configuration).removeSisaltoViite(perusteId, suoritustapa, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
     * @param {number} id
     * @param {Laaja} [Laaja]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public updateSisaltoViiteWithPost (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options?: any) {
    return SisallotApiFp(this.configuration).updateSisaltoViiteWithPost(perusteId, suoritustapa, id, Laaja, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019'} suoritustapa
     * @param {number} id
     * @param {Laaja} [Laaja]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SisallotApi
     */
  public updateSisaltoViiteWithPut (perusteId: number, suoritustapa: 'OPS' | 'NAYTTO' | 'REFORMI' | 'PERUSOPETUS' | 'LISAOPETUS' | 'VARHAISKASVATUS' | 'OPAS' | 'ESIOPETUS' | 'AIPE' | 'TPO' | 'LUKIOKOULUTUS' | 'LUKIOKOULUTUS2019', id: number, Laaja?: Laaja, options?: any) {
    return SisallotApiFp(this.configuration).updateSisaltoViiteWithPut(perusteId, suoritustapa, id, Laaja, options)(this.axios, this.basePath)
  }
}

/**
 * TermitApi - axios parameter creator
 * @export
 */
export const TermitApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {TermiDto} [TermiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTermi (perusteId: number, TermiDto?: TermiDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling addTermi.')
      }
      const localVarPath = `/perusteet/{perusteId}/termisto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'TermiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TermiDto || {}) : (TermiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteTermi (perusteId: number, id: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling deleteTermi.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteTermi.')
      }
      const localVarPath = `/perusteet/{perusteId}/termisto/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTermit (perusteId: number, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling getAllTermit.')
      }
      const localVarPath = `/perusteet/{perusteId}/termisto`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {TermiDto} [TermiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTermi (perusteId: number, id: number, TermiDto?: TermiDto, options: any = {}): RequestArgs {
      // verify required parameter 'perusteId' is not null or undefined
      if (perusteId === null || perusteId === undefined) {
        throw new RequiredError('perusteId', 'Required parameter perusteId was null or undefined when calling updateTermi.')
      }
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateTermi.')
      }
      const localVarPath = `/perusteet/{perusteId}/termisto/{id}`
        .replace(`{${'perusteId'}}`, encodeURIComponent(String(perusteId)))
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'TermiDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TermiDto || {}) : (TermiDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * TermitApi - functional programming interface
 * @export
 */
export const TermitApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {TermiDto} [TermiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTermi (perusteId: number, TermiDto?: TermiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermiDto> {
      const localVarAxiosArgs = TermitApiAxiosParamCreator(configuration).addTermi(perusteId, TermiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteTermi (perusteId: number, id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = TermitApiAxiosParamCreator(configuration).deleteTermi(perusteId, id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTermit (perusteId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TermiDto>> {
      const localVarAxiosArgs = TermitApiAxiosParamCreator(configuration).getAllTermit(perusteId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {TermiDto} [TermiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTermi (perusteId: number, id: number, TermiDto?: TermiDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermiDto> {
      const localVarAxiosArgs = TermitApiAxiosParamCreator(configuration).updateTermi(perusteId, id, TermiDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * TermitApi - factory interface
 * @export
 */
export const TermitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {number} perusteId
         * @param {TermiDto} [TermiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTermi (perusteId: number, TermiDto?: TermiDto, options?: any) {
      return TermitApiFp(configuration).addTermi(perusteId, TermiDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteTermi (perusteId: number, id: number, options?: any) {
      return TermitApiFp(configuration).deleteTermi(perusteId, id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTermit (perusteId: number, options?: any) {
      return TermitApiFp(configuration).getAllTermit(perusteId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} perusteId
         * @param {number} id
         * @param {TermiDto} [TermiDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTermi (perusteId: number, id: number, TermiDto?: TermiDto, options?: any) {
      return TermitApiFp(configuration).updateTermi(perusteId, id, TermiDto, options)(axios, basePath)
    }
  }
}

/**
 * TermitApi - object-oriented interface
 * @export
 * @class TermitApi
 * @extends {BaseAPI}
 */
export class TermitApi extends BaseAPI {
  /**
     *
     * @param {number} perusteId
     * @param {TermiDto} [TermiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermitApi
     */
  public addTermi (perusteId: number, TermiDto?: TermiDto, options?: any) {
    return TermitApiFp(this.configuration).addTermi(perusteId, TermiDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermitApi
     */
  public deleteTermi (perusteId: number, id: number, options?: any) {
    return TermitApiFp(this.configuration).deleteTermi(perusteId, id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermitApi
     */
  public getAllTermit (perusteId: number, options?: any) {
    return TermitApiFp(this.configuration).getAllTermit(perusteId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} perusteId
     * @param {number} id
     * @param {TermiDto} [TermiDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TermitApi
     */
  public updateTermi (perusteId: number, id: number, TermiDto?: TermiDto, options?: any) {
    return TermitApiFp(this.configuration).updateTermi(perusteId, id, TermiDto, options)(this.axios, this.basePath)
  }
}

/**
 * TiedotteetApi - axios parameter creator
 * @export
 */
export const TiedotteetApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTiedote (TiedoteDto?: TiedoteDto, options: any = {}): RequestArgs {
      const localVarPath = `/tiedotteet`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'TiedoteDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TiedoteDto || {}) : (TiedoteDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteTiedote (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling deleteTiedote.')
      }
      const localVarPath = `/tiedotteet/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary tiedotteiden haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {Array<string>} [kieli] tiedotteen kieli
         * @param {string} [nimi] hae nimellä
         * @param {number} [perusteId] hae perusteeseen liitetyt tiedotteet
         * @param {boolean} [perusteeton] hae perusteettomat tiedotteet
         * @param {boolean} [julkinen] hae julkiset tiedotteet
         * @param {boolean} [yleinen] hae yleiset tiedotteet
         * @param {Array<string>} [tiedoteJulkaisupaikat] tiedotteen julkaisupaikat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findTiedotteetBy (sivu?: number, sivukoko?: number, kieli?: Array<string>, nimi?: string, perusteId?: number, perusteeton?: boolean, julkinen?: boolean, yleinen?: boolean, tiedoteJulkaisupaikat?: Array<string>, options: any = {}): RequestArgs {
      const localVarPath = `/tiedotteet/haku`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sivu !== undefined) {
        localVarQueryParameter['sivu'] = sivu
      }

      if (sivukoko !== undefined) {
        localVarQueryParameter['sivukoko'] = sivukoko
      }

      if (kieli) {
        localVarQueryParameter['kieli'] = kieli
      }

      if (nimi !== undefined) {
        localVarQueryParameter['nimi'] = nimi
      }

      if (perusteId !== undefined) {
        localVarQueryParameter['perusteId'] = perusteId
      }

      if (perusteeton !== undefined) {
        localVarQueryParameter['perusteeton'] = perusteeton
      }

      if (julkinen !== undefined) {
        localVarQueryParameter['julkinen'] = julkinen
      }

      if (yleinen !== undefined) {
        localVarQueryParameter['yleinen'] = yleinen
      }

      if (tiedoteJulkaisupaikat) {
        localVarQueryParameter['tiedoteJulkaisupaikat'] = tiedoteJulkaisupaikat
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {boolean} [vainJulkiset]
         * @param {number} [perusteId]
         * @param {number} [alkaen]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTiedotteet (vainJulkiset?: boolean, perusteId?: number, alkaen?: number, options: any = {}): RequestArgs {
      const localVarPath = `/tiedotteet`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (vainJulkiset !== undefined) {
        localVarQueryParameter['vainJulkiset'] = vainJulkiset
      }

      if (perusteId !== undefined) {
        localVarQueryParameter['perusteId'] = perusteId
      }

      if (alkaen !== undefined) {
        localVarQueryParameter['alkaen'] = alkaen
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTiedote (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getTiedote.')
      }
      const localVarPath = `/tiedotteet/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTiedote (id: number, TiedoteDto?: TiedoteDto, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling updateTiedote.')
      }
      const localVarPath = `/tiedotteet/{id}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)
      const needsSerialization = (<any>'TiedoteDto' !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(TiedoteDto || {}) : (TiedoteDto || '')

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * TiedotteetApi - functional programming interface
 * @export
 */
export const TiedotteetApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTiedote (TiedoteDto?: TiedoteDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TiedoteDto> {
      const localVarAxiosArgs = TiedotteetApiAxiosParamCreator(configuration).addTiedote(TiedoteDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteTiedote (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = TiedotteetApiAxiosParamCreator(configuration).deleteTiedote(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary tiedotteiden haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {Array<string>} [kieli] tiedotteen kieli
         * @param {string} [nimi] hae nimellä
         * @param {number} [perusteId] hae perusteeseen liitetyt tiedotteet
         * @param {boolean} [perusteeton] hae perusteettomat tiedotteet
         * @param {boolean} [julkinen] hae julkiset tiedotteet
         * @param {boolean} [yleinen] hae yleiset tiedotteet
         * @param {Array<string>} [tiedoteJulkaisupaikat] tiedotteen julkaisupaikat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findTiedotteetBy (sivu?: number, sivukoko?: number, kieli?: Array<string>, nimi?: string, perusteId?: number, perusteeton?: boolean, julkinen?: boolean, yleinen?: boolean, tiedoteJulkaisupaikat?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTiedoteDto> {
      const localVarAxiosArgs = TiedotteetApiAxiosParamCreator(configuration).findTiedotteetBy(sivu, sivukoko, kieli, nimi, perusteId, perusteeton, julkinen, yleinen, tiedoteJulkaisupaikat, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {boolean} [vainJulkiset]
         * @param {number} [perusteId]
         * @param {number} [alkaen]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTiedotteet (vainJulkiset?: boolean, perusteId?: number, alkaen?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TiedoteDto>> {
      const localVarAxiosArgs = TiedotteetApiAxiosParamCreator(configuration).getAllTiedotteet(vainJulkiset, perusteId, alkaen, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTiedote (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TiedoteDto> {
      const localVarAxiosArgs = TiedotteetApiAxiosParamCreator(configuration).getTiedote(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTiedote (id: number, TiedoteDto?: TiedoteDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TiedoteDto> {
      const localVarAxiosArgs = TiedotteetApiAxiosParamCreator(configuration).updateTiedote(id, TiedoteDto, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * TiedotteetApi - factory interface
 * @export
 */
export const TiedotteetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    addTiedote (TiedoteDto?: TiedoteDto, options?: any) {
      return TiedotteetApiFp(configuration).addTiedote(TiedoteDto, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    deleteTiedote (id: number, options?: any) {
      return TiedotteetApiFp(configuration).deleteTiedote(id, options)(axios, basePath)
    },
    /**
         *
         * @summary tiedotteiden haku
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {Array<string>} [kieli] tiedotteen kieli
         * @param {string} [nimi] hae nimellä
         * @param {number} [perusteId] hae perusteeseen liitetyt tiedotteet
         * @param {boolean} [perusteeton] hae perusteettomat tiedotteet
         * @param {boolean} [julkinen] hae julkiset tiedotteet
         * @param {boolean} [yleinen] hae yleiset tiedotteet
         * @param {Array<string>} [tiedoteJulkaisupaikat] tiedotteen julkaisupaikat
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    findTiedotteetBy (sivu?: number, sivukoko?: number, kieli?: Array<string>, nimi?: string, perusteId?: number, perusteeton?: boolean, julkinen?: boolean, yleinen?: boolean, tiedoteJulkaisupaikat?: Array<string>, options?: any) {
      return TiedotteetApiFp(configuration).findTiedotteetBy(sivu, sivukoko, kieli, nimi, perusteId, perusteeton, julkinen, yleinen, tiedoteJulkaisupaikat, options)(axios, basePath)
    },
    /**
         *
         * @param {boolean} [vainJulkiset]
         * @param {number} [perusteId]
         * @param {number} [alkaen]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTiedotteet (vainJulkiset?: boolean, perusteId?: number, alkaen?: number, options?: any) {
      return TiedotteetApiFp(configuration).getAllTiedotteet(vainJulkiset, perusteId, alkaen, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTiedote (id: number, options?: any) {
      return TiedotteetApiFp(configuration).getTiedote(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {TiedoteDto} [TiedoteDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    updateTiedote (id: number, TiedoteDto?: TiedoteDto, options?: any) {
      return TiedotteetApiFp(configuration).updateTiedote(id, TiedoteDto, options)(axios, basePath)
    }
  }
}

/**
 * TiedotteetApi - object-oriented interface
 * @export
 * @class TiedotteetApi
 * @extends {BaseAPI}
 */
export class TiedotteetApi extends BaseAPI {
  /**
     *
     * @param {TiedoteDto} [TiedoteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiedotteetApi
     */
  public addTiedote (TiedoteDto?: TiedoteDto, options?: any) {
    return TiedotteetApiFp(this.configuration).addTiedote(TiedoteDto, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiedotteetApi
     */
  public deleteTiedote (id: number, options?: any) {
    return TiedotteetApiFp(this.configuration).deleteTiedote(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary tiedotteiden haku
     * @param {number} [sivu]
     * @param {number} [sivukoko]
     * @param {Array<string>} [kieli] tiedotteen kieli
     * @param {string} [nimi] hae nimellä
     * @param {number} [perusteId] hae perusteeseen liitetyt tiedotteet
     * @param {boolean} [perusteeton] hae perusteettomat tiedotteet
     * @param {boolean} [julkinen] hae julkiset tiedotteet
     * @param {boolean} [yleinen] hae yleiset tiedotteet
     * @param {Array<string>} [tiedoteJulkaisupaikat] tiedotteen julkaisupaikat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiedotteetApi
     */
  public findTiedotteetBy (sivu?: number, sivukoko?: number, kieli?: Array<string>, nimi?: string, perusteId?: number, perusteeton?: boolean, julkinen?: boolean, yleinen?: boolean, tiedoteJulkaisupaikat?: Array<string>, options?: any) {
    return TiedotteetApiFp(this.configuration).findTiedotteetBy(sivu, sivukoko, kieli, nimi, perusteId, perusteeton, julkinen, yleinen, tiedoteJulkaisupaikat, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {boolean} [vainJulkiset]
     * @param {number} [perusteId]
     * @param {number} [alkaen]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiedotteetApi
     */
  public getAllTiedotteet (vainJulkiset?: boolean, perusteId?: number, alkaen?: number, options?: any) {
    return TiedotteetApiFp(this.configuration).getAllTiedotteet(vainJulkiset, perusteId, alkaen, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiedotteetApi
     */
  public getTiedote (id: number, options?: any) {
    return TiedotteetApiFp(this.configuration).getTiedote(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {TiedoteDto} [TiedoteDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TiedotteetApi
     */
  public updateTiedote (id: number, TiedoteDto?: TiedoteDto, options?: any) {
    return TiedotteetApiFp(this.configuration).updateTiedote(id, TiedoteDto, options)(this.axios, this.basePath)
  }
}

/**
 * TutkinnonosatApi - axios parameter creator
 * @export
 */
export const TutkinnonosatApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @summary hae tutkinnon osiin liittyvät viitteet
         * @param {number} tutkinnonOsaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTutkinnonOsaViitteet (tutkinnonOsaId: number, options: any = {}): RequestArgs {
      // verify required parameter 'tutkinnonOsaId' is not null or undefined
      if (tutkinnonOsaId === null || tutkinnonOsaId === undefined) {
        throw new RequiredError('tutkinnonOsaId', 'Required parameter tutkinnonOsaId was null or undefined when calling getAllTutkinnonOsaViitteet.')
      }
      const localVarPath = `/tutkinnonosat/{tutkinnonOsaId}/viitteet`
        .replace(`{${'tutkinnonOsaId'}}`, encodeURIComponent(String(tutkinnonOsaId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @summary hae tutkinnon osia
         * @param {string} koodiUri tutkinnonosakoodi
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTutkinnonOsatBy (koodiUri: string, sivu?: number, sivukoko?: number, options: any = {}): RequestArgs {
      // verify required parameter 'koodiUri' is not null or undefined
      if (koodiUri === null || koodiUri === undefined) {
        throw new RequiredError('koodiUri', 'Required parameter koodiUri was null or undefined when calling getAllTutkinnonOsatBy.')
      }
      const localVarPath = `/tutkinnonosat`
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (sivu !== undefined) {
        localVarQueryParameter['sivu'] = sivu
      }

      if (sivukoko !== undefined) {
        localVarQueryParameter['sivukoko'] = sivukoko
      }

      if (koodiUri !== undefined) {
        localVarQueryParameter['koodiUri'] = koodiUri
      }

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * TutkinnonosatApi - functional programming interface
 * @export
 */
export const TutkinnonosatApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @summary hae tutkinnon osiin liittyvät viitteet
         * @param {number} tutkinnonOsaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTutkinnonOsaViitteet (tutkinnonOsaId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TutkinnonOsaViiteKontekstiDto>> {
      const localVarAxiosArgs = TutkinnonosatApiAxiosParamCreator(configuration).getAllTutkinnonOsaViitteet(tutkinnonOsaId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary hae tutkinnon osia
         * @param {string} koodiUri tutkinnonosakoodi
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTutkinnonOsatBy (koodiUri: string, sivu?: number, sivukoko?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTutkinnonOsaDto> {
      const localVarAxiosArgs = TutkinnonosatApiAxiosParamCreator(configuration).getAllTutkinnonOsatBy(koodiUri, sivu, sivukoko, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * TutkinnonosatApi - factory interface
 * @export
 */
export const TutkinnonosatApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @summary hae tutkinnon osiin liittyvät viitteet
         * @param {number} tutkinnonOsaId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTutkinnonOsaViitteet (tutkinnonOsaId: number, options?: any) {
      return TutkinnonosatApiFp(configuration).getAllTutkinnonOsaViitteet(tutkinnonOsaId, options)(axios, basePath)
    },
    /**
         *
         * @summary hae tutkinnon osia
         * @param {string} koodiUri tutkinnonosakoodi
         * @param {number} [sivu]
         * @param {number} [sivukoko]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getAllTutkinnonOsatBy (koodiUri: string, sivu?: number, sivukoko?: number, options?: any) {
      return TutkinnonosatApiFp(configuration).getAllTutkinnonOsatBy(koodiUri, sivu, sivukoko, options)(axios, basePath)
    }
  }
}

/**
 * TutkinnonosatApi - object-oriented interface
 * @export
 * @class TutkinnonosatApi
 * @extends {BaseAPI}
 */
export class TutkinnonosatApi extends BaseAPI {
  /**
     *
     * @summary hae tutkinnon osiin liittyvät viitteet
     * @param {number} tutkinnonOsaId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutkinnonosatApi
     */
  public getAllTutkinnonOsaViitteet (tutkinnonOsaId: number, options?: any) {
    return TutkinnonosatApiFp(this.configuration).getAllTutkinnonOsaViitteet(tutkinnonOsaId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @summary hae tutkinnon osia
     * @param {string} koodiUri tutkinnonosakoodi
     * @param {number} [sivu]
     * @param {number} [sivukoko]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutkinnonosatApi
     */
  public getAllTutkinnonOsatBy (koodiUri: string, sivu?: number, sivukoko?: number, options?: any) {
    return TutkinnonosatApiFp(this.configuration).getAllTutkinnonOsatBy(koodiUri, sivu, sivukoko, options)(this.axios, this.basePath)
  }
}

/**
 * TutkinnonosatPrivateApi - axios parameter creator
 * @export
 */
export const TutkinnonosatPrivateApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {string} koodiUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaByKoodi (koodiUri: string, options: any = {}): RequestArgs {
      // verify required parameter 'koodiUri' is not null or undefined
      if (koodiUri === null || koodiUri === undefined) {
        throw new RequiredError('koodiUri', 'Required parameter koodiUri was null or undefined when calling getTutkinnonOsaByKoodi.')
      }
      const localVarPath = `/tutkinnonosat/koodi/uniikki/{koodiUri}`
        .replace(`{${'koodiUri'}}`, encodeURIComponent(String(koodiUri)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getViiteVersio (id: number, versioId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getViiteVersio.')
      }
      // verify required parameter 'versioId' is not null or undefined
      if (versioId === null || versioId === undefined) {
        throw new RequiredError('versioId', 'Required parameter versioId was null or undefined when calling getViiteVersio.')
      }
      const localVarPath = `/tutkinnonosat/viite/{id}/versio/{versioId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'versioId'}}`, encodeURIComponent(String(versioId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getViiteVersiot (id: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling getViiteVersiot.')
      }
      const localVarPath = `/tutkinnonosat/viite/{id}/versiot`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    revertToVersio (id: number, versioId: number, options: any = {}): RequestArgs {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError('id', 'Required parameter id was null or undefined when calling revertToVersio.')
      }
      // verify required parameter 'versioId' is not null or undefined
      if (versioId === null || versioId === undefined) {
        throw new RequiredError('versioId', 'Required parameter versioId was null or undefined when calling revertToVersio.')
      }
      const localVarPath = `/tutkinnonosat/palauta/viite/{id}/versio/{versioId}`
        .replace(`{${'id'}}`, encodeURIComponent(String(id)))
        .replace(`{${'versioId'}}`, encodeURIComponent(String(versioId)))
      const localVarUrlObj = url.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options)
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query)
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers)

      return {
        url: url.format(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * TutkinnonosatPrivateApi - functional programming interface
 * @export
 */
export const TutkinnonosatPrivateApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @param {string} koodiUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaByKoodi (koodiUri: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
      const localVarAxiosArgs = TutkinnonosatPrivateApiAxiosParamCreator(configuration).getTutkinnonOsaByKoodi(koodiUri, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getViiteVersio (id: number, versioId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TutkinnonOsaViiteDto> {
      const localVarAxiosArgs = TutkinnonosatPrivateApiAxiosParamCreator(configuration).getViiteVersio(id, versioId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getViiteVersiot (id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CombinedDtoRevisionHenkiloTietoDto>> {
      const localVarAxiosArgs = TutkinnonosatPrivateApiAxiosParamCreator(configuration).getViiteVersiot(id, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    revertToVersio (id: number, versioId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TutkinnonOsaViiteDto> {
      const localVarAxiosArgs = TutkinnonosatPrivateApiAxiosParamCreator(configuration).revertToVersio(id, versioId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url })
        return axios.request(axiosRequestArgs)
      }
    }
  }
}

/**
 * TutkinnonosatPrivateApi - factory interface
 * @export
 */
export const TutkinnonosatPrivateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @param {string} koodiUri
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getTutkinnonOsaByKoodi (koodiUri: string, options?: any) {
      return TutkinnonosatPrivateApiFp(configuration).getTutkinnonOsaByKoodi(koodiUri, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getViiteVersio (id: number, versioId: number, options?: any) {
      return TutkinnonosatPrivateApiFp(configuration).getViiteVersio(id, versioId, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    getViiteVersiot (id: number, options?: any) {
      return TutkinnonosatPrivateApiFp(configuration).getViiteVersiot(id, options)(axios, basePath)
    },
    /**
         *
         * @param {number} id
         * @param {number} versioId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    revertToVersio (id: number, versioId: number, options?: any) {
      return TutkinnonosatPrivateApiFp(configuration).revertToVersio(id, versioId, options)(axios, basePath)
    }
  }
}

/**
 * TutkinnonosatPrivateApi - object-oriented interface
 * @export
 * @class TutkinnonosatPrivateApi
 * @extends {BaseAPI}
 */
export class TutkinnonosatPrivateApi extends BaseAPI {
  /**
     *
     * @param {string} koodiUri
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutkinnonosatPrivateApi
     */
  public getTutkinnonOsaByKoodi (koodiUri: string, options?: any) {
    return TutkinnonosatPrivateApiFp(this.configuration).getTutkinnonOsaByKoodi(koodiUri, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} versioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutkinnonosatPrivateApi
     */
  public getViiteVersio (id: number, versioId: number, options?: any) {
    return TutkinnonosatPrivateApiFp(this.configuration).getViiteVersio(id, versioId, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutkinnonosatPrivateApi
     */
  public getViiteVersiot (id: number, options?: any) {
    return TutkinnonosatPrivateApiFp(this.configuration).getViiteVersiot(id, options)(this.axios, this.basePath)
  }

  /**
     *
     * @param {number} id
     * @param {number} versioId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TutkinnonosatPrivateApi
     */
  public revertToVersio (id: number, versioId: number, options?: any) {
    return TutkinnonosatPrivateApiFp(this.configuration).revertToVersio(id, versioId, options)(this.axios, this.basePath)
  }
}
